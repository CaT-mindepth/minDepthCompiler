running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_1. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7ff100d8a760>, 'write': <dependencyGraph.Statement object at 0x7ff100d8a8e0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7ff100dcb610>, 'write': <dependencyGraph.Statement object at 0x7ff100d8a400>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7ff100d8a760>, 'write': <dependencyGraph.Statement object at 0x7ff100d8a8e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7ff100dcb610>, 'write': <dependencyGraph.Statement object at 0x7ff100d8a400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff100d8aaf0>, <dependencyGraph.Codelet object at 0x7ff100d8aa90>, <dependencyGraph.Codelet object at 0x7ff100d8a070>, <dependencyGraph.Codelet object at 0x7ff100d8a1f0>, <dependencyGraph.Codelet object at 0x7ff100d8a970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff100d8aa90>, <dependencyGraph.Codelet object at 0x7ff100d8a1f0>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop01', 'pkt_last_time00', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7ff100d8a8b0>]
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7ff100d8a8b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_arrival', 'saved_hop', 'pkt_new_hop', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_new_hop', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'saved_hop', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7ff100d8a1c0>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_last_time00', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['last_time', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7ff100d8a880>]
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7ff100d8a880>]
removing two old components
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt_last_time00']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_last_time00', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_arrival', 'pkt_new_hop', 'pkt_last_time00']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff100dc2580>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff100dc2580>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff100dc2580>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff100dc2580>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 118 rows, 80 columns and 258 nonzeros
Model fingerprint: 0x37419a21
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 19 columns
Presolve time: 0.01s
Presolved: 115 rows, 61 columns, 272 nonzeros
Variable types: 0 continuous, 61 integer (54 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 3 7 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 1
T0_A_3 1
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7ff100dc29a0>, 0), (<alus.DominoALU object at 0x7ff100dc26a0>, 1), (<alus.DominoALU object at 0x7ff100dc2850>, 2), (<alus.DominoALU object at 0x7ff100dc28b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7ff100dc2580>, 0), (<alus.DominoGenericSALU object at 0x7ff100d8a670>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 4, 'opcode': 14, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 4, 'opcode': 14, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '1'}]}
Time taken: 6.957245349884033 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_2. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f7fbfe0b760>, 'write': <dependencyGraph.Statement object at 0x7f7fbfe0b8e0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f7fbfe4d610>, 'write': <dependencyGraph.Statement object at 0x7f7fbfe0b400>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f7fbfe0b760>, 'write': <dependencyGraph.Statement object at 0x7f7fbfe0b8e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f7fbfe4d610>, 'write': <dependencyGraph.Statement object at 0x7f7fbfe0b400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7fbfe0baf0>, <dependencyGraph.Codelet object at 0x7f7fbfe0ba90>, <dependencyGraph.Codelet object at 0x7f7fbfe0b220>, <dependencyGraph.Codelet object at 0x7f7fbfe0b280>, <dependencyGraph.Codelet object at 0x7f7fbfe0b970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7fbfe0b280>, <dependencyGraph.Codelet object at 0x7f7fbfe0ba90>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_last_time01', 'pkt_saved_hop00', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f7fbfe0b8b0>]
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_next_hop0']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f7fbfe0b8b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_next_hop0']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt_last_time01']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time01']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f7fbfe0b130>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 'pkt_last_time01', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['last_time', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f7fbfe0b880>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f7fbfe0b880>]
removing two old components
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt_last_time00']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f7fbfe41580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f7fbfe41580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f7fbfe41580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f7fbfe41580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 118 rows, 80 columns and 258 nonzeros
Model fingerprint: 0x37419a21
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 19 columns
Presolve time: 0.01s
Presolved: 115 rows, 61 columns, 272 nonzeros
Variable types: 0 continuous, 61 integer (54 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 3 7 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 1
T0_A_3 1
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f7fbfe419a0>, 0), (<alus.DominoALU object at 0x7f7fbfe416a0>, 1), (<alus.DominoALU object at 0x7f7fbfe41850>, 2), (<alus.DominoALU object at 0x7f7fbfe418b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f7fbfe41580>, 0), (<alus.DominoGenericSALU object at 0x7f7fbfe0b670>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 13, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '14'}, {'id': 5, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 13, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '14'}, {'id': 5, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '6'}]}
Time taken: 8.14149785041809 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_3. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fc8571af610>, 'write': <dependencyGraph.Statement object at 0x7fc85716d400>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7fc85716d760>, 'write': <dependencyGraph.Statement object at 0x7fc85716d8e0>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fc8571af610>, 'write': <dependencyGraph.Statement object at 0x7fc85716d400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fc85716d760>, 'write': <dependencyGraph.Statement object at 0x7fc85716d8e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc85716daf0>, <dependencyGraph.Codelet object at 0x7fc85716da90>, <dependencyGraph.Codelet object at 0x7fc85716d130>, <dependencyGraph.Codelet object at 0x7fc85716d1f0>, <dependencyGraph.Codelet object at 0x7fc85716d970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc85716da90>, <dependencyGraph.Codelet object at 0x7fc85716d1f0>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fc85716d8b0>]
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_next_hop0']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fc85716d8b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_next_hop0']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_arrival', 'saved_hop', 'pkt_new_hop', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_new_hop', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt_last_time01']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time01']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7fc85716d1c0>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 'pkt_last_time01', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fc85716d880>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fc85716d880>]
removing two old components
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt_last_time00']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_arrival', 'pkt_new_hop', 'pkt_last_time00']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc8571a6580>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc8571a6580>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc8571a6580>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc8571a6580>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 117 rows, 80 columns and 256 nonzeros
Model fingerprint: 0x85da4ce4
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 18 columns
Presolve time: 0.01s
Presolved: 116 rows, 62 columns, 275 nonzeros
Variable types: 0 continuous, 62 integer (55 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 3 7 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  -0.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fc8571a69a0>, 0), (<alus.DominoALU object at 0x7fc8571a66a0>, 1), (<alus.DominoALU object at 0x7fc8571a6850>, 2), (<alus.DominoALU object at 0x7fc8571a68b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fc8571a6580>, 0), (<alus.DominoGenericSALU object at 0x7fc85716d670>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '8'}, {'id': 4, 'opcode': 27, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '8'}, {'id': 4, 'opcode': 27, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}]}
Time taken: 8.303293943405151 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_4. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fcda3f80760>, 'write': <dependencyGraph.Statement object at 0x7fcda3f808e0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fcda3fc2610>, 'write': <dependencyGraph.Statement object at 0x7fcda3f80400>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fcda3f80760>, 'write': <dependencyGraph.Statement object at 0x7fcda3f808e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fcda3fc2610>, 'write': <dependencyGraph.Statement object at 0x7fcda3f80400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fcda3f80af0>, <dependencyGraph.Codelet object at 0x7fcda3f80a90>, <dependencyGraph.Codelet object at 0x7fcda3f80220>, <dependencyGraph.Codelet object at 0x7fcda3f80280>, <dependencyGraph.Codelet object at 0x7fcda3f80970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fcda3f80280>, <dependencyGraph.Codelet object at 0x7fcda3f80a90>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_last_time00', 'pkt_saved_hop00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fcda3f808b0>]
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_next_hop0']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fcda3f808b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_next_hop0']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7fcda3f80130>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['last_time', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fcda3f80880>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fcda3f80880>]
removing two old components
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt_last_time00']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcda3fb9580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcda3fb9580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcda3fb9580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcda3fb9580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 117 rows, 80 columns and 256 nonzeros
Model fingerprint: 0xc7e821b3
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 18 columns
Presolve time: 0.01s
Presolved: 116 rows, 62 columns, 275 nonzeros
Variable types: 0 continuous, 62 integer (55 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fcda3fb99a0>, 0), (<alus.DominoALU object at 0x7fcda3fb96a0>, 1), (<alus.DominoALU object at 0x7fcda3fb9850>, 2), (<alus.DominoALU object at 0x7fcda3fb98b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fcda3fb9580>, 0), (<alus.DominoGenericSALU object at 0x7fcda3f80670>, 1)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 16, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '18'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 16, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '18'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '1'}]}
Time taken: 7.9038567543029785 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_5. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fe7c75ee760>, 'write': <dependencyGraph.Statement object at 0x7fe7c75ee8e0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fe7c7631610>, 'write': <dependencyGraph.Statement object at 0x7fe7c75ee400>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fe7c75ee760>, 'write': <dependencyGraph.Statement object at 0x7fe7c75ee8e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fe7c7631610>, 'write': <dependencyGraph.Statement object at 0x7fe7c75ee400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe7c75eeaf0>, <dependencyGraph.Codelet object at 0x7fe7c75eea90>, <dependencyGraph.Codelet object at 0x7fe7c75ee220>, <dependencyGraph.Codelet object at 0x7fe7c75ee280>, <dependencyGraph.Codelet object at 0x7fe7c75ee970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe7c75ee280>, <dependencyGraph.Codelet object at 0x7fe7c75eea90>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fe7c75ee8b0>]
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop00', 'pkt_saved_hop01']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fe7c75ee8b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop00', 'pkt_saved_hop01']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt_last_time01']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time01']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7fe7c75ee130>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 'pkt_last_time01', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fe7c75ee880>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fe7c75ee880>]
removing two old components
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt_last_time00']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe7c7627580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe7c7627580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe7c7627580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe7c7627580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 118 rows, 80 columns and 258 nonzeros
Model fingerprint: 0x37419a21
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 19 columns
Presolve time: 0.01s
Presolved: 115 rows, 61 columns, 272 nonzeros
Variable types: 0 continuous, 61 integer (54 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 3 7 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 1
T0_A_3 1
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fe7c76279a0>, 0), (<alus.DominoALU object at 0x7fe7c76276a0>, 1), (<alus.DominoALU object at 0x7fe7c7627850>, 2), (<alus.DominoALU object at 0x7fe7c76278b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fe7c7627580>, 0), (<alus.DominoGenericSALU object at 0x7fe7c75ee670>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 10, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '20'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '7'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 10, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '20'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '7'}]}
Time taken: 7.8811354637146 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_6. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fcdce287760>, 'write': <dependencyGraph.Statement object at 0x7fcdce2878e0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fcdce2c9610>, 'write': <dependencyGraph.Statement object at 0x7fcdce287400>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fcdce287760>, 'write': <dependencyGraph.Statement object at 0x7fcdce2878e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fcdce2c9610>, 'write': <dependencyGraph.Statement object at 0x7fcdce287400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fcdce287af0>, <dependencyGraph.Codelet object at 0x7fcdce287a90>, <dependencyGraph.Codelet object at 0x7fcdce287220>, <dependencyGraph.Codelet object at 0x7fcdce287280>, <dependencyGraph.Codelet object at 0x7fcdce287970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fcdce287280>, <dependencyGraph.Codelet object at 0x7fcdce287a90>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fcdce2878b0>]
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_next_hop0']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fcdce2878b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_next_hop0']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7fcdce287130>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['last_time', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fcdce287880>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fcdce287880>]
removing two old components
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt_last_time00']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcdce2c0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcdce2c0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcdce2c0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcdce2c0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 118 rows, 80 columns and 258 nonzeros
Model fingerprint: 0x37419a21
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 19 columns
Presolve time: 0.01s
Presolved: 115 rows, 61 columns, 272 nonzeros
Variable types: 0 continuous, 61 integer (54 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 3 7 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 1
T0_A_3 1
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fcdce2c09a0>, 0), (<alus.DominoALU object at 0x7fcdce2c06a0>, 1), (<alus.DominoALU object at 0x7fcdce2c0850>, 2), (<alus.DominoALU object at 0x7fcdce2c08b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fcdce2c0580>, 0), (<alus.DominoGenericSALU object at 0x7fcdce287670>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '26'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 4, 'opcode': 1, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '27'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '26'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 4, 'opcode': 1, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '27'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}]}
Time taken: 7.045408725738525 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_7. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f4dbd89e610>, 'write': <dependencyGraph.Statement object at 0x7f4dbd85c400>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f4dbd85c760>, 'write': <dependencyGraph.Statement object at 0x7f4dbd85c8e0>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f4dbd89e610>, 'write': <dependencyGraph.Statement object at 0x7f4dbd85c400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f4dbd85c760>, 'write': <dependencyGraph.Statement object at 0x7f4dbd85c8e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4dbd85caf0>, <dependencyGraph.Codelet object at 0x7f4dbd85ca90>, <dependencyGraph.Codelet object at 0x7f4dbd85c220>, <dependencyGraph.Codelet object at 0x7f4dbd85c280>, <dependencyGraph.Codelet object at 0x7f4dbd85c970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4dbd85c280>, <dependencyGraph.Codelet object at 0x7f4dbd85ca90>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop00', 'pkt_last_time00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f4dbd85c8b0>]
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_next_hop0', 'pkt_saved_hop01']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f4dbd85c8b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_next_hop0', 'pkt_saved_hop01']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'saved_hop', 'pkt_arrival', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'saved_hop', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f4dbd85c130>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['pkt_last_time00', 'last_time']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_last_time00', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f4dbd85c880>]
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt_last_time00', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f4dbd85c880>]
removing two old components
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['pkt_last_time00', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['pkt_last_time00', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_last_time00', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f4dbd895580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f4dbd895580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f4dbd895580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f4dbd895580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 117 rows, 80 columns and 256 nonzeros
Model fingerprint: 0xc7e821b3
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 18 columns
Presolve time: 0.01s
Presolved: 116 rows, 62 columns, 275 nonzeros
Variable types: 0 continuous, 62 integer (55 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f4dbd8959a0>, 0), (<alus.DominoALU object at 0x7f4dbd8956a0>, 1), (<alus.DominoALU object at 0x7f4dbd895850>, 2), (<alus.DominoALU object at 0x7f4dbd8958b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f4dbd895580>, 0), (<alus.DominoGenericSALU object at 0x7f4dbd85c670>, 1)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '6'}, {'id': 3, 'opcode': 14, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 4, 'opcode': 13, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '6'}, {'id': 3, 'opcode': 14, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 4, 'opcode': 13, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}]}
Time taken: 7.081354856491089 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_8. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7ff1404a9610>, 'write': <dependencyGraph.Statement object at 0x7ff140467400>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7ff140467760>, 'write': <dependencyGraph.Statement object at 0x7ff1404678e0>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7ff1404a9610>, 'write': <dependencyGraph.Statement object at 0x7ff140467400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7ff140467760>, 'write': <dependencyGraph.Statement object at 0x7ff1404678e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff140467af0>, <dependencyGraph.Codelet object at 0x7ff140467a90>, <dependencyGraph.Codelet object at 0x7ff140467220>, <dependencyGraph.Codelet object at 0x7ff140467280>, <dependencyGraph.Codelet object at 0x7ff140467970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff140467280>, <dependencyGraph.Codelet object at 0x7ff140467a90>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_saved_hop01', 'pkt_last_time01', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7ff1404678b0>]
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7ff1404678b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'saved_hop', 'pkt_arrival', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt_last_time01']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time01']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7ff140467130>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 'pkt_last_time01', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['pkt_last_time00', 'last_time']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7ff140467880>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt_last_time00', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7ff140467880>]
removing two old components
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['pkt_last_time00', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['pkt_last_time00', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff1404a0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff1404a0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff1404a0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff1404a0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 118 rows, 80 columns and 258 nonzeros
Model fingerprint: 0x37419a21
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 19 columns
Presolve time: 0.01s
Presolved: 115 rows, 61 columns, 272 nonzeros
Variable types: 0 continuous, 61 integer (54 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 3 7 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 1
T0_A_3 1
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7ff1404a09a0>, 0), (<alus.DominoALU object at 0x7ff1404a06a0>, 1), (<alus.DominoALU object at 0x7ff1404a0850>, 2), (<alus.DominoALU object at 0x7ff1404a08b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7ff1404a0580>, 0), (<alus.DominoGenericSALU object at 0x7ff140467670>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '9'}, {'id': 3, 'opcode': 6, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 5, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '9'}, {'id': 3, 'opcode': 6, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 5, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '6'}]}
Time taken: 8.830886363983154 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_9. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f5de5791610>, 'write': <dependencyGraph.Statement object at 0x7f5de574f400>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f5de574f760>, 'write': <dependencyGraph.Statement object at 0x7f5de574f8e0>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f5de5791610>, 'write': <dependencyGraph.Statement object at 0x7f5de574f400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f5de574f760>, 'write': <dependencyGraph.Statement object at 0x7f5de574f8e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5de574faf0>, <dependencyGraph.Codelet object at 0x7f5de574fa90>, <dependencyGraph.Codelet object at 0x7f5de574f220>, <dependencyGraph.Codelet object at 0x7f5de574f280>, <dependencyGraph.Codelet object at 0x7f5de574f970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5de574f280>, <dependencyGraph.Codelet object at 0x7f5de574fa90>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_last_time01', 'pkt_last_time00', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f5de574f8b0>]
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_next_hop0', 'pkt_saved_hop00']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f5de574f8b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_next_hop0', 'pkt_saved_hop00']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f5de574f130>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f5de574f880>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f5de574f880>]
removing two old components
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt_last_time00']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f5de5788580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f5de5788580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f5de5788580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f5de5788580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 118 rows, 80 columns and 258 nonzeros
Model fingerprint: 0x37419a21
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 19 columns
Presolve time: 0.01s
Presolved: 115 rows, 61 columns, 272 nonzeros
Variable types: 0 continuous, 61 integer (54 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 3 7 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 1
T0_A_3 1
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f5de57889a0>, 0), (<alus.DominoALU object at 0x7f5de57886a0>, 1), (<alus.DominoALU object at 0x7f5de5788850>, 2), (<alus.DominoALU object at 0x7f5de57888b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f5de5788580>, 0), (<alus.DominoGenericSALU object at 0x7f5de574f670>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 4, 'opcode': 5, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 4, 'opcode': 5, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '3'}]}
Time taken: 8.874699831008911 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_10. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fca77587760>, 'write': <dependencyGraph.Statement object at 0x7fca775878e0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fca775c9610>, 'write': <dependencyGraph.Statement object at 0x7fca77587400>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fca77587760>, 'write': <dependencyGraph.Statement object at 0x7fca775878e0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fca775c9610>, 'write': <dependencyGraph.Statement object at 0x7fca77587400>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fca77587af0>, <dependencyGraph.Codelet object at 0x7fca77587a90>, <dependencyGraph.Codelet object at 0x7fca77587220>, <dependencyGraph.Codelet object at 0x7fca77587280>, <dependencyGraph.Codelet object at 0x7fca77587970>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fca77587280>, <dependencyGraph.Codelet object at 0x7fca77587a90>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_saved_hop00', 'pkt_last_time01', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fca775878b0>]
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop00', 'pkt_saved_hop01']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fca775878b0>]
removing two old components
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop00', 'pkt_saved_hop01']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_last_time00', 'saved_hop', 'pkt_arrival', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt_last_time01']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time01']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7fca77587130>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 'pkt_last_time01', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['pkt_last_time00', 'last_time']
 node inputs:  ['last_time', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_last_time00', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['last_time', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fca77587880>]
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt_last_time00', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fca77587880>]
removing two old components
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['pkt_last_time00', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 node outputs:  ['pkt_last_time00', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_last_time00', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1'}
{'pkt__br_tmp1'}
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fca775c0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fca775c0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fca775c0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fca775c0580>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
# alus: =  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 6}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 118 rows, 80 columns and 258 nonzeros
Model fingerprint: 0x37419a21
Model has 72 general constraints
Variable types: 0 continuous, 80 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 19 columns
Presolve time: 0.01s
Presolved: 115 rows, 61 columns, 272 nonzeros
Variable types: 0 continuous, 61 integer (54 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 3 7 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 1
T0_A_3 1
T0_A_4 1
T0_A_5 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fca775c0820>, 0), (<alus.DominoALU object at 0x7fca775c06a0>, 1), (<alus.DominoALU object at 0x7fca775c0910>, 2), (<alus.DominoALU object at 0x7fca775c08b0>, 3)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fca775c0580>, 0), (<alus.DominoGenericSALU object at 0x7fca77587670>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '9'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '4'}, {'id': 4, 'opcode': 13, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '30'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0)], 'stateful_alus': [{'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '9'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '4'}, {'id': 4, 'opcode': 13, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '30'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '6'}]}
Time taken: 6.910260438919067 s
preprocessor time:
