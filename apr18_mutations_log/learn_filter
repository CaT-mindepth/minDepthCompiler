running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_1_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe1b4f33760>, 'write': <dependencyGraph.Statement object at 0x7fe1b4f334c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe1b4f33130>, 'write': <dependencyGraph.Statement object at 0x7fe1b4f33580>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fe1b4f76610>, 'write': <dependencyGraph.Statement object at 0x7fe1b4f339a0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe1b4f33760>, 'write': <dependencyGraph.Statement object at 0x7fe1b4f334c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe1b4f33130>, 'write': <dependencyGraph.Statement object at 0x7fe1b4f33580>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fe1b4f76610>, 'write': <dependencyGraph.Statement object at 0x7fe1b4f339a0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe1b4f33ac0>, <dependencyGraph.Codelet object at 0x7fe1b4f33a30>, <dependencyGraph.Codelet object at 0x7fe1b4f33bb0>, <dependencyGraph.Codelet object at 0x7fe1b4f33c10>, <dependencyGraph.Codelet object at 0x7fe1b4f33ca0>, <dependencyGraph.Codelet object at 0x7fe1b4f339d0>, <dependencyGraph.Codelet object at 0x7fe1b4f33d60>, <dependencyGraph.Codelet object at 0x7fe1b4f33dc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe1b4f33c10>, <dependencyGraph.Codelet object at 0x7fe1b4f33ca0>, <dependencyGraph.Codelet object at 0x7fe1b4f33bb0>}
total number of nodes created:  8
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000', 'p_state_200'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_100', 'p_state_200', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_201', 'p_state_100', 'p_state_000']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_201', 'p_state_100', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_101', 'p_state_000', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_101', 'p_state_000', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_001', 'p_state_200']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_001', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe1b4f33730>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe1b4f33730>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['state_2', 'p_state_200']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe1b4f338e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe1b4f338e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe1b4f33400>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe1b4f33400>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
3,5,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x9596c560
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fe1b4f6ca30>, 0), (<alus.DominoALU object at 0x7fe1b4f6ccd0>, 1), (<alus.DominoALU object at 0x7fe1b4f6ce20>, 2), (<alus.DominoALU object at 0x7fe1b4f6cee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fe1b4f6caf0>, 0), (<alus.DominoGenericSALU object at 0x7fe1b4f336d0>, 1), (<alus.DominoGenericSALU object at 0x7fe1b4f6ca60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '16'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '16'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
Time taken: 6.947800159454346 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_2_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f0a122ac130>, 'write': <dependencyGraph.Statement object at 0x7f0a122ac580>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f0a122ef610>, 'write': <dependencyGraph.Statement object at 0x7f0a122ac9a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f0a122ac760>, 'write': <dependencyGraph.Statement object at 0x7f0a122ac4c0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0a122ac130>, 'write': <dependencyGraph.Statement object at 0x7f0a122ac580>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f0a122ef610>, 'write': <dependencyGraph.Statement object at 0x7f0a122ac9a0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f0a122ac760>, 'write': <dependencyGraph.Statement object at 0x7f0a122ac4c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0a122acac0>, <dependencyGraph.Codelet object at 0x7f0a122aca30>, <dependencyGraph.Codelet object at 0x7f0a122acbb0>, <dependencyGraph.Codelet object at 0x7f0a122acc10>, <dependencyGraph.Codelet object at 0x7f0a122acca0>, <dependencyGraph.Codelet object at 0x7f0a122ac9d0>, <dependencyGraph.Codelet object at 0x7f0a122acd60>, <dependencyGraph.Codelet object at 0x7f0a122acdc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0a122acc10>, <dependencyGraph.Codelet object at 0x7f0a122acca0>, <dependencyGraph.Codelet object at 0x7f0a122acbb0>}
total number of nodes created:  8
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_001', 'p_state_201', 'p_state_200', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_200', 'p_state_100', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_201', 'p_state_000']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_100', 'p_state_201', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_101', 'p_state_200', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_101', 'p_state_200', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_001', 'p_state_200']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_001', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0a122ac730>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0a122ac730>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0a122ac8e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0a122ac8e0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0a122ac400>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0a122ac400>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['p_state_100', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
3,4,
+---> dependencies of ALU  2 : 
3,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 3), (1, 4), (2, 3), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xe409f91a
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 352 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f0a122e5a30>, 0), (<alus.DominoALU object at 0x7f0a122e5cd0>, 1), (<alus.DominoALU object at 0x7f0a122e5e20>, 2), (<alus.DominoALU object at 0x7f0a122e5ee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f0a122e5af0>, 0), (<alus.DominoGenericSALU object at 0x7f0a122ac6d0>, 1), (<alus.DominoGenericSALU object at 0x7f0a122e5a60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (1, 4), (2, 3), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (1, 4), (2, 3), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
Time taken: 12.391696214675903 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_3_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe08d545760>, 'write': <dependencyGraph.Statement object at 0x7fe08d5454c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fe08d586610>, 'write': <dependencyGraph.Statement object at 0x7fe08d5459a0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe08d5451c0>, 'write': <dependencyGraph.Statement object at 0x7fe08d545580>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe08d545760>, 'write': <dependencyGraph.Statement object at 0x7fe08d5454c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fe08d586610>, 'write': <dependencyGraph.Statement object at 0x7fe08d5459a0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe08d5451c0>, 'write': <dependencyGraph.Statement object at 0x7fe08d545580>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe08d545ac0>, <dependencyGraph.Codelet object at 0x7fe08d545a30>, <dependencyGraph.Codelet object at 0x7fe08d545bb0>, <dependencyGraph.Codelet object at 0x7fe08d545c10>, <dependencyGraph.Codelet object at 0x7fe08d545ca0>, <dependencyGraph.Codelet object at 0x7fe08d5459d0>, <dependencyGraph.Codelet object at 0x7fe08d545d60>, <dependencyGraph.Codelet object at 0x7fe08d545dc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe08d545c10>, <dependencyGraph.Codelet object at 0x7fe08d545ca0>, <dependencyGraph.Codelet object at 0x7fe08d545bb0>}
total number of nodes created:  8
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_001', 'p_state_201', 'p_state_000', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_200', 'p_state_100', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_201', 'p_state_000', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_201', 'p_state_000', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_000', 'p_state_101']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_000', 'p_state_101']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_001', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_001', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe08d545730>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe08d545730>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe08d5458e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe08d5458e0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['p_state_000', 'state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe08d545400>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe08d545400>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['p_state_100', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x84370873
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fe08d57da30>, 0), (<alus.DominoALU object at 0x7fe08d57dcd0>, 1), (<alus.DominoALU object at 0x7fe08d57de20>, 2), (<alus.DominoALU object at 0x7fe08d57dee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fe08d57daf0>, 0), (<alus.DominoGenericSALU object at 0x7fe08d5456d0>, 1), (<alus.DominoGenericSALU object at 0x7fe08d57da60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '3'}]}
Time taken: 7.931869268417358 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_4_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f6404382610>, 'write': <dependencyGraph.Statement object at 0x7f64043409a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f6404340760>, 'write': <dependencyGraph.Statement object at 0x7f64043404c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f6404340130>, 'write': <dependencyGraph.Statement object at 0x7f6404340580>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f6404382610>, 'write': <dependencyGraph.Statement object at 0x7f64043409a0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6404340760>, 'write': <dependencyGraph.Statement object at 0x7f64043404c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6404340130>, 'write': <dependencyGraph.Statement object at 0x7f6404340580>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6404340ac0>, <dependencyGraph.Codelet object at 0x7f6404340a30>, <dependencyGraph.Codelet object at 0x7f6404340bb0>, <dependencyGraph.Codelet object at 0x7f6404340c10>, <dependencyGraph.Codelet object at 0x7f6404340ca0>, <dependencyGraph.Codelet object at 0x7f64043409d0>, <dependencyGraph.Codelet object at 0x7f6404340d60>, <dependencyGraph.Codelet object at 0x7f6404340dc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6404340c10>, <dependencyGraph.Codelet object at 0x7f6404340ca0>, <dependencyGraph.Codelet object at 0x7f6404340bb0>}
total number of nodes created:  8
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_000', 'p_state_100', 'p_state_201', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_100', 'p_state_200', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_100', 'p_state_201']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p_state_100', 'p_state_201']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_000', 'p_state_101']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_000', 'p_state_101']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_100', 'p_state_001']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_100', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f6404340730>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f6404340730>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['state_2', 'p_state_200']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f64043408e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f64043408e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['p_state_000', 'state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f6404340400>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f6404340400>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
3,
+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x3fb5f6d7
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f6404378a30>, 0), (<alus.DominoALU object at 0x7f6404378cd0>, 1), (<alus.DominoALU object at 0x7f6404378e20>, 2), (<alus.DominoALU object at 0x7f6404378ee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f6404378af0>, 0), (<alus.DominoGenericSALU object at 0x7f64043406d0>, 1), (<alus.DominoGenericSALU object at 0x7f6404378a60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '23'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '23'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
Time taken: 10.746631145477295 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_5_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7fdaf5848610>, 'write': <dependencyGraph.Statement object at 0x7fdaf58059a0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fdaf5805130>, 'write': <dependencyGraph.Statement object at 0x7fdaf5805580>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fdaf5805760>, 'write': <dependencyGraph.Statement object at 0x7fdaf58054c0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fdaf5848610>, 'write': <dependencyGraph.Statement object at 0x7fdaf58059a0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fdaf5805130>, 'write': <dependencyGraph.Statement object at 0x7fdaf5805580>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fdaf5805760>, 'write': <dependencyGraph.Statement object at 0x7fdaf58054c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdaf5805ac0>, <dependencyGraph.Codelet object at 0x7fdaf5805a30>, <dependencyGraph.Codelet object at 0x7fdaf5805bb0>, <dependencyGraph.Codelet object at 0x7fdaf5805c10>, <dependencyGraph.Codelet object at 0x7fdaf5805ca0>, <dependencyGraph.Codelet object at 0x7fdaf58059d0>, <dependencyGraph.Codelet object at 0x7fdaf5805d60>, <dependencyGraph.Codelet object at 0x7fdaf5805dc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdaf5805c10>, <dependencyGraph.Codelet object at 0x7fdaf5805ca0>, <dependencyGraph.Codelet object at 0x7fdaf5805bb0>}
total number of nodes created:  8
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_000', 'p_state_201', 'p_state_200', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_100', 'p_state_200', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_000', 'p_state_201']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_100', 'p_state_000', 'p_state_201']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_101', 'p_state_000', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_101', 'p_state_000', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_200', 'p_state_001']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_200', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdaf5805730>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdaf5805730>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['state_2', 'p_state_200']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdaf58058e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdaf58058e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdaf5805400>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdaf5805400>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x84370873
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fdaf583da30>, 0), (<alus.DominoALU object at 0x7fdaf583dcd0>, 1), (<alus.DominoALU object at 0x7fdaf583de20>, 2), (<alus.DominoALU object at 0x7fdaf583dee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fdaf583daf0>, 0), (<alus.DominoGenericSALU object at 0x7fdaf58056d0>, 1), (<alus.DominoGenericSALU object at 0x7fdaf583da60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '3'}]}
Time taken: 8.014497756958008 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_6_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f478dc2e1c0>, 'write': <dependencyGraph.Statement object at 0x7f478dc2e580>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f478dc2e760>, 'write': <dependencyGraph.Statement object at 0x7f478dc2e4c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f478dc70610>, 'write': <dependencyGraph.Statement object at 0x7f478dc2e9a0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f478dc2e1c0>, 'write': <dependencyGraph.Statement object at 0x7f478dc2e580>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f478dc2e760>, 'write': <dependencyGraph.Statement object at 0x7f478dc2e4c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f478dc70610>, 'write': <dependencyGraph.Statement object at 0x7f478dc2e9a0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f478dc2eac0>, <dependencyGraph.Codelet object at 0x7f478dc2ea30>, <dependencyGraph.Codelet object at 0x7f478dc2ebb0>, <dependencyGraph.Codelet object at 0x7f478dc2ec10>, <dependencyGraph.Codelet object at 0x7f478dc2eca0>, <dependencyGraph.Codelet object at 0x7f478dc2e9d0>, <dependencyGraph.Codelet object at 0x7f478dc2ed60>, <dependencyGraph.Codelet object at 0x7f478dc2edc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f478dc2ec10>, <dependencyGraph.Codelet object at 0x7f478dc2eca0>, <dependencyGraph.Codelet object at 0x7f478dc2ebb0>}
total number of nodes created:  8
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_000', 'p_state_101', 'p_state_200', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000', 'p_state_100', 'p_state_200']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_201', 'p_state_000', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_201', 'p_state_000', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_101', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_state_101', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_001', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_001', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f478dc2e730>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f478dc2e730>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f478dc2e8e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f478dc2e8e0>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['p_state_000', 'state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f478dc2e400>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f478dc2e400>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
3,
+---> dependencies of ALU  2 : 
3,4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 3), (2, 3), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x501031bc
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 352 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f478dc66a30>, 0), (<alus.DominoALU object at 0x7f478dc66cd0>, 1), (<alus.DominoALU object at 0x7f478dc66e20>, 2), (<alus.DominoALU object at 0x7f478dc66ee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f478dc66af0>, 0), (<alus.DominoGenericSALU object at 0x7f478dc2e6d0>, 1), (<alus.DominoGenericSALU object at 0x7f478dc66a60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (2, 3), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '8'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '9'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (2, 3), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '8'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '9'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
Time taken: 5.446761608123779 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_7_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff54032e130>, 'write': <dependencyGraph.Statement object at 0x7ff54032e580>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7ff54032e760>, 'write': <dependencyGraph.Statement object at 0x7ff54032e4c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7ff540371610>, 'write': <dependencyGraph.Statement object at 0x7ff54032e9a0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff54032e130>, 'write': <dependencyGraph.Statement object at 0x7ff54032e580>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7ff54032e760>, 'write': <dependencyGraph.Statement object at 0x7ff54032e4c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7ff540371610>, 'write': <dependencyGraph.Statement object at 0x7ff54032e9a0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff54032eac0>, <dependencyGraph.Codelet object at 0x7ff54032ea30>, <dependencyGraph.Codelet object at 0x7ff54032ebb0>, <dependencyGraph.Codelet object at 0x7ff54032ec10>, <dependencyGraph.Codelet object at 0x7ff54032eca0>, <dependencyGraph.Codelet object at 0x7ff54032e9d0>, <dependencyGraph.Codelet object at 0x7ff54032ed60>, <dependencyGraph.Codelet object at 0x7ff54032edc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff54032ec10>, <dependencyGraph.Codelet object at 0x7ff54032eca0>, <dependencyGraph.Codelet object at 0x7ff54032ebb0>}
total number of nodes created:  8
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_200', 'p_state_201', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_100', 'p_state_200', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_201', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p_state_201', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_101', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_state_101', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_100', 'p_state_001']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_100', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7ff54032e730>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7ff54032e730>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7ff54032e8e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7ff54032e8e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7ff54032e400>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7ff54032e400>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['p_state_100', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
3,
+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x3fb5f6d7
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7ff540367a30>, 0), (<alus.DominoALU object at 0x7ff540367cd0>, 1), (<alus.DominoALU object at 0x7ff540367e20>, 2), (<alus.DominoALU object at 0x7ff540367ee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7ff540367af0>, 0), (<alus.DominoGenericSALU object at 0x7ff54032e6d0>, 1), (<alus.DominoGenericSALU object at 0x7ff540367a60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
Time taken: 8.938773155212402 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_8_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = 1; state_0 = p_state_001;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_201 = 1; state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fa07c092760>, 'write': <dependencyGraph.Statement object at 0x7fa07c0924c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fa07c0d5610>, 'write': <dependencyGraph.Statement object at 0x7fa07c0929a0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fa07c0921c0>, 'write': <dependencyGraph.Statement object at 0x7fa07c092580>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa07c092760>, 'write': <dependencyGraph.Statement object at 0x7fa07c0924c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa07c0d5610>, 'write': <dependencyGraph.Statement object at 0x7fa07c0929a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fa07c0921c0>, 'write': <dependencyGraph.Statement object at 0x7fa07c092580>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa07c092ac0>, <dependencyGraph.Codelet object at 0x7fa07c092a30>, <dependencyGraph.Codelet object at 0x7fa07c092bb0>, <dependencyGraph.Codelet object at 0x7fa07c092c10>, <dependencyGraph.Codelet object at 0x7fa07c092ca0>, <dependencyGraph.Codelet object at 0x7fa07c0929d0>, <dependencyGraph.Codelet object at 0x7fa07c092d60>, <dependencyGraph.Codelet object at 0x7fa07c092dc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_001 = 1;
p_state_101 = 1;
p_state_201 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa07c092c10>, <dependencyGraph.Codelet object at 0x7fa07c092ca0>, <dependencyGraph.Codelet object at 0x7fa07c092bb0>}
total number of nodes created:  8
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_200', 'p_state_100', 'p_state_201', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;', 'p_state_201 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_100', 'p_state_000', 'p_state_200']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_100', 'p_state_001']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_100', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_200', 'p_state_101']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_state_200', 'p_state_101']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_100', 'p_state_201']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p_state_100', 'p_state_201']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa07c092730>]
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa07c092730>]
removing two old components
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['p_state_000', 'state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa07c0928e0>]
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa07c0928e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['state_2', 'p_state_200']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa07c092400>]
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa07c092400>]
removing two old components
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['p_state_100', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
3,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 4), (2, 3), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 133 rows, 93 columns and 296 nonzeros
Model fingerprint: 0xd992ec70
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 15 rows and 0 columns
Presolve removed 0 rows and 14 columns
Presolve time: 0.01s
Presolved: 148 rows, 79 columns, 353 nonzeros
Variable types: 0 continuous, 79 integer (71 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 -0
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  -0.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fa07c0cba30>, 0), (<alus.DominoALU object at 0x7fa07c0cbcd0>, 1), (<alus.DominoALU object at 0x7fa07c0cbe20>, 2), (<alus.DominoALU object at 0x7fa07c0cbee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fa07c0cbaf0>, 0), (<alus.DominoGenericSALU object at 0x7fa07c0926d0>, 1), (<alus.DominoGenericSALU object at 0x7fa07c0cba60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '8'}, {'id': 5, 'opcode': 2, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '8'}, {'id': 5, 'opcode': 2, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
Time taken: 8.75637149810791 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_9_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = 1; state_0 = p_state_001;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_201 = 1; state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7eff28e7d130>, 'write': <dependencyGraph.Statement object at 0x7eff28e7d580>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7eff28e7d760>, 'write': <dependencyGraph.Statement object at 0x7eff28e7d4c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7eff28ec0610>, 'write': <dependencyGraph.Statement object at 0x7eff28e7d9a0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7eff28e7d130>, 'write': <dependencyGraph.Statement object at 0x7eff28e7d580>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7eff28e7d760>, 'write': <dependencyGraph.Statement object at 0x7eff28e7d4c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7eff28ec0610>, 'write': <dependencyGraph.Statement object at 0x7eff28e7d9a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7eff28e7dac0>, <dependencyGraph.Codelet object at 0x7eff28e7da30>, <dependencyGraph.Codelet object at 0x7eff28e7dbb0>, <dependencyGraph.Codelet object at 0x7eff28e7dc10>, <dependencyGraph.Codelet object at 0x7eff28e7dca0>, <dependencyGraph.Codelet object at 0x7eff28e7d9d0>, <dependencyGraph.Codelet object at 0x7eff28e7dd60>, <dependencyGraph.Codelet object at 0x7eff28e7ddc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_001 = 1;
p_state_101 = 1;
p_state_201 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7eff28e7dc10>, <dependencyGraph.Codelet object at 0x7eff28e7dca0>, <dependencyGraph.Codelet object at 0x7eff28e7dbb0>}
total number of nodes created:  8
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_201', 'p_state_101', 'p_state_200', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;', 'p_state_201 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000', 'p_state_100', 'p_state_200']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_001', 'p_state_200']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_001', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_101', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_state_101', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_100', 'p_state_201']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p_state_100', 'p_state_201']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7eff28e7d730>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7eff28e7d730>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7eff28e7d8e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7eff28e7d8e0>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['state_2', 'p_state_200']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7eff28e7d400>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7eff28e7d400>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
3,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 4), (2, 3), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 133 rows, 93 columns and 296 nonzeros
Model fingerprint: 0xd992ec70
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 15 rows and 0 columns
Presolve removed 0 rows and 14 columns
Presolve time: 0.01s
Presolved: 148 rows, 79 columns, 353 nonzeros
Variable types: 0 continuous, 79 integer (71 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 -0
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  -0.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7eff28eb5a30>, 0), (<alus.DominoALU object at 0x7eff28eb5cd0>, 1), (<alus.DominoALU object at 0x7eff28eb5e20>, 2), (<alus.DominoALU object at 0x7eff28eb5ee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7eff28eb5af0>, 0), (<alus.DominoGenericSALU object at 0x7eff28e7d6d0>, 1), (<alus.DominoGenericSALU object at 0x7eff28eb5a60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 5, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '24'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 5, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '24'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '3'}]}
Time taken: 7.446983337402344 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_10_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = 1; state_0 = p_state_001;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_201 = 1; state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f0996c25610>, 'write': <dependencyGraph.Statement object at 0x7f0996be29a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f0996be2760>, 'write': <dependencyGraph.Statement object at 0x7f0996be24c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f0996be21c0>, 'write': <dependencyGraph.Statement object at 0x7f0996be2580>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0996c25610>, 'write': <dependencyGraph.Statement object at 0x7f0996be29a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f0996be2760>, 'write': <dependencyGraph.Statement object at 0x7f0996be24c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f0996be21c0>, 'write': <dependencyGraph.Statement object at 0x7f0996be2580>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  11
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC 6
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0996be2ac0>, <dependencyGraph.Codelet object at 0x7f0996be2a30>, <dependencyGraph.Codelet object at 0x7f0996be2bb0>, <dependencyGraph.Codelet object at 0x7f0996be2c10>, <dependencyGraph.Codelet object at 0x7f0996be2ca0>, <dependencyGraph.Codelet object at 0x7f0996be29d0>, <dependencyGraph.Codelet object at 0x7f0996be2d60>, <dependencyGraph.Codelet object at 0x7f0996be2dc0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_001 = 1;
p_state_101 = 1;
p_state_201 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0996be2c10>, <dependencyGraph.Codelet object at 0x7f0996be2ca0>, <dependencyGraph.Codelet object at 0x7f0996be2bb0>}
total number of nodes created:  8
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_101', 'p_state_200', 'p_state_001', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;', 'p_state_201 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000', 'p_state_100', 'p_state_200']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_200', 'p_state_001']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_200', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_200', 'p_state_101']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_state_200', 'p_state_101']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_100', 'p_state_201']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p_state_100', 'p_state_201']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0996be2730>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0996be2730>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0996be28e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0996be28e0>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['state_2', 'p_state_200']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;']
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0996be2400>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0996be2400>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_8_stateless_p_pkt_00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_00_bnd_2.sk.out
['comp_8']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x84370873
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f0996c1ba30>, 0), (<alus.DominoALU object at 0x7f0996c1bcd0>, 1), (<alus.DominoALU object at 0x7f0996c1be20>, 2), (<alus.DominoALU object at 0x7f0996c1bee0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f0996c1baf0>, 0), (<alus.DominoGenericSALU object at 0x7f0996be26d0>, 1), (<alus.DominoGenericSALU object at 0x7f0996c1ba60>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '30'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '7'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '30'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '7'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
Time taken: 7.827505350112915 s
preprocessor time:
