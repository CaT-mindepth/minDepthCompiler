running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_1_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7efdc20ef610>, 'write': <dependencyGraph.Statement object at 0x7efdc20ac730>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7efdc20ef610>, 'write': <dependencyGraph.Statement object at 0x7efdc20ac730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7efdc20acaf0>, <dependencyGraph.Codelet object at 0x7efdc20acac0>, <dependencyGraph.Codelet object at 0x7efdc20ac100>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7efdc20ac100>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);', 'p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = !(p_state_000==29);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_001']
redundant outputs ['p_state_002', 'p__br_tmp5']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = !(p_state_000==29);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_state_000==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_state_000==29);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000', 'p__br_tmp4']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7efdc20e6220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7efdc20ac550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1388864517211914 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_2_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2846c92610>, 'write': <dependencyGraph.Statement object at 0x7f2846c50730>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2846c92610>, 'write': <dependencyGraph.Statement object at 0x7f2846c50730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2846c50af0>, <dependencyGraph.Codelet object at 0x7f2846c50ac0>, <dependencyGraph.Codelet object at 0x7f2846c50100>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2846c50100>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);', 'p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = !(p_state_000==29);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_001']
redundant outputs ['p__br_tmp5', 'p_state_002']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = !(p_state_000==29);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp4', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_state_000==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_state_000==29);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp4', 'state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp4', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f2846c89220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f2846c50550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0772643089294434 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_3_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp6 = !(p_state_000==29);

lhs p__br_tmp6 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp6 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0']
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_000', 'p_state_000']
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp7 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp7 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_00']
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp6 = !(p_state_000==29); p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f25dfd01610>, 'write': <dependencyGraph.Statement object at 0x7f25dfcbf730>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f25dfd01610>, 'write': <dependencyGraph.Statement object at 0x7f25dfcbf730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = !(p_state_000==29) stmts len 1
p__br_tmp6 = !(p_state_000==29);
v p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
v p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp7 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f25dfcbfaf0>, <dependencyGraph.Codelet object at 0x7f25dfcbfac0>, <dependencyGraph.Codelet object at 0x7f25dfcbf160>]
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp6 = !(p_state_000==29);
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f25dfcbf160>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp6', 'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp6 = !(p_state_000==29)
2   p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp7', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp6 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp6 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp6 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);', 'p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);', 'p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);', 'p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);', 'p__br_tmp6 = !(p_state_000==29);', 'p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp7', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
     |  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
 node outputs:  ['p__br_tmp7']
 node inputs:  ['p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp7'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp6', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs ['p__br_tmp7', 'p_state_002']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
 * recursive_merge: node ::  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp6', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
     |  p__br_tmp6 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp6', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp6', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp7'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
     |  p__br_tmp6 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp6 = !(p_state_000==29);
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = !(p_state_000==29);
     |  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp6', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = !(p_state_000==29);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'p__br_tmp6', 'p_state_001', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp6 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
u:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
u:  p__br_tmp6 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
u:  p__br_tmp6 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f25dfcf8220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f25dfcbf550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp6', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp6', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1353974342346191 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_4_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2f4c05f610>, 'write': <dependencyGraph.Statement object at 0x7f2f4c01d730>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2f4c05f610>, 'write': <dependencyGraph.Statement object at 0x7f2f4c01d730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2f4c01daf0>, <dependencyGraph.Codelet object at 0x7f2f4c01dac0>, <dependencyGraph.Codelet object at 0x7f2f4c01d0d0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2f4c01d0d0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);', 'p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = !(p_state_000==29);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs ['p__br_tmp5', 'p_state_002']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = !(p_state_000==29);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_state_000==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_state_000==29);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp4', 'p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f2f4c056220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f2f4c01d550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'p_state_000', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'p_state_000', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1552705764770508 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_5_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f84a2a99610>, 'write': <dependencyGraph.Statement object at 0x7f84a2a56730>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f84a2a99610>, 'write': <dependencyGraph.Statement object at 0x7f84a2a56730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f84a2a56af0>, <dependencyGraph.Codelet object at 0x7f84a2a56ac0>, <dependencyGraph.Codelet object at 0x7f84a2a56100>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f84a2a56100>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);', 'p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = !(p_state_000==29);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs ['p_state_002', 'p__br_tmp5']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = !(p_state_000==29);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp4', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_state_000==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_state_000==29);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'p__br_tmp4', 'state_0', 'p_state_001']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp4', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f84a2a90220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f84a2a56550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp4', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp4', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0899474620819092 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_6_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp8 = !(p_state_000==29);

lhs p__br_tmp8 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp8 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp8 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0']
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_state_000', 'p_state_000']
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp9 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp9 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_00']
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp9 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp8 = !(p_state_000==29); p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
RAW p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f5848648610>, 'write': <dependencyGraph.Statement object at 0x7f5848607730>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f5848648610>, 'write': <dependencyGraph.Statement object at 0x7f5848607730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = !(p_state_000==29) stmts len 1
p__br_tmp8 = !(p_state_000==29);
v p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
v p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp9 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5848607af0>, <dependencyGraph.Codelet object at 0x7f5848607ac0>, <dependencyGraph.Codelet object at 0x7f5848607040>]
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp8 = !(p_state_000==29);
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5848607040>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp8', 'p__br_tmp9'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp8 = !(p_state_000==29)
2   p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp9', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp8 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp8 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp8 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);', 'p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);', 'p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);', 'p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);', 'p__br_tmp8 = !(p_state_000==29);', 'p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp9']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
     |  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
 node outputs:  ['p__br_tmp9']
 node inputs:  ['p_state_001', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp9'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp8', 'p_state_000', 'p_state_001', 'p_state_000']
redundant outputs ['p__br_tmp9', 'p_state_002']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
 * recursive_merge: node ::  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp8', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
     |  p__br_tmp8 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp8', 'p_state_000', 'p_state_001', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp8', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp9'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
     |  p__br_tmp8 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp8 = !(p_state_000==29);
 node outputs:  ['p__br_tmp8']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp8', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp8 = !(p_state_000==29);
     |  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp8', 'p_state_000', 'p_state_001', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp8 = !(p_state_000==29);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'state_0', 'p__br_tmp8', 'p_state_001']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp8', 'p_state_001', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001', 'p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp8 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
u:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
u:  p__br_tmp8 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
u:  p__br_tmp8 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f584863f220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f5848607550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp8', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp8', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0729351043701172 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_7_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp5 = p_state_000==29;

lhs p__br_tmp5 rhs p_state_000==29
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_state_000==29;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp5 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (0) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000']
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

lhs p__br_tmp6 rhs (!(p_state_000==29))&&(!(p_state_001==29))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp6 ? (0) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_00']
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (1+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp5 = p_state_000==29;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
RAW p__br_tmp5 = p_state_000==29; p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
RAW p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
RAW p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7feeb4eb5610>, 'write': <dependencyGraph.Statement object at 0x7feeb4e748e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7feeb4eb5610>, 'write': <dependencyGraph.Statement object at 0x7feeb4e748e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp5 = p_state_000==29 stmts len 1
p__br_tmp5 = p_state_000==29;
v p_state_001 = p__br_tmp5 ? (0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
v p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) stmts len 1
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
v p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7feeb4e74af0>, <dependencyGraph.Codelet object at 0x7feeb4e74ac0>, <dependencyGraph.Codelet object at 0x7feeb4e74100>]
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp5 = p_state_000==29;
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7feeb4e74100>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp5 = p_state_000==29
2   p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
3   p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
4   p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp6', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = p_state_000==29
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
 rhs_vars:  ['p__br_tmp5', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp5 = p_state_000==29
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = p_state_000==29
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp5 = p_state_000==29
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = p_state_000==29
find_codelet for stmt :  p__br_tmp5 = p_state_000==29
finding node for codelet:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);', 'p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));', 'p_state_001 = p__br_tmp5 ? (0) : (p_state_000);', 'p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);', 'p__br_tmp5 = p_state_000==29;', 'p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
     |  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
     |  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
     |  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp5', 'p_state_000', 'p_state_001']
redundant outputs ['p_state_002', 'p__br_tmp6']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
 * recursive_merge: node ::  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
     |  p__br_tmp5 = p_state_000==29;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp5', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
     |  p__br_tmp5 = p_state_000==29;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp5 = p_state_000==29;
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = p_state_000==29;
     |  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp5', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = p_state_000==29;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'state_0', 'p__br_tmp5', 'p_state_001']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = p_state_000==29;
u:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
u:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
u:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
v:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
u:  p__br_tmp5 = p_state_000==29;
v:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
u:  p__br_tmp5 = p_state_000==29;
v:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
u:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
v:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7feeb4eac220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7feeb4e74550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp5', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp5', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1489615440368652 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_8_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fcd74d9a610>, 'write': <dependencyGraph.Statement object at 0x7fcd74d57730>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fcd74d9a610>, 'write': <dependencyGraph.Statement object at 0x7fcd74d57730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fcd74d57af0>, <dependencyGraph.Codelet object at 0x7fcd74d57ac0>, <dependencyGraph.Codelet object at 0x7fcd74d57100>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fcd74d57100>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);', 'p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = !(p_state_000==29);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs ['p__br_tmp5', 'p_state_002']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = !(p_state_000==29);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_state_000==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_state_000==29);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp4', 'state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fcd74d91220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fcd74d57550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1154682636260986 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_9_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp2 = !(p_state_000==29);

lhs p__br_tmp2 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp2 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp2 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp3 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp3 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_00']
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp3 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp2 = !(p_state_000==29); p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
RAW p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f8364546610>, 'write': <dependencyGraph.Statement object at 0x7f8364503730>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f8364546610>, 'write': <dependencyGraph.Statement object at 0x7f8364503730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = !(p_state_000==29) stmts len 1
p__br_tmp2 = !(p_state_000==29);
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp3 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8364503af0>, <dependencyGraph.Codelet object at 0x7f8364503ac0>, <dependencyGraph.Codelet object at 0x7f8364503100>]
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp2 = !(p_state_000==29);
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8364503100>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp2', 'p__br_tmp3'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp2 = !(p_state_000==29)
2   p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp3', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp2 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp2 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp2 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);', 'p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);', 'p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);', 'p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);', 'p__br_tmp2 = !(p_state_000==29);', 'p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp3', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
     |  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
 node outputs:  ['p__br_tmp3']
 node inputs:  ['p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp2', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs ['p__br_tmp3', 'p_state_002']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
 * recursive_merge: node ::  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp2', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
     |  p__br_tmp2 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp2', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp2', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
     |  p__br_tmp2 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = !(p_state_000==29);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = !(p_state_000==29);
     |  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp2', 'p_state_000', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = !(p_state_000==29);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp2', 'p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp2 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
u:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
u:  p__br_tmp2 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
u:  p__br_tmp2 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f836453d220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f8364503550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp2', 'p_state_000', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp2', 'p_state_000', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0904819965362549 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_10_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd78509c610>, 'write': <dependencyGraph.Statement object at 0x7fd785059730>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd78509c610>, 'write': <dependencyGraph.Statement object at 0x7fd785059730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd785059af0>, <dependencyGraph.Codelet object at 0x7fd785059ac0>, <dependencyGraph.Codelet object at 0x7fd785059100>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd785059100>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);', 'p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = !(p_state_000==29);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_001']
redundant outputs ['p__br_tmp5', 'p_state_002']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = !(p_state_000==29);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = !(p_state_000==29);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_state_000==29);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_state_000==29);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000', 'p__br_tmp4']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_001', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fd785093220>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fd785059550>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1361169815063477 s
preprocessor time:
