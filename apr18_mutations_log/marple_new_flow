running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f0d984c3610>, 'write': <dependencyGraph.Statement object at 0x7f0d98481670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0d984c3610>, 'write': <dependencyGraph.Statement object at 0x7f0d98481670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0d98481070>, <dependencyGraph.Codelet object at 0x7f0d984815b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0d984815b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp1']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7f0d98481a00>]
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p__br_tmp1']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f0d98481880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f0d98481b80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < 1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '4'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < 1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '4'}]}
Time taken: 2.553285837173462 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fe874c93610>, 'write': <dependencyGraph.Statement object at 0x7fe874c51670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe874c93610>, 'write': <dependencyGraph.Statement object at 0x7fe874c51670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe874c51070>, <dependencyGraph.Codelet object at 0x7fe874c515b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe874c515b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp1']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7fe874c51a00>]
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p__br_tmp1']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fe874c51880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fe874c51b80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
Time taken: 6.554017782211304 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fb51822a610>, 'write': <dependencyGraph.Statement object at 0x7fb5181e7670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb51822a610>, 'write': <dependencyGraph.Statement object at 0x7fb5181e7670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb5181e7070>, <dependencyGraph.Codelet object at 0x7fb5181e75b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb5181e75b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp1']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7fb5181e7a00>]
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p__br_tmp1']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fb5181e7880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fb5181e7b80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '31'}]}
Time taken: 1.590834140777588 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f3ed711f610>, 'write': <dependencyGraph.Statement object at 0x7f3ed70dd670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3ed711f610>, 'write': <dependencyGraph.Statement object at 0x7f3ed70dd670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3ed70dd070>, <dependencyGraph.Codelet object at 0x7f3ed70dd5b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3ed70dd5b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp1']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7f3ed70dda00>]
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p__br_tmp1']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f3ed70dd880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f3ed70ddb80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
Time taken: 2.6249594688415527 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f9b763ee610>, 'write': <dependencyGraph.Statement object at 0x7f9b763ac670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f9b763ee610>, 'write': <dependencyGraph.Statement object at 0x7f9b763ac670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9b763ac070>, <dependencyGraph.Codelet object at 0x7f9b763ac5b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9b763ac5b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p__br_tmp1', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7f9b763aca00>]
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['p__br_tmp1', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f9b763ac880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f9b763acb80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
Time taken: 3.6417689323425293 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fc49ef50610>, 'write': <dependencyGraph.Statement object at 0x7fc49ef0d670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc49ef50610>, 'write': <dependencyGraph.Statement object at 0x7fc49ef0d670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc49ef0d070>, <dependencyGraph.Codelet object at 0x7fc49ef0d5b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc49ef0d5b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p__br_tmp1', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7fc49ef0da00>]
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p__br_tmp1']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fc49ef0d880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fc49ef0db80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
Time taken: 1.6551876068115234 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f50e87b0610>, 'write': <dependencyGraph.Statement object at 0x7f50e876d670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f50e87b0610>, 'write': <dependencyGraph.Statement object at 0x7f50e876d670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f50e876d070>, <dependencyGraph.Codelet object at 0x7f50e876d5b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f50e876d5b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp1']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7f50e876da00>]
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p__br_tmp1']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f50e876d880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f50e876db80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < 1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < 1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
Time taken: 3.4585156440734863 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff1269df610>, 'write': <dependencyGraph.Statement object at 0x7ff12699c670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff1269df610>, 'write': <dependencyGraph.Statement object at 0x7ff12699c670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff12699c070>, <dependencyGraph.Codelet object at 0x7ff12699c5b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff12699c5b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p__br_tmp1', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7ff12699ca00>]
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['p__br_tmp1', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7ff12699c880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7ff12699cb80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_00', 'immediate_operand': '1'}]}
Time taken: 13.511399745941162 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f450625f610>, 'write': <dependencyGraph.Statement object at 0x7f450621d670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f450625f610>, 'write': <dependencyGraph.Statement object at 0x7f450621d670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f450621d070>, <dependencyGraph.Codelet object at 0x7f450621d5b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f450621d5b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp1']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7f450621da00>]
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p__br_tmp1']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f450621d880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f450621db80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '31'}]}
Time taken: 1.5952410697937012 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fae7ee1b610>, 'write': <dependencyGraph.Statement object at 0x7fae7edd8670>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fae7ee1b610>, 'write': <dependencyGraph.Statement object at 0x7fae7edd8670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fae7edd8070>, <dependencyGraph.Codelet object at 0x7fae7edd85b0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fae7edd85b0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  2
finding node for codelet:  p__br_tmp1 = p_state_000==0
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp1 = p_state_000==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  3
---------------number of nodes in the graph:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp1 = p_state_000==0;', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = p_state_000==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp1 = p_state_000==0;
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = p_state_000==0;
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp1']
state_var ['state_0']
redundant outputs []
     | merged inputs:  []
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp1 = p_state_000==0;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_state_000==0;  with *************************
[<dependencyGraph.Statement object at 0x7fae7edd8a00>]
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p__br_tmp1 = p_state_000==0;
new component inputs:  ['state_0']
new component outputs:  ['p__br_tmp1', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp1 = p_state_000==0;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp1 = p_state_000==0;
u:  p__br_tmp1 = p_state_000==0;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fae7edd8880>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fae7edd8b80>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '3'}]}
Time taken: 2.621312379837036 s
preprocessor time:
