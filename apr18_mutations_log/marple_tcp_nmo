running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f713313b610>, 'write': <dependencyGraph.Statement object at 0x7f71330f8400>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f71330f8760>, 'write': <dependencyGraph.Statement object at 0x7f71330f88e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f713313b610>, 'write': <dependencyGraph.Statement object at 0x7f71330f8400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f71330f8760>, 'write': <dependencyGraph.Statement object at 0x7f71330f88e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f71330f8130>, <dependencyGraph.Codelet object at 0x7f71330f8040>, <dependencyGraph.Codelet object at 0x7f71330f8a60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f71330f8130>, <dependencyGraph.Codelet object at 0x7f71330f8a60>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_pkt_0<p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp4 = !(p_pkt_0<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);', 'p__br_tmp4 = !(p_pkt_0<p_state_000);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_state_001', 'p_pkt_0', 'p_state_000', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p__br_tmp4 = !(p_pkt_0<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 * recursive_merge: node ::  p__br_tmp4 = !(p_pkt_0<p_state_000);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_pkt_0<p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_pkt_0<p_state_000);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0', 'p__br_tmp4']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001', 'p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 --- cannot fold. too many stateless inputs:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp4 = !(p_pkt_0<p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp4 = !(p_pkt_0<p_state_000);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f71330f8fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
Stateless ALU id 2 has output p__br_tmp5
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f713312e190>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f71330f8fa0>, 0), (<alus.DominoGenericSALU object at 0x7f71330f8fd0>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0', 'p__br_tmp4'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0', 'p__br_tmp4'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
Time taken: 1.5215575695037842 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1bc8a1d610>, 'write': <dependencyGraph.Statement object at 0x7f1bc89db400>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f1bc89db760>, 'write': <dependencyGraph.Statement object at 0x7f1bc89db8e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1bc8a1d610>, 'write': <dependencyGraph.Statement object at 0x7f1bc89db400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1bc89db760>, 'write': <dependencyGraph.Statement object at 0x7f1bc89db8e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1bc89db220>, <dependencyGraph.Codelet object at 0x7f1bc89db040>, <dependencyGraph.Codelet object at 0x7f1bc89dba60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1bc89db220>, <dependencyGraph.Codelet object at 0x7f1bc89dba60>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_pkt_0<p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp4 = !(p_pkt_0<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);', 'p__br_tmp4 = !(p_pkt_0<p_state_000);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p_pkt_0', 'p_state_000', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_pkt_0', 'p_state_000', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p__br_tmp4 = !(p_pkt_0<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 * recursive_merge: node ::  p__br_tmp4 = !(p_pkt_0<p_state_000);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_pkt_0<p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_pkt_0<p_state_000);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p__br_tmp4', 'p_state_000', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 --- cannot fold. too many stateless inputs:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp4 = !(p_pkt_0<p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp4 = !(p_pkt_0<p_state_000);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1bc89dbfa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
Stateless ALU id 2 has output p__br_tmp5
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f1bc8a11190>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f1bc89dbfa0>, 0), (<alus.DominoGenericSALU object at 0x7f1bc89dbfd0>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p__br_tmp4', 'p_state_000', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p__br_tmp4', 'p_state_000', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
Time taken: 1.6090660095214844 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp6 = !(p_pkt_0<p_state_000);

lhs p__br_tmp6 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f5efed52760>, 'write': <dependencyGraph.Statement object at 0x7f5efed528e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f5efed94610>, 'write': <dependencyGraph.Statement object at 0x7f5efed52400>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f5efed52760>, 'write': <dependencyGraph.Statement object at 0x7f5efed528e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f5efed94610>, 'write': <dependencyGraph.Statement object at 0x7f5efed52400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp6 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5efed52220>, <dependencyGraph.Codelet object at 0x7f5efed52040>, <dependencyGraph.Codelet object at 0x7f5efed52a60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp6 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5efed52220>, <dependencyGraph.Codelet object at 0x7f5efed52a60>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp6 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp6 = !(p_pkt_0<p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp6 = !(p_pkt_0<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);', 'p__br_tmp6 = !(p_pkt_0<p_state_000);', 'p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp7']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p_state_001', 'state_1', 'p_state_000', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p_state_000', 'p_pkt_0']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp7']
 node inputs:  ['p_state_001', 'p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp7'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp6', 'p_state_000', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp6', 'p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
     |  p__br_tmp6 = !(p_pkt_0<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp6', 'p_state_000', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
 * recursive_merge: node ::  p__br_tmp6 = !(p_pkt_0<p_state_000);
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = !(p_pkt_0<p_state_000);
     |  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp6', 'p_state_000', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = !(p_pkt_0<p_state_000);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0', 'p__br_tmp6']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p__br_tmp6', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001', 'p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 --- cannot fold. too many stateless inputs:  ['p_state_001', 'p_state_000', 'p_pkt_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp7'}
{'p__br_tmp7'}
u:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp6 = !(p_pkt_0<p_state_000);
u:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
u:  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
v:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp6 = !(p_pkt_0<p_state_000);
v:  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp7']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp7', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp7_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp7_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp7_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp7_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp7 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp7_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp7_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f5efed52fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
Stateless ALU id 2 has output p__br_tmp7
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f5efed87190>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f5efed52fa0>, 0), (<alus.DominoGenericSALU object at 0x7f5efed52fd0>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp7'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0', 'p__br_tmp6'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp7', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp7'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0', 'p__br_tmp6'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp7', 'immediate_operand': '2'}]}
Time taken: 1.5994009971618652 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f3a81f75610>, 'write': <dependencyGraph.Statement object at 0x7f3a81f33400>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f3a81f33760>, 'write': <dependencyGraph.Statement object at 0x7f3a81f338e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3a81f75610>, 'write': <dependencyGraph.Statement object at 0x7f3a81f33400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f3a81f33760>, 'write': <dependencyGraph.Statement object at 0x7f3a81f338e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3a81f33220>, <dependencyGraph.Codelet object at 0x7f3a81f33040>, <dependencyGraph.Codelet object at 0x7f3a81f33a60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3a81f33220>, <dependencyGraph.Codelet object at 0x7f3a81f33a60>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_pkt_0<p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp4 = !(p_pkt_0<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);', 'p__br_tmp4 = !(p_pkt_0<p_state_000);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_state_001', 'p_state_000', 'state_1', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p_state_000', 'p_pkt_0']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p__br_tmp4 = !(p_pkt_0<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 * recursive_merge: node ::  p__br_tmp4 = !(p_pkt_0<p_state_000);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_pkt_0<p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_pkt_0<p_state_000);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p__br_tmp4', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p__br_tmp4', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001', 'p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 --- cannot fold. too many stateless inputs:  ['p_state_001', 'p_state_000', 'p_pkt_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp4 = !(p_pkt_0<p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp4 = !(p_pkt_0<p_state_000);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3a81f33fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
Stateless ALU id 2 has output p__br_tmp5
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f3a81f68190>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f3a81f33fa0>, 0), (<alus.DominoGenericSALU object at 0x7f3a81f33fd0>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p__br_tmp4', 'state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp5', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p__br_tmp4', 'state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp5', 'immediate_operand': '31'}]}
Time taken: 1.7752556800842285 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f1894681760>, 'write': <dependencyGraph.Statement object at 0x7f18946818e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f18946c3610>, 'write': <dependencyGraph.Statement object at 0x7f1894681400>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1894681760>, 'write': <dependencyGraph.Statement object at 0x7f18946818e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f18946c3610>, 'write': <dependencyGraph.Statement object at 0x7f1894681400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1894681220>, <dependencyGraph.Codelet object at 0x7f1894681040>, <dependencyGraph.Codelet object at 0x7f1894681a60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1894681220>, <dependencyGraph.Codelet object at 0x7f1894681a60>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_pkt_0<p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp4 = !(p_pkt_0<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);', 'p__br_tmp4 = !(p_pkt_0<p_state_000);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_state_001', 'state_1', 'p_pkt_0', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p__br_tmp4 = !(p_pkt_0<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 * recursive_merge: node ::  p__br_tmp4 = !(p_pkt_0<p_state_000);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_pkt_0<p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_pkt_0<p_state_000);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p__br_tmp4', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p__br_tmp4', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001', 'p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 --- cannot fold. too many stateless inputs:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp4 = !(p_pkt_0<p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp4 = !(p_pkt_0<p_state_000);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1894681fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
Stateless ALU id 2 has output p__br_tmp5
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f18946b6190>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f1894681fa0>, 0), (<alus.DominoGenericSALU object at 0x7f1894681fd0>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp4', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp4', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 1.6840431690216064 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp8 = !(p_pkt_0<p_state_000);

lhs p__br_tmp8 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp8 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp9 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp9 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1d99522610>, 'write': <dependencyGraph.Statement object at 0x7f1d994e0400>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f1d994e0760>, 'write': <dependencyGraph.Statement object at 0x7f1d994e08e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1d99522610>, 'write': <dependencyGraph.Statement object at 0x7f1d994e0400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1d994e0760>, 'write': <dependencyGraph.Statement object at 0x7f1d994e08e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp8 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1d994e0070>, <dependencyGraph.Codelet object at 0x7f1d994e00a0>, <dependencyGraph.Codelet object at 0x7f1d994e0a60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp8 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1d994e0a60>, <dependencyGraph.Codelet object at 0x7f1d994e0070>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp8 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp8 = !(p_pkt_0<p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp8 = !(p_pkt_0<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);', 'p__br_tmp8 = !(p_pkt_0<p_state_000);', 'p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp9']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p_state_000', 'p_pkt_0', 'p_state_001', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp9']
 node inputs:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp9', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_pkt_0', 'p__br_tmp8', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
     |  p__br_tmp8 = !(p_pkt_0<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
 * recursive_merge: node ::  p__br_tmp8 = !(p_pkt_0<p_state_000);
 node outputs:  ['p__br_tmp8']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp8', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp8 = !(p_pkt_0<p_state_000);
     |  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp8 = !(p_pkt_0<p_state_000);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p__br_tmp8', 'p_state_000', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp8', 'p_state_000', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 --- cannot fold. too many stateless inputs:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp9'}
{'p__br_tmp9'}
u:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp8 = !(p_pkt_0<p_state_000);
u:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
u:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
v:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp8 = !(p_pkt_0<p_state_000);
v:  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp9']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp9', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp9_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp9_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp9_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp9_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp9 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp9_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp9_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1d994e0fd0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
Stateless ALU id 2 has output p__br_tmp9
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x2b729b7c
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 2
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  2.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
alu  1  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f1d99515190>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f1d994e0fa0>, 0), (<alus.DominoGenericSALU object at 0x7f1d994e0fd0>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  2  and  1
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 2), (2, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p__br_tmp8', 'p_state_000', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p__br_tmp9'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p__br_tmp9', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 2), (2, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p__br_tmp8', 'p_state_000', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p__br_tmp9'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p__br_tmp9', 'immediate_operand': '2'}]}
Time taken: 1.730170726776123 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<p_state_100;

lhs p__br_tmp5 rhs p_pkt_0<p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000', 'p_state_000']
p__br_tmp6 = !(p_pkt_0<p_state_100);

lhs p__br_tmp6 rhs !(p_pkt_0<p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = !(p_pkt_0<p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp5 = p_pkt_0<p_state_100;
RAW p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<p_state_100; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f07c23fe610>, 'write': <dependencyGraph.Statement object at 0x7f07c23bc730>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f07c23bc760>, 'write': <dependencyGraph.Statement object at 0x7f07c23bc8e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f07c23fe610>, 'write': <dependencyGraph.Statement object at 0x7f07c23bc730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f07c23bc760>, 'write': <dependencyGraph.Statement object at 0x7f07c23bc8e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p__br_tmp5 = p_pkt_0<p_state_100 stmts len 1
p__br_tmp5 = p_pkt_0<p_state_100;
SCC 2
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = !(p_pkt_0<p_state_100) stmts len 1
p__br_tmp6 = !(p_pkt_0<p_state_100);
v p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f07c23bc220>, <dependencyGraph.Codelet object at 0x7f07c23bc0d0>, <dependencyGraph.Codelet object at 0x7f07c23bc070>]
p_state_000 = state_0;
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp5 = p_pkt_0<p_state_100;
p_state_100 = state_1;
p__br_tmp6 = !(p_pkt_0<p_state_100);
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f07c23bc220>, <dependencyGraph.Codelet object at 0x7f07c23bc070>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp6 = !(p_pkt_0<p_state_100) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp6 = !(p_pkt_0<p_state_100) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp5 = p_pkt_0<p_state_100;', 'p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp5 = p_pkt_0<p_state_100;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_0', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp5 = p_pkt_0<p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = p_pkt_0<p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f07c23bc130>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp5', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp5 = p_pkt_0<p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp5 = p_pkt_0<p_state_100;
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_pkt_0', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'state_0', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = p_pkt_0<p_state_100;
     |  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_0', 'p_state_100']
redundant outputs ['p__br_tmp6', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp5 = p_pkt_0<p_state_100;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp5 = p_pkt_0<p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f07c23bc130>]
adj_inputs ['state_0', 'p__br_tmp5']
redundant outputs ['p__br_tmp6', 'p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp5 = p_pkt_0<p_state_100;
new component inputs:  ['state_1', 'p_pkt_0']
new component outputs:  ['p__br_tmp5', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p__br_tmp5 = p_pkt_0<p_state_100;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp5 = p_pkt_0<p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp5 = p_pkt_0<p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = p_pkt_0<p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f07c23bc130>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp5', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp5 = p_pkt_0<p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = p_pkt_0<p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp5 = p_pkt_0<p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp5']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_3_stateless_p__br_tmp5_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p__br_tmp5_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f07c23bc3d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p__br_tmp5
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f07c23f5100>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f07c23bc3d0>, 0), (<alus.DominoGenericSALU object at 0x7f07c23bcd60>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp5'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0'], 'outputs': ['state_1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp5'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0'], 'outputs': ['state_1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 7.063498258590698 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fa18f0da760>, 'write': <dependencyGraph.Statement object at 0x7fa18f0da8e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fa18f11d610>, 'write': <dependencyGraph.Statement object at 0x7fa18f0da400>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa18f0da760>, 'write': <dependencyGraph.Statement object at 0x7fa18f0da8e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa18f11d610>, 'write': <dependencyGraph.Statement object at 0x7fa18f0da400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa18f0da130>, <dependencyGraph.Codelet object at 0x7fa18f0da040>, <dependencyGraph.Codelet object at 0x7fa18f0daa60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa18f0da130>, <dependencyGraph.Codelet object at 0x7fa18f0daa60>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_pkt_0<p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp4 = !(p_pkt_0<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);', 'p__br_tmp4 = !(p_pkt_0<p_state_000);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p_state_000', 'p_pkt_0', 'state_1', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p__br_tmp4 = !(p_pkt_0<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 * recursive_merge: node ::  p__br_tmp4 = !(p_pkt_0<p_state_000);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_pkt_0<p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_pkt_0<p_state_000);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p__br_tmp4', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 --- cannot fold. too many stateless inputs:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp4 = !(p_pkt_0<p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp4 = !(p_pkt_0<p_state_000);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fa18f0dafa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
Stateless ALU id 2 has output p__br_tmp5
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fa18f110190>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fa18f0dafa0>, 0), (<alus.DominoGenericSALU object at 0x7fa18f0dafd0>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp4', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp4', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 1.7046973705291748 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = !(p_pkt_0<p_state_000);

lhs p__br_tmp2 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp3 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f58524a4610>, 'write': <dependencyGraph.Statement object at 0x7f5852462400>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f5852462760>, 'write': <dependencyGraph.Statement object at 0x7f58524628e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f58524a4610>, 'write': <dependencyGraph.Statement object at 0x7f5852462400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f5852462760>, 'write': <dependencyGraph.Statement object at 0x7f58524628e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp2 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5852462220>, <dependencyGraph.Codelet object at 0x7f5852462040>, <dependencyGraph.Codelet object at 0x7f5852462a60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp2 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5852462220>, <dependencyGraph.Codelet object at 0x7f5852462a60>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp2 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp2 = !(p_pkt_0<p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp2 = !(p_pkt_0<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);', 'p__br_tmp2 = !(p_pkt_0<p_state_000);', 'p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p_pkt_0', 'p_state_000', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp3']
 node inputs:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp2', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
     |  p__br_tmp2 = !(p_pkt_0<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp2', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
 * recursive_merge: node ::  p__br_tmp2 = !(p_pkt_0<p_state_000);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = !(p_pkt_0<p_state_000);
     |  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp2', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = !(p_pkt_0<p_state_000);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p__br_tmp2', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p__br_tmp2', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001', 'p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 --- cannot fold. too many stateless inputs:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp3'}
{'p__br_tmp3'}
u:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp2 = !(p_pkt_0<p_state_000);
u:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
u:  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
v:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp2 = !(p_pkt_0<p_state_000);
v:  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp3']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp3_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp3_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp3_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp3_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp3 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp3_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp3_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f5852462fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
Stateless ALU id 2 has output p__br_tmp3
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f5852497190>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f5852462fa0>, 0), (<alus.DominoGenericSALU object at 0x7f5852462fd0>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp3'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp2', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp3', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp3'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp2', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp3', 'immediate_operand': '1'}]}
Time taken: 2.642838954925537 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f01aea74760>, 'write': <dependencyGraph.Statement object at 0x7f01aea748e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f01aeab6610>, 'write': <dependencyGraph.Statement object at 0x7f01aea74400>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f01aea74760>, 'write': <dependencyGraph.Statement object at 0x7f01aea748e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f01aeab6610>, 'write': <dependencyGraph.Statement object at 0x7f01aea74400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f01aea74220>, <dependencyGraph.Codelet object at 0x7f01aea74040>, <dependencyGraph.Codelet object at 0x7f01aea74a60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f01aea74220>, <dependencyGraph.Codelet object at 0x7f01aea74a60>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_pkt_0<p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp4 = !(p_pkt_0<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);', 'p__br_tmp4 = !(p_pkt_0<p_state_000);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_pkt_0', 'p_state_000', 'p_state_001', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p__br_tmp4 = !(p_pkt_0<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
 * recursive_merge: node ::  p__br_tmp4 = !(p_pkt_0<p_state_000);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = !(p_pkt_0<p_state_000);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = !(p_pkt_0<p_state_000);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'p_state_001', 'p__br_tmp4', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000', 'p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 --- cannot fold. too many stateless inputs:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp4 = !(p_pkt_0<p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp4 = !(p_pkt_0<p_state_000);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f01aea74fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5'}
Stateless ALU id 2 has output p__br_tmp5
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f01aeaaa190>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f01aea74fa0>, 0), (<alus.DominoGenericSALU object at 0x7f01aea74fd0>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp4', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp4', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 1.7094647884368896 s
preprocessor time:
