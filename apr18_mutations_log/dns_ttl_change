running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_1. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fb71be8a7f0>, 'write': <dependencyGraph.Statement object at 0x7fb71be8a9a0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fb71be8abb0>, 'write': <dependencyGraph.Statement object at 0x7fb71be8a8b0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fb71becd5e0>, 'write': <dependencyGraph.Statement object at 0x7fb71be8a700>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fb71be8a7f0>, 'write': <dependencyGraph.Statement object at 0x7fb71be8a9a0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fb71be8abb0>, 'write': <dependencyGraph.Statement object at 0x7fb71be8a8b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fb71becd5e0>, 'write': <dependencyGraph.Statement object at 0x7fb71be8a700>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb71be8a0d0>, <dependencyGraph.Codelet object at 0x7fb71be8a280>, <dependencyGraph.Codelet object at 0x7fb71be8a340>, <dependencyGraph.Codelet object at 0x7fb71be8a1c0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb71be8a280>, <dependencyGraph.Codelet object at 0x7fb71be8a340>, <dependencyGraph.Codelet object at 0x7fb71be8a0d0>}
total number of nodes created:  4
state vars {'ttl_change', 'seen', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out
Stored read, write flank variables
{'p_last_ttl02', 'p_ttl_change02', 'p_seen01', 'p_ttl_change00', 'p_last_ttl00', 'p_seen00'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p__br_tmp6 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change02', 'p_ttl_change01', 'ttl_change', 'p_ttl_change00']
 node inputs:  ['p__br_tmp5', 'ttl_change', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['ttl_change', 'p__br_tmp6', 'p_last_ttl00', 'p_ttl', 'p_seen00']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p__br_tmp6', 'p_last_ttl00', 'p_ttl', 'p_seen00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_last_ttl00', 'p_ttl', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'ttl_change', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_last_ttl01', 'p_last_ttl02', 'p__br_tmp5']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p__br_tmp6', 'p_ttl', 'p_seen00']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p__br_tmp6', 'p_ttl', 'p_seen00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'p_ttl', 'last_ttl', 'p__br_tmp6', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'p_seen00']
redundant outputs ['p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['last_ttl', 'p_last_ttl00']
 node inputs:  ['p_seen00', 'p_ttl', 'last_ttl', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'p_ttl', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'p_ttl', 'last_ttl', 'p__br_tmp6', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0;
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'ttl_change', 'p__br_tmp6', 'p__br_tmp5', 'last_ttl', 'p_ttl', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'p_ttl', 'last_ttl', 'p__br_tmp6', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'p_seen00']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p_seen00', 'p__br_tmp6']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'last_ttl', 'p_last_ttl00', 'p_ttl', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fb71bec1040>]
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_last_ttl01', 'p_last_ttl02', 'p__br_tmp6', 'p__br_tmp5']
state_var ['last_ttl']
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
new component inputs:  ['p_seen00', 'p_ttl', 'last_ttl']
new component outputs:  ['last_ttl', 'p_last_ttl00']
new component state_pkt_fields:  ['p_last_ttl00', 'p_last_ttl02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'p_ttl', 'last_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp6', 'p_last_ttl00', 'p_ttl', 'p_seen00']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fb71bec1040>]
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_ttl_change02', 'p_ttl_change00', 'p_ttl_change01']
state_var ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['p__br_tmp5', 'p_seen00', 'ttl_change']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change02', 'p_ttl_change00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p__br_tmp5', 'p_seen00', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_last_ttl00', 'p_ttl', 'p_seen00']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp5', 'p_id0'}
{'p__br_tmp5', 'p_id0'}
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'p_ttl', 'last_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['p__br_tmp5', 'p_seen00', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_7_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_7_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_7_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_7_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00', 'p__br_tmp6']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00', 'p__br_tmp6']
 *** found stateful dependencies between  1  and  2
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fb71bec1730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fb71bec1730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fb71bec1730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fb71bec1730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
0,2,3,4,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
2,
+---> dependencies of ALU  7 : 

# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 0), (1, 2), (1, 3), (1, 4), (3, 6), (4, 6), (5, 6), (6, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 153 rows, 106 columns and 344 nonzeros
Model fingerprint: 0x138c0af0
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 5 rows and 28 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 349 nonzeros
Variable types: 0 continuous, 78 integer (69 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 4
T0_A_3 2
T0_A_4 1
T0_A_5 2
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  -0.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
stage:  -0.0
action:  7
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fb71bec1610>, 0), (<alus.DominoALU object at 0x7fb71bec19a0>, 1), (<alus.DominoALU object at 0x7fb71bec1a00>, 2), (<alus.DominoALU object at 0x7fb71bec1ac0>, 3), (<alus.DominoALU object at 0x7fb71bec1220>, 4)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fb71bec1880>, 0), (<alus.DominoGenericSALU object at 0x7fb71be8a970>, 1), (<alus.DominoGenericSALU object at 0x7fb71bec1730>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 5), (1, 0), (1, 2), (1, 3), (1, 4), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'p_ttl', 'last_ttl'], 'outputs': ['p_last_ttl01', 'p_last_ttl02', 'p__br_tmp6', 'p__br_tmp5', 'last_ttl', 'p_last_ttl00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_0) == 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 16;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['seen', 'p_seen00', 'p__br_tmp6'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p__br_tmp5', 'p_seen00', 'ttl_change'], 'outputs': ['ttl_change', 'p__br_tmp6', 'p_ttl_change02', 'p_ttl_change00', 'p_ttl_change01'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) > 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_1) == 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (2 - pkt_0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 5, 'opcode': 16, 'operand0': 'p_ttl', 'operand1': '1', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '30'}, {'id': 6, 'opcode': 6, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 5), (1, 0), (1, 2), (1, 3), (1, 4), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'p_ttl', 'last_ttl'], 'outputs': ['p_last_ttl01', 'p_last_ttl02', 'p__br_tmp6', 'p__br_tmp5', 'last_ttl', 'p_last_ttl00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_0) == 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 16;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['seen', 'p_seen00', 'p__br_tmp6'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p__br_tmp5', 'p_seen00', 'ttl_change'], 'outputs': ['ttl_change', 'p__br_tmp6', 'p_ttl_change02', 'p_ttl_change00', 'p_ttl_change01'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) > 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_1) == 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (2 - pkt_0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 5, 'opcode': 16, 'operand0': 'p_ttl', 'operand1': '1', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '30'}, {'id': 6, 'opcode': 6, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '10'}]}
Time taken: 10.182928085327148 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_2. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f18f2638bb0>, 'write': <dependencyGraph.Statement object at 0x7f18f26388b0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f18f267b5e0>, 'write': <dependencyGraph.Statement object at 0x7f18f2638700>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f18f26387f0>, 'write': <dependencyGraph.Statement object at 0x7f18f26389a0>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f18f2638bb0>, 'write': <dependencyGraph.Statement object at 0x7f18f26388b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f18f267b5e0>, 'write': <dependencyGraph.Statement object at 0x7f18f2638700>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f18f26387f0>, 'write': <dependencyGraph.Statement object at 0x7f18f26389a0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f18f26380d0>, <dependencyGraph.Codelet object at 0x7f18f2638280>, <dependencyGraph.Codelet object at 0x7f18f2638340>, <dependencyGraph.Codelet object at 0x7f18f26381c0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f18f2638280>, <dependencyGraph.Codelet object at 0x7f18f2638340>, <dependencyGraph.Codelet object at 0x7f18f26380d0>}
total number of nodes created:  4
state vars {'seen', 'last_ttl', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out
Stored read, write flank variables
{'p_last_ttl00', 'p_ttl_change00', 'p_last_ttl02', 'p_ttl_change02', 'p_seen01', 'p_seen00'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p__br_tmp6 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00']
 node inputs:  ['p__br_tmp5', 'p__br_tmp6', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['p_last_ttl00', 'ttl_change', 'p_ttl', 'p__br_tmp6', 'p_seen00']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_last_ttl00', 'p_ttl', 'p__br_tmp6', 'p_seen00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_last_ttl00', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p__br_tmp6', 'ttl_change'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs ['p__br_tmp5', 'p_last_ttl01', 'p_last_ttl02']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_ttl', 'p__br_tmp6', 'p_seen00']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_ttl', 'p__br_tmp6', 'p_seen00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'p_seen00', 'last_ttl', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'p_seen00']
redundant outputs ['p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['p__br_tmp6', 'p_seen00', 'last_ttl', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'p_seen00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'p_seen00', 'last_ttl', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0;
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'last_ttl', 'ttl_change', 'p_ttl', 'p__br_tmp5', 'p__br_tmp6', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'p_seen00', 'last_ttl', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'p__br_tmp6', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'last_ttl', 'p_ttl', 'p__br_tmp6', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f18f266f040>]
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs ['p__br_tmp5', 'p_last_ttl01', 'p_last_ttl02', 'p__br_tmp6']
state_var ['last_ttl']
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
new component inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
new component outputs:  ['p_last_ttl00', 'last_ttl']
new component state_pkt_fields:  ['p_last_ttl00', 'p_last_ttl02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_last_ttl00', 'p_ttl', 'p__br_tmp6', 'p_seen00']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f18f266f040>]
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change00', 'p__br_tmp6', 'p_ttl_change02']
state_var ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['p__br_tmp5', 'p_seen00', 'ttl_change']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change02', 'p_ttl_change00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p__br_tmp5', 'p_seen00', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_last_ttl00', 'p_ttl', 'p_seen00']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp5', 'p_id0'}
{'p__br_tmp5', 'p_id0'}
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['p__br_tmp5', 'p_seen00', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_7_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_7_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_7_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_7_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp6', 'seen']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp6', 'seen']
 *** found stateful dependencies between  1  and  2
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f18f266f730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f18f266f730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f18f266f730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f18f266f730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
0,2,3,5,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
2,
+---> dependencies of ALU  7 : 

# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 0), (1, 2), (1, 3), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 152 rows, 106 columns and 342 nonzeros
Model fingerprint: 0x0eeb3537
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 26 columns
Presolve time: 0.01s
Presolved: 151 rows, 80 columns, 357 nonzeros
Variable types: 0 continuous, 80 integer (71 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 4
T0_A_3 2
T0_A_4 -0
T0_A_5 1
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  -0.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
stage:  -0.0
action:  7
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f18f266f610>, 0), (<alus.DominoALU object at 0x7f18f266f9a0>, 1), (<alus.DominoALU object at 0x7f18f266fa00>, 2), (<alus.DominoALU object at 0x7f18f266fac0>, 3), (<alus.DominoALU object at 0x7f18f266f220>, 4)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f18f266f880>, 0), (<alus.DominoGenericSALU object at 0x7f18f2638970>, 1), (<alus.DominoGenericSALU object at 0x7f18f266f730>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (1, 0), (1, 2), (1, 3), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'last_ttl', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl', 'p__br_tmp5', 'p_last_ttl01', 'p_last_ttl02', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - 0) > 31)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp6', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 12;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 4)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 47;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p__br_tmp5', 'p_seen00', 'ttl_change'], 'outputs': ['ttl_change', 'p_ttl_change01', 'p_ttl_change00', 'p__br_tmp6', 'p_ttl_change02'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) > 31)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) < 4)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 2);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 15, 'operand0': '1', 'operand1': 'p_ttl', 'operand2': 'p_ttl', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_ttl', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 6, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (1, 0), (1, 2), (1, 3), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'last_ttl', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl', 'p__br_tmp5', 'p_last_ttl01', 'p_last_ttl02', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - 0) > 31)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp6', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 12;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 4)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 47;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p__br_tmp5', 'p_seen00', 'ttl_change'], 'outputs': ['ttl_change', 'p_ttl_change01', 'p_ttl_change00', 'p__br_tmp6', 'p_ttl_change02'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) > 31)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) < 4)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 2);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 15, 'operand0': '1', 'operand1': 'p_ttl', 'operand2': 'p_ttl', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_ttl', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 6, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}]}
Time taken: 6.3765692710876465 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_3. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp7 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp8 = p_seen00==0;

lhs p__br_tmp8 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp8 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp8 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_seen00']
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp8 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp8 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
RAW p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
RAW p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
RAW p__br_tmp8 = p_seen00==0; p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp8 = p_seen00==0; p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f053fe687f0>, 'write': <dependencyGraph.Statement object at 0x7f053fe689a0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f053feab5e0>, 'write': <dependencyGraph.Statement object at 0x7f053fe68700>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f053fe68bb0>, 'write': <dependencyGraph.Statement object at 0x7f053fe688b0>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f053fe687f0>, 'write': <dependencyGraph.Statement object at 0x7f053fe689a0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f053feab5e0>, 'write': <dependencyGraph.Statement object at 0x7f053fe68700>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f053fe68bb0>, 'write': <dependencyGraph.Statement object at 0x7f053fe688b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp8 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp8 = p_seen00==0;
v p_seen01 = p__br_tmp8 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f053fe680d0>, <dependencyGraph.Codelet object at 0x7f053fe68280>, <dependencyGraph.Codelet object at 0x7f053fe68340>, <dependencyGraph.Codelet object at 0x7f053fe681c0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp8 = p_seen00==0;
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f053fe68280>, <dependencyGraph.Codelet object at 0x7f053fe68340>, <dependencyGraph.Codelet object at 0x7f053fe680d0>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp8', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp7', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p_seen00', 'p__br_tmp8'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp8 = p_seen00==0
2   p_seen01 = p__br_tmp8 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp8 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp8', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out
Stored read, write flank variables
{'p_last_ttl00', 'p_ttl_change02', 'p_seen00', 'p_ttl_change00', 'p_last_ttl02', 'p_seen01'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p__br_tmp8 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change00', 'p_ttl_change01', 'p_ttl_change02', 'ttl_change']
 node inputs:  ['p__br_tmp7', 'p__br_tmp8', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change01', 'p_ttl_change02']
state_var ['ttl_change']
     | merged inputs:  ['p_last_ttl00', 'ttl_change', 'p_ttl', 'p_seen00', 'p__br_tmp8']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_last_ttl00', 'p_ttl', 'p_seen00', 'p__br_tmp8']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp8 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp7']
 node inputs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp7', 'p__br_tmp8', 'ttl_change'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p__br_tmp7', 'p_last_ttl02', 'p_last_ttl01']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_ttl', 'p_seen00', 'p__br_tmp8']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_ttl', 'p_seen00', 'p__br_tmp8']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'p__br_tmp8', 'last_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['p_seen00', 'p__br_tmp8', 'last_ttl', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_last_ttl00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'p__br_tmp8', 'last_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp8 = p_seen00==0;
redundant outputs []
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p__br_tmp8 = p_seen00==0;
 node outputs:  ['p__br_tmp8']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp7', 'last_ttl', 'p_ttl', 'ttl_change', 'p_seen00', 'p__br_tmp8'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp8 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'p__br_tmp8', 'last_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp8 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'p__br_tmp8', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'last_ttl', 'p_ttl', 'p_seen00', 'p__br_tmp8'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp8 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp8 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp8 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f053fe9f040>]
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p__br_tmp7', 'p_last_ttl02', 'p__br_tmp8', 'p_last_ttl01']
state_var ['last_ttl']
resultant component: 
p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
new component inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
new component outputs:  ['p_last_ttl00', 'last_ttl']
new component state_pkt_fields:  ['p_last_ttl02', 'p_last_ttl00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_last_ttl00', 'p_ttl', 'p_seen00', 'p__br_tmp8']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp8 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp8 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp8 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f053fe9f040>]
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00', 'p__br_tmp8']
state_var ['ttl_change']
resultant component: 
p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['p_seen00', 'p__br_tmp7', 'ttl_change']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change00', 'p_ttl_change02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'p__br_tmp7', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp7', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_last_ttl00', 'p_ttl', 'p_seen00']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp7', 'p_id0'}
{'p__br_tmp7', 'p_id0'}
u:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp8 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'p__br_tmp7', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp7', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp7 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_7_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_7_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_7_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_7_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp8', 'seen']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp8', 'seen']
 *** found stateful dependencies between  1  and  2
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f053fe9f730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f053fe9f730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f053fe9f730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f053fe9f730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp7
 *** found dependency between stateless ALU  6  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
0,2,3,4,5,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
2,
+---> dependencies of ALU  7 : 

# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 0), (1, 2), (1, 3), (1, 4), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 153 rows, 106 columns and 344 nonzeros
Model fingerprint: 0x6795e3f9
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 27 columns
Presolve time: 0.01s
Presolved: 150 rows, 79 columns, 354 nonzeros
Variable types: 0 continuous, 79 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 4
T0_A_3 2
T0_A_4 1
T0_A_5 1
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  -0.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
stage:  -0.0
action:  7
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f053fe9f610>, 0), (<alus.DominoALU object at 0x7f053fe9f9a0>, 1), (<alus.DominoALU object at 0x7f053fe9fa00>, 2), (<alus.DominoALU object at 0x7f053fe9fac0>, 3), (<alus.DominoALU object at 0x7f053fe9f220>, 4)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f053fe9f880>, 0), (<alus.DominoGenericSALU object at 0x7f053fe68970>, 1), (<alus.DominoGenericSALU object at 0x7f053fe9f730>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (1, 0), (1, 2), (1, 3), (1, 4), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'last_ttl', 'p_ttl'], 'outputs': ['p__br_tmp7', 'p_last_ttl00', 'last_ttl', 'p_last_ttl02', 'p__br_tmp8', 'p_last_ttl01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) > 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 8)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 4;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (4 + pkt_0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp8', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p_seen00', 'p__br_tmp7', 'ttl_change'], 'outputs': ['p_ttl_change01', 'ttl_change', 'p_ttl_change02', 'p_ttl_change00', 'p__br_tmp8'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) < 1)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - 0) == 2)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 2);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - 0) > 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + -3;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '29'}, {'id': 4, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 15, 'operand0': '1', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 6, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp7', 'immediate_operand': '1'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (1, 0), (1, 2), (1, 3), (1, 4), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'last_ttl', 'p_ttl'], 'outputs': ['p__br_tmp7', 'p_last_ttl00', 'last_ttl', 'p_last_ttl02', 'p__br_tmp8', 'p_last_ttl01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) > 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 8)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 4;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (4 + pkt_0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp8', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p_seen00', 'p__br_tmp7', 'ttl_change'], 'outputs': ['p_ttl_change01', 'ttl_change', 'p_ttl_change02', 'p_ttl_change00', 'p__br_tmp8'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) < 1)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - 0) == 2)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 2);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - 0) > 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + -3;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '29'}, {'id': 4, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 15, 'operand0': '1', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 6, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp7', 'immediate_operand': '1'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
Time taken: 6.040859699249268 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_4. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f357fedc7f0>, 'write': <dependencyGraph.Statement object at 0x7f357fedc9a0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f357ff1f5e0>, 'write': <dependencyGraph.Statement object at 0x7f357fedc700>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f357fedcbb0>, 'write': <dependencyGraph.Statement object at 0x7f357fedc8b0>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f357fedc7f0>, 'write': <dependencyGraph.Statement object at 0x7f357fedc9a0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f357ff1f5e0>, 'write': <dependencyGraph.Statement object at 0x7f357fedc700>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f357fedcbb0>, 'write': <dependencyGraph.Statement object at 0x7f357fedc8b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f357fedc0d0>, <dependencyGraph.Codelet object at 0x7f357fedc280>, <dependencyGraph.Codelet object at 0x7f357fedc340>, <dependencyGraph.Codelet object at 0x7f357fedc1c0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f357fedc280>, <dependencyGraph.Codelet object at 0x7f357fedc340>, <dependencyGraph.Codelet object at 0x7f357fedc0d0>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out
Stored read, write flank variables
{'p_seen00', 'p_ttl_change02', 'p_ttl_change00', 'p_last_ttl00', 'p_last_ttl02', 'p_seen01'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p__br_tmp6 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00', 'ttl_change']
 node inputs:  ['p__br_tmp5', 'p__br_tmp6', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'p__br_tmp6', 'p_last_ttl00', 'ttl_change', 'p_ttl']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp6', 'p_last_ttl00', 'p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p__br_tmp6', 'ttl_change'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p_last_ttl01', 'p__br_tmp5', 'p_last_ttl02']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p__br_tmp6', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp6', 'p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'last_ttl', 'p__br_tmp6', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['p_seen00', 'last_ttl', 'p__br_tmp6', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_last_ttl00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'last_ttl', 'p__br_tmp6', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0;
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p__br_tmp5', 'p__br_tmp6', 'ttl_change', 'p_ttl', 'last_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'last_ttl', 'p__br_tmp6', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'p__br_tmp6', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p__br_tmp6', 'p_last_ttl00', 'p_ttl', 'last_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f357ff13040>]
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p_last_ttl01', 'p__br_tmp5', 'p__br_tmp6', 'p_last_ttl02']
state_var ['last_ttl']
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
new component inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
new component outputs:  ['p_last_ttl00', 'last_ttl']
new component state_pkt_fields:  ['p_last_ttl00', 'p_last_ttl02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_seen00', 'p__br_tmp6', 'p_last_ttl00', 'p_ttl']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f357ff13040>]
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_ttl_change02', 'p_ttl_change00', 'p_ttl_change01']
state_var ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['p_seen00', 'p__br_tmp5', 'ttl_change']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change02', 'p_ttl_change00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'p__br_tmp5', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp5', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0', 'p__br_tmp5'}
{'p_id0', 'p__br_tmp5'}
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'p__br_tmp5', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp5', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_7_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_7_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_7_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_7_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp6', 'seen']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp6', 'seen']
 *** found stateful dependencies between  1  and  2
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f357ff13730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 4 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f357ff13730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 5 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f357ff13730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 6 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f357ff13730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 7 has output p__br_tmp5
 *** found dependency between stateless ALU  7  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,6,
+---> dependencies of ALU  1 : 
0,2,4,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 
2,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 6), (1, 0), (1, 2), (1, 4), (4, 7), (5, 7), (6, 7), (7, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 152 rows, 106 columns and 342 nonzeros
Model fingerprint: 0x676dc6fb
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 27 columns
Presolve time: 0.01s
Presolved: 149 rows, 79 columns, 352 nonzeros
Variable types: 0 continuous, 79 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 4
T0_A_3 -0
T0_A_4 2
T0_A_5 -0
T0_A_6 2
T0_A_7 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  -0.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  2.0
action:  6
num stages:  5
stage:  3.0
action:  7
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f357ff13760>, 0), (<alus.DominoALU object at 0x7f357ff13af0>, 1), (<alus.DominoALU object at 0x7f357ff13790>, 2), (<alus.DominoALU object at 0x7f357ff13820>, 3), (<alus.DominoALU object at 0x7f357ff13b80>, 4)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f357ff13880>, 0), (<alus.DominoGenericSALU object at 0x7f357fedc970>, 1), (<alus.DominoGenericSALU object at 0x7f357ff13730>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  2
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (0, 6), (1, 0), (1, 2), (1, 4), (4, 7), (5, 7), (6, 7), (7, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'last_ttl', 'p_ttl'], 'outputs': ['p_last_ttl01', 'p__br_tmp5', 'p__br_tmp6', 'p_last_ttl00', 'p_last_ttl02', 'last_ttl'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) != 30)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 8;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp6', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p_seen00', 'p__br_tmp5', 'ttl_change'], 'outputs': ['p__br_tmp6', 'p_ttl_change02', 'p_ttl_change00', 'ttl_change', 'p_ttl_change01'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 2)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) < 4)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - 0) != 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}, {'id': 4, 'opcode': 23, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 5, 'opcode': 5, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 6, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (0, 6), (1, 0), (1, 2), (1, 4), (4, 7), (5, 7), (6, 7), (7, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'last_ttl', 'p_ttl'], 'outputs': ['p_last_ttl01', 'p__br_tmp5', 'p__br_tmp6', 'p_last_ttl00', 'p_last_ttl02', 'last_ttl'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) != 30)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 8;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp6', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p_seen00', 'p__br_tmp5', 'ttl_change'], 'outputs': ['p__br_tmp6', 'p_ttl_change02', 'p_ttl_change00', 'ttl_change', 'p_ttl_change01'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 2)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) < 4)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - 0) != 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}, {'id': 4, 'opcode': 23, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 5, 'opcode': 5, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 6, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 15.143336296081543 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_5. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7fa7072b6bb0>, 'write': <dependencyGraph.Statement object at 0x7fa7072b68b0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fa7072b67f0>, 'write': <dependencyGraph.Statement object at 0x7fa7072b69a0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fa7072f95e0>, 'write': <dependencyGraph.Statement object at 0x7fa7072b6700>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fa7072b6bb0>, 'write': <dependencyGraph.Statement object at 0x7fa7072b68b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fa7072b67f0>, 'write': <dependencyGraph.Statement object at 0x7fa7072b69a0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fa7072f95e0>, 'write': <dependencyGraph.Statement object at 0x7fa7072b6700>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa7072b60d0>, <dependencyGraph.Codelet object at 0x7fa7072b6280>, <dependencyGraph.Codelet object at 0x7fa7072b6340>, <dependencyGraph.Codelet object at 0x7fa7072b61c0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa7072b6280>, <dependencyGraph.Codelet object at 0x7fa7072b6340>, <dependencyGraph.Codelet object at 0x7fa7072b60d0>}
total number of nodes created:  4
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out
Stored read, write flank variables
{'p_seen01', 'p_ttl_change02', 'p_seen00', 'p_last_ttl02', 'p_last_ttl00', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p__br_tmp6 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change02', 'ttl_change', 'p_ttl_change01', 'p_ttl_change00']
 node inputs:  ['p__br_tmp6', 'ttl_change', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['ttl_change', 'p_seen00', 'p_last_ttl00', 'p__br_tmp6', 'p_ttl']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p_last_ttl00', 'p__br_tmp6', 'p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_last_ttl00', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'ttl_change', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs ['p__br_tmp5', 'p_last_ttl02', 'p_last_ttl01']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p__br_tmp6', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp6', 'p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'last_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'p_seen00']
redundant outputs ['p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['p__br_tmp6', 'last_ttl', 'p_ttl', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'p_seen00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'last_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0;
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'ttl_change', 'p_seen00', 'p__br_tmp5', 'last_ttl', 'p__br_tmp6', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'last_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'p__br_tmp6', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_last_ttl00', 'last_ttl', 'p__br_tmp6', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fa7072ed040>]
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs ['p__br_tmp5', 'p_last_ttl02', 'p_last_ttl01', 'p__br_tmp6']
state_var ['last_ttl']
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
new component inputs:  ['last_ttl', 'p_ttl', 'p_seen00']
new component outputs:  ['p_last_ttl00', 'last_ttl']
new component state_pkt_fields:  ['p_last_ttl00', 'p_last_ttl02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_ttl', 'p_seen00']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 'p_seen00', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_seen00', 'p_last_ttl00', 'p__br_tmp6', 'p_ttl']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fa7072ed040>]
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p__br_tmp6', 'p_ttl_change00']
state_var ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp5']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change02', 'p_ttl_change00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp5']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp5', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp5', 'p_id0'}
{'p__br_tmp5', 'p_id0'}
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_ttl', 'p_seen00']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 'p_seen00', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp5']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp5', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_7_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_7_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_7_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_7_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp6', 'seen']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp6', 'seen']
 *** found stateful dependencies between  1  and  2
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fa7072ed730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fa7072ed730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fa7072ed730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fa7072ed730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 
0,2,3,4,5,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
2,
+---> dependencies of ALU  7 : 

# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (1, 0), (1, 2), (1, 3), (1, 4), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 155 rows, 106 columns and 348 nonzeros
Model fingerprint: 0x43737437
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 7 rows and 29 columns
Presolve time: 0.01s
Presolved: 148 rows, 77 columns, 348 nonzeros
Variable types: 0 continuous, 77 integer (68 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 4 8 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 4
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  -0.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
stage:  -0.0
action:  7
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fa7072ed610>, 0), (<alus.DominoALU object at 0x7fa7072ed9a0>, 1), (<alus.DominoALU object at 0x7fa7072eda00>, 2), (<alus.DominoALU object at 0x7fa7072edac0>, 3), (<alus.DominoALU object at 0x7fa7072ed220>, 4)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fa7072ed880>, 0), (<alus.DominoGenericSALU object at 0x7fa7072b6970>, 1), (<alus.DominoGenericSALU object at 0x7fa7072ed730>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 0), (1, 2), (1, 3), (1, 4), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['last_ttl', 'p_ttl', 'p_seen00'], 'outputs': ['p__br_tmp5', 'p_last_ttl02', 'p_last_ttl00', 'p_last_ttl01', 'last_ttl', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_1) > 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp6', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p_seen00', 'p__br_tmp5'], 'outputs': ['ttl_change', 'p_ttl_change02', 'p_ttl_change01', 'p__br_tmp6', 'p_ttl_change00'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) < 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 2);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) == 2)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 55;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_last_ttl00', 'operand1': 'p_seen00', 'operand2': 'p_ttl', 'result': '_out_s12_0', 'immediate_operand': '29'}, {'id': 5, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '31'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 0), (1, 2), (1, 3), (1, 4), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['last_ttl', 'p_ttl', 'p_seen00'], 'outputs': ['p__br_tmp5', 'p_last_ttl02', 'p_last_ttl00', 'p_last_ttl01', 'last_ttl', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_1) > 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp6', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p_seen00', 'p__br_tmp5'], 'outputs': ['ttl_change', 'p_ttl_change02', 'p_ttl_change01', 'p__br_tmp6', 'p_ttl_change00'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) < 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 2);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) == 2)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 55;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_last_ttl00', 'operand1': 'p_seen00', 'operand2': 'p_ttl', 'result': '_out_s12_0', 'immediate_operand': '29'}, {'id': 5, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '31'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
Time taken: 7.966315984725952 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_6. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp9 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp11 = p_seen00==0;

lhs p__br_tmp11 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp11 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp11 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_seen00']
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp11 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp11 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
RAW p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
RAW p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
RAW p__br_tmp11 = p_seen00==0; p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp11 = p_seen00==0; p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f273d5167f0>, 'write': <dependencyGraph.Statement object at 0x7f273d5169a0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f273d5595e0>, 'write': <dependencyGraph.Statement object at 0x7f273d516700>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f273d516bb0>, 'write': <dependencyGraph.Statement object at 0x7f273d5168b0>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f273d5167f0>, 'write': <dependencyGraph.Statement object at 0x7f273d5169a0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f273d5595e0>, 'write': <dependencyGraph.Statement object at 0x7f273d516700>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f273d516bb0>, 'write': <dependencyGraph.Statement object at 0x7f273d5168b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp11 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp11 = p_seen00==0;
v p_seen01 = p__br_tmp11 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f273d5160d0>, <dependencyGraph.Codelet object at 0x7f273d516280>, <dependencyGraph.Codelet object at 0x7f273d516340>, <dependencyGraph.Codelet object at 0x7f273d5161c0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp11 = p_seen00==0;
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f273d516280>, <dependencyGraph.Codelet object at 0x7f273d516340>, <dependencyGraph.Codelet object at 0x7f273d5160d0>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp9'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp9', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp11', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p_seen00', 'p__br_tmp11'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp11 = p_seen00==0
2   p_seen01 = p__br_tmp11 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp11 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp11', 'p_seen00']
 state vars:  ['seen']
p__br_tmp11  not in state vars
 statement:  p__br_tmp11 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out
Stored read, write flank variables
{'p_last_ttl00', 'p_ttl_change00', 'p_seen00', 'p_seen01', 'p_last_ttl02', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p__br_tmp11 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
 node inputs:  ['ttl_change', 'p__br_tmp11', 'p__br_tmp9']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['ttl_change', 'p_last_ttl00', 'p__br_tmp11', 'p_seen00', 'p_ttl']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_last_ttl00', 'p__br_tmp11', 'p_seen00', 'p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp11 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp9']
 node inputs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'ttl_change', 'p__br_tmp9', 'p__br_tmp11'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p_last_ttl01', 'p__br_tmp9', 'p_last_ttl02']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p__br_tmp11', 'p_seen00', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p__br_tmp11', 'p_seen00', 'p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'p__br_tmp11', 'last_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['p_seen00', 'p__br_tmp11', 'last_ttl', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_last_ttl00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'p__br_tmp11', 'last_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp11 = p_seen00==0;
redundant outputs []
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p__br_tmp11 = p_seen00==0;
 node outputs:  ['p__br_tmp11']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'ttl_change', 'p__br_tmp11', 'p_seen00', 'last_ttl', 'p__br_tmp9', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp11 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p_seen00', 'p__br_tmp11', 'last_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp11 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'p__br_tmp11', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'p__br_tmp11', 'p_seen00', 'last_ttl', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp11 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp11 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp11 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f273d54d040>]
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p_last_ttl01', 'p__br_tmp11', 'p__br_tmp9', 'p_last_ttl02']
state_var ['last_ttl']
resultant component: 
p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
new component inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
new component outputs:  ['p_last_ttl00', 'last_ttl']
new component state_pkt_fields:  ['p_last_ttl02', 'p_last_ttl00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_last_ttl00', 'p__br_tmp11', 'p_seen00', 'p_ttl']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp11 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp11 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp11 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f273d54d040>]
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change00', 'p__br_tmp11', 'p_ttl_change02']
state_var ['ttl_change']
resultant component: 
p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp9']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change00', 'p_ttl_change02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp9']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp9', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_last_ttl00', 'p_seen00', 'p_ttl']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp9', 'p_id0'}
{'p__br_tmp9', 'p_id0'}
u:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp11 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'last_ttl', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp9']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp9', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp9 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_7_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_7_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_7_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_7_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp11', 'seen']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp11', 'seen']
 *** found stateful dependencies between  1  and  2
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f273d54d730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f273d54d730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f273d54d730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f273d54d730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp9
 *** found dependency between stateless ALU  6  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
0,2,3,4,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
2,
+---> dependencies of ALU  7 : 

# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 0), (1, 2), (1, 3), (1, 4), (3, 6), (4, 6), (5, 6), (6, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 153 rows, 106 columns and 344 nonzeros
Model fingerprint: 0x138c0af0
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 5 rows and 28 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 349 nonzeros
Variable types: 0 continuous, 78 integer (69 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 4
T0_A_3 2
T0_A_4 1
T0_A_5 2
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  -0.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
stage:  -0.0
action:  7
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f273d54d6a0>, 0), (<alus.DominoALU object at 0x7f273d54d9a0>, 1), (<alus.DominoALU object at 0x7f273d54da00>, 2), (<alus.DominoALU object at 0x7f273d54dac0>, 3), (<alus.DominoALU object at 0x7f273d54d6d0>, 4)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f273d54d880>, 0), (<alus.DominoGenericSALU object at 0x7f273d516970>, 1), (<alus.DominoGenericSALU object at 0x7f273d54d730>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 5), (1, 0), (1, 2), (1, 3), (1, 4), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'last_ttl', 'p_ttl'], 'outputs': ['p_last_ttl00', 'p_last_ttl01', 'p__br_tmp11', 'p__br_tmp9', 'last_ttl', 'p_last_ttl02'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - pkt_0) != 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_1) != 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = -15;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_0) < 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp11', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p_seen00', 'p__br_tmp9'], 'outputs': ['ttl_change', 'p_ttl_change01', 'p_ttl_change00', 'p__br_tmp11', 'p_ttl_change02'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) < 31)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - 0) < 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) > 2)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 7;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 4, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 5, 'opcode': 15, 'operand0': 'p_ttl', 'operand1': 'p_ttl', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 6, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp9', 'immediate_operand': '8'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 5), (1, 0), (1, 2), (1, 3), (1, 4), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_seen00', 'last_ttl', 'p_ttl'], 'outputs': ['p_last_ttl00', 'p_last_ttl01', 'p__br_tmp11', 'p__br_tmp9', 'last_ttl', 'p_last_ttl02'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - pkt_0) != 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_1) != 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = -15;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_0) < 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp11', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p_seen00', 'p__br_tmp9'], 'outputs': ['ttl_change', 'p_ttl_change01', 'p_ttl_change00', 'p__br_tmp11', 'p_ttl_change02'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) < 31)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - 0) < 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) > 2)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 7;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 4, 'opcode': 15, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 5, 'opcode': 15, 'operand0': 'p_ttl', 'operand1': 'p_ttl', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 6, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp9', 'immediate_operand': '8'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}]}
Time taken: 6.186718940734863 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_7. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp6 ? (0) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change00']
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);

lhs p__br_tmp7 rhs (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_seen01', 'p_last_ttl01', 'p_ttl']
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl_change01', 'p_ttl_change01']
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
finding dependencies
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p_seen00 = seen; p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
RAW p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
RAW p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f9670474bb0>, 'write': <dependencyGraph.Statement object at 0x7f96704748b0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f96704747f0>, 'write': <dependencyGraph.Statement object at 0x7f96704749a0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f96704b75e0>, 'write': <dependencyGraph.Statement object at 0x7f9670474c40>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f9670474bb0>, 'write': <dependencyGraph.Statement object at 0x7f96704748b0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f96704747f0>, 'write': <dependencyGraph.Statement object at 0x7f96704749a0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f96704b75e0>, 'write': <dependencyGraph.Statement object at 0x7f9670474c40>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
v p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
v p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9670474220>, <dependencyGraph.Codelet object at 0x7f96704743a0>, <dependencyGraph.Codelet object at 0x7f9670474400>, <dependencyGraph.Codelet object at 0x7f9670474280>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9670474400>, <dependencyGraph.Codelet object at 0x7f9670474220>, <dependencyGraph.Codelet object at 0x7f96704743a0>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
2   p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
3   p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_seen01', 'p_last_ttl01', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp7', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p_seen00', 'p__br_tmp6', 'p_seen01'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  6
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  6
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out
Stored read, write flank variables
{'p_ttl_change00', 'p_last_ttl02', 'p_last_ttl00', 'p_seen00', 'p_seen01', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);', 'p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);', 'p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_seen01 = p__br_tmp6 ? (1) : (p_seen00);', 'p__br_tmp6 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
 node inputs:  ['p__br_tmp7', 'p__br_tmp6', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['p__br_tmp6', 'ttl_change', 'p_ttl', 'p_last_ttl01', 'p_seen00', 'p_seen01']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01', 'p_seen00', 'p_seen01']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
 node outputs:  ['p__br_tmp7']
 node inputs:  ['p_seen00', 'p_ttl', 'p_last_ttl01', 'p_seen01']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp7', 'p__br_tmp6', 'ttl_change'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
     |  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'p_ttl', 'last_ttl', 'p_seen00', 'p_seen01', 'p_seen00', 'p_ttl', 'p_last_ttl01', 'p_seen01', 'p_seen00', 'p_seen00', 'p__br_tmp6']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
     |  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
 * recursive_merge: node ::  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
 node outputs:  ['p_last_ttl01']
 node inputs:  ['p__br_tmp6', 'p_last_ttl00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'p_last_ttl01', 'p_seen01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl01']
  - recursive_merge: looking at preds of  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
     |  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p__br_tmp6', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p__br_tmp7', 'p_last_ttl02', 'p_last_ttl01']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p__br_tmp6', 'p_ttl', 'p_seen00', 'p_seen01']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p__br_tmp6', 'p_ttl', 'p_seen00', 'p_seen01']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['p__br_tmp6', 'p_ttl', 'last_ttl', 'p_seen00', 'p_seen01']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_last_ttl00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'p_ttl', 'last_ttl', 'p_seen00', 'p_seen01', 'p_seen00', 'p_ttl', 'p_last_ttl01', 'p_seen01', 'p_seen00', 'p_seen00', 'p__br_tmp6']
redundant outputs []
state_var ['seen']
adj_inputs ['p__br_tmp6', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs ['p__br_tmp6', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
redundant outputs []
adj_inputs ['p__br_tmp6', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
 node outputs:  ['p_seen01']
 node inputs:  ['p_seen00', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_ttl', 'last_ttl', 'p_last_ttl01', 'p_seen00', 'p_seen01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen01']
  - recursive_merge: looking at preds of  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'p_ttl', 'last_ttl', 'p_seen00', 'p_seen01', 'p_seen00', 'p_ttl', 'p_last_ttl01', 'p_seen01', 'p_seen00', 'p_seen00', 'p__br_tmp6']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0;
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp7', 'p__br_tmp6', 'ttl_change', 'p_ttl', 'last_ttl', 'p_last_ttl00', 'p_seen00', 'p_seen01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp6', 'p_ttl', 'last_ttl', 'p_seen00', 'p_seen01', 'p_seen00', 'p_ttl', 'p_last_ttl01', 'p_seen01', 'p_seen00', 'p_seen00', 'p__br_tmp6']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'p__br_tmp6', 'p_seen01', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_ttl', 'last_ttl', 'p_last_ttl01', 'p_seen00', 'p_seen01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00', 'p_seen01']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01', 'p_seen00', 'p_seen01']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f96704ab0a0>]
adj_inputs []
redundant outputs ['p_ttl_change00', 'p__br_tmp6', 'p_ttl_change01', 'p_ttl_change02']
state_var ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['p_seen00', 'p__br_tmp7', 'ttl_change']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change00', 'p_ttl_change02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'p__br_tmp7', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp7', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
 --- cannot fold. too many stateless inputs:  ['p_ttl', 'p_seen00', 'p_seen01']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_ttl', 'p_last_ttl01', 'p_seen00', 'p_seen01']
trying to fold node:  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
 --- cannot fold. too many stateless inputs:  ['p_ttl', 'p_seen00', 'p_seen01']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_seen01', 'p__br_tmp7', 'p__br_tmp6', 'p_id0'}
{'p_seen01', 'p__br_tmp7', 'p__br_tmp6', 'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0;
v:  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp6 = p_seen00==0;
v:  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
u:  p__br_tmp6 = p_seen00==0;
v:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
u:  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
u:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v:  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
u:  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
v:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'p__br_tmp7', 'ttl_change']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp7', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
Error: stateful update does not fit in the stateful ALU.
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_8. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7fd495fb1bb0>, 'write': <dependencyGraph.Statement object at 0x7fd495fb18b0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fd495ff45e0>, 'write': <dependencyGraph.Statement object at 0x7fd495fb1700>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fd495fb17f0>, 'write': <dependencyGraph.Statement object at 0x7fd495fb19a0>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fd495fb1bb0>, 'write': <dependencyGraph.Statement object at 0x7fd495fb18b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fd495ff45e0>, 'write': <dependencyGraph.Statement object at 0x7fd495fb1700>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fd495fb17f0>, 'write': <dependencyGraph.Statement object at 0x7fd495fb19a0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd495fb10d0>, <dependencyGraph.Codelet object at 0x7fd495fb1280>, <dependencyGraph.Codelet object at 0x7fd495fb1340>, <dependencyGraph.Codelet object at 0x7fd495fb11c0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd495fb1280>, <dependencyGraph.Codelet object at 0x7fd495fb1340>, <dependencyGraph.Codelet object at 0x7fd495fb10d0>}
total number of nodes created:  4
state vars {'seen', 'last_ttl', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out
Stored read, write flank variables
{'p_last_ttl00', 'p_seen00', 'p_ttl_change02', 'p_ttl_change00', 'p_seen01', 'p_last_ttl02'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p__br_tmp6 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change01', 'p_ttl_change02', 'ttl_change', 'p_ttl_change00']
 node inputs:  ['p__br_tmp6', 'ttl_change', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['p_last_ttl00', 'ttl_change', 'p_seen00', 'p_ttl', 'p__br_tmp6']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_last_ttl00', 'p_seen00', 'p_ttl', 'p__br_tmp6']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'ttl_change', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p_last_ttl01', 'p__br_tmp5', 'p_last_ttl02']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p_ttl', 'p__br_tmp6']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl', 'p__br_tmp6']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_ttl', 'p_seen00', 'p__br_tmp6', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['last_ttl', 'p_ttl', 'p_seen00', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_last_ttl00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_ttl', 'p_seen00', 'p__br_tmp6', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0;
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'ttl_change', 'p_seen00', 'p_ttl', 'p__br_tmp5', 'last_ttl', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_ttl', 'p_seen00', 'p__br_tmp6', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p_seen00', 'p__br_tmp6']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'p_seen00', 'p_ttl', 'last_ttl', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fd495fe8040>]
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p_last_ttl01', 'p__br_tmp5', 'p_last_ttl02', 'p__br_tmp6']
state_var ['last_ttl']
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
new component inputs:  ['last_ttl', 'p_ttl', 'p_seen00']
new component outputs:  ['p_last_ttl00', 'last_ttl']
new component state_pkt_fields:  ['p_last_ttl00', 'p_last_ttl02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_ttl', 'p_seen00']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 'p_seen00', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_last_ttl00', 'p_seen00', 'p_ttl', 'p__br_tmp6']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fd495fe8040>]
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00', 'p__br_tmp6']
state_var ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['p_seen00', 'ttl_change', 'p__br_tmp5']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change02', 'p_ttl_change00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'ttl_change', 'p__br_tmp5']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp5', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_last_ttl00', 'p_seen00', 'p_ttl']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0', 'p__br_tmp5'}
{'p_id0', 'p__br_tmp5'}
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_ttl', 'p_seen00']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 'p_seen00', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['p_seen00', 'ttl_change', 'p__br_tmp5']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp5', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_7_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_7_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_7_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_7_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00', 'p__br_tmp6']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00', 'p__br_tmp6']
 *** found stateful dependencies between  1  and  2
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fd495fe8730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 4 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fd495fe8730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 5 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  6
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fd495fe8730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 6 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fd495fe8730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 7 has output p__br_tmp5
 *** found dependency between stateless ALU  7  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,
+---> dependencies of ALU  1 : 
0,2,5,6,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 
2,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (1, 0), (1, 2), (1, 5), (1, 6), (4, 7), (5, 7), (6, 7), (7, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 152 rows, 106 columns and 342 nonzeros
Model fingerprint: 0x298f77a6
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 27 columns
Presolve time: 0.01s
Presolved: 149 rows, 79 columns, 352 nonzeros
Variable types: 0 continuous, 79 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 4
T0_A_3 -0
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  -0.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  1.0
action:  6
num stages:  5
stage:  3.0
action:  7
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fd495fe8760>, 0), (<alus.DominoALU object at 0x7fd495fe8af0>, 1), (<alus.DominoALU object at 0x7fd495fe8790>, 2), (<alus.DominoALU object at 0x7fd495fe8820>, 3), (<alus.DominoALU object at 0x7fd495fe8b80>, 4)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fd495fe8880>, 0), (<alus.DominoGenericSALU object at 0x7fd495fb1970>, 1), (<alus.DominoGenericSALU object at 0x7fd495fe8730>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  2
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (1, 0), (1, 2), (1, 5), (1, 6), (4, 7), (5, 7), (6, 7), (7, 2)], 'stateful_alus': [{'inputs': ['last_ttl', 'p_ttl', 'p_seen00'], 'outputs': ['p_last_ttl00', 'p_last_ttl01', 'p__br_tmp5', 'last_ttl', 'p_last_ttl02', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) > 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 50;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 55;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + -30;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['seen', 'p_seen00', 'p__br_tmp6'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) == 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 10;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p_seen00', 'ttl_change', 'p__br_tmp5'], 'outputs': ['ttl_change', 'p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00', 'p__br_tmp6'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_1) != 22)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) > 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (27 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}, {'id': 4, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 5, 'opcode': 14, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 6, 'opcode': 11, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (1, 0), (1, 2), (1, 5), (1, 6), (4, 7), (5, 7), (6, 7), (7, 2)], 'stateful_alus': [{'inputs': ['last_ttl', 'p_ttl', 'p_seen00'], 'outputs': ['p_last_ttl00', 'p_last_ttl01', 'p__br_tmp5', 'last_ttl', 'p_last_ttl02', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) > 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 50;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 55;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + -30;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['seen', 'p_seen00', 'p__br_tmp6'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) == 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 10;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p_seen00', 'ttl_change', 'p__br_tmp5'], 'outputs': ['ttl_change', 'p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00', 'p__br_tmp6'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_1) != 22)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) > 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (27 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}, {'id': 4, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 5, 'opcode': 14, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 6, 'opcode': 11, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 6.158080339431763 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_9. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp3 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp4 = p_seen00==0;

lhs p__br_tmp4 rhs p_seen00==0
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp4 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp4 ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_seen00']
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp4 ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp4 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
RAW p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
RAW p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
RAW p__br_tmp4 = p_seen00==0; p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp4 = p_seen00==0; p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f59d532fbb0>, 'write': <dependencyGraph.Statement object at 0x7f59d532f8b0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f59d532f7f0>, 'write': <dependencyGraph.Statement object at 0x7f59d532f9a0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f59d53725e0>, 'write': <dependencyGraph.Statement object at 0x7f59d532f700>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f59d532fbb0>, 'write': <dependencyGraph.Statement object at 0x7f59d532f8b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f59d532f7f0>, 'write': <dependencyGraph.Statement object at 0x7f59d532f9a0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f59d53725e0>, 'write': <dependencyGraph.Statement object at 0x7f59d532f700>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp4 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp4 = p_seen00==0;
v p_seen01 = p__br_tmp4 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f59d532f0d0>, <dependencyGraph.Codelet object at 0x7f59d532f280>, <dependencyGraph.Codelet object at 0x7f59d532f340>, <dependencyGraph.Codelet object at 0x7f59d532f1c0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp4 = p_seen00==0;
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f59d532f280>, <dependencyGraph.Codelet object at 0x7f59d532f340>, <dependencyGraph.Codelet object at 0x7f59d532f0d0>}
total number of nodes created:  4
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp3'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp3', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp4', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p__br_tmp4', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp4 = p_seen00==0
2   p_seen01 = p__br_tmp4 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp4 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp4', 'p_seen00']
 state vars:  ['seen']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out
Stored read, write flank variables
{'p_ttl_change00', 'p_seen01', 'p_last_ttl00', 'p_seen00', 'p_last_ttl02', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p__br_tmp4 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change00', 'p_ttl_change02', 'ttl_change', 'p_ttl_change01']
 node inputs:  ['p__br_tmp3', 'ttl_change', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['p_ttl', 'p__br_tmp4', 'p_last_ttl00', 'p_seen00', 'ttl_change']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_ttl', 'p__br_tmp4', 'p_last_ttl00', 'p_seen00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp4 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp3']
 node inputs:  ['p_last_ttl00', 'p_ttl', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'ttl_change', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_last_ttl01', 'p__br_tmp3', 'p_last_ttl02']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p__br_tmp4', 'p_ttl', 'p_seen00']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p__br_tmp4', 'p_ttl', 'p_seen00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp4', 'p_ttl', 'last_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'p_seen00']
redundant outputs ['p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['p__br_tmp4', 'p_ttl', 'last_ttl', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'p_ttl', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp4', 'p_ttl', 'last_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp4 = p_seen00==0;
redundant outputs []
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p__br_tmp4 = p_seen00==0;
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'p__br_tmp4', 'p_ttl', 'p_seen00', 'ttl_change', 'last_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['p__br_tmp4', 'p_ttl', 'last_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'p_seen00']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p__br_tmp4', 'p_seen00']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'last_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp4 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp4 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp4 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f59d5366040>]
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_last_ttl01', 'p__br_tmp3', 'p__br_tmp4', 'p_last_ttl02']
state_var ['last_ttl']
resultant component: 
p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
new component inputs:  ['p_ttl', 'last_ttl', 'p_seen00']
new component outputs:  ['p_last_ttl00', 'last_ttl']
new component state_pkt_fields:  ['p_last_ttl00', 'p_last_ttl02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_ttl', 'last_ttl', 'p_seen00']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 'p_seen00', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_ttl', 'p__br_tmp4', 'p_last_ttl00', 'p_seen00']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp4 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp4 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp4 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f59d5366040>]
adj_inputs []
redundant outputs ['p_ttl_change00', 'p__br_tmp4', 'p_ttl_change02', 'p_ttl_change01']
state_var ['ttl_change']
resultant component: 
p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['p__br_tmp3', 'ttl_change', 'p_seen00']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change00', 'p_ttl_change02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p__br_tmp3', 'ttl_change', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_ttl', 'p_last_ttl00', 'p_seen00']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp3', 'p_id0'}
{'p__br_tmp3', 'p_id0'}
u:  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp4 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['p_ttl', 'last_ttl', 'p_seen00']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 'p_seen00', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['p__br_tmp3', 'ttl_change', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp3 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_7_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_7_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_7_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_7_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['seen', 'p__br_tmp4', 'p_seen00']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['seen', 'p__br_tmp4', 'p_seen00']
 *** found stateful dependencies between  1  and  2
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f59d5366730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f59d5366730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f59d5366730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f59d5366730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp3
 *** found dependency between stateless ALU  6  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,
+---> dependencies of ALU  1 : 
0,2,3,5,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
2,
+---> dependencies of ALU  7 : 

# alus: =  8
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (1, 0), (1, 2), (1, 3), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 152 rows, 106 columns and 342 nonzeros
Model fingerprint: 0x898b5632
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 27 columns
Presolve time: 0.01s
Presolved: 149 rows, 79 columns, 352 nonzeros
Variable types: 0 continuous, 79 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 4
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  -0.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
stage:  -0.0
action:  7
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f59d5366610>, 0), (<alus.DominoALU object at 0x7f59d53669a0>, 1), (<alus.DominoALU object at 0x7f59d5366a00>, 2), (<alus.DominoALU object at 0x7f59d5366ac0>, 3), (<alus.DominoALU object at 0x7f59d5366220>, 4)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f59d5366880>, 0), (<alus.DominoGenericSALU object at 0x7f59d532f970>, 1), (<alus.DominoGenericSALU object at 0x7f59d5366730>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (1, 0), (1, 2), (1, 3), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_ttl', 'last_ttl', 'p_seen00'], 'outputs': ['p_last_ttl01', 'p__br_tmp3', 'p__br_tmp4', 'p_last_ttl00', 'p_last_ttl02', 'last_ttl'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 6;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) > 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 29);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['seen', 'p__br_tmp4', 'p_seen00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p__br_tmp3', 'ttl_change', 'p_seen00'], 'outputs': ['p_ttl_change00', 'p__br_tmp4', 'p_ttl_change02', 'ttl_change', 'p_ttl_change01'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) == 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) == 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + 3);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_seen00', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '17'}, {'id': 5, 'opcode': 18, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp3', 'immediate_operand': '2'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (1, 0), (1, 2), (1, 3), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['p_ttl', 'last_ttl', 'p_seen00'], 'outputs': ['p_last_ttl01', 'p__br_tmp3', 'p__br_tmp4', 'p_last_ttl00', 'p_last_ttl02', 'last_ttl'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 6;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) > 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 29);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['seen', 'p__br_tmp4', 'p_seen00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['p__br_tmp3', 'ttl_change', 'p_seen00'], 'outputs': ['p_ttl_change00', 'p__br_tmp4', 'p_ttl_change02', 'ttl_change', 'p_ttl_change01'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) == 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) == 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + 3);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_seen00', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '17'}, {'id': 5, 'opcode': 18, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp3', 'immediate_operand': '2'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
Time taken: 9.329023122787476 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_10. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f24cd3a95e0>, 'write': <dependencyGraph.Statement object at 0x7f24cd366700>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f24cd3667f0>, 'write': <dependencyGraph.Statement object at 0x7f24cd3669a0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f24cd366bb0>, 'write': <dependencyGraph.Statement object at 0x7f24cd3668b0>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f24cd3a95e0>, 'write': <dependencyGraph.Statement object at 0x7f24cd366700>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f24cd3667f0>, 'write': <dependencyGraph.Statement object at 0x7f24cd3669a0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f24cd366bb0>, 'write': <dependencyGraph.Statement object at 0x7f24cd3668b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change [stateful output =None] stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) [stateful output =None] stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) [stateful output =None] stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 [stateful output =None] stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl [stateful output =None] stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) [stateful output =None] stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) [stateful output =None] stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) [stateful output =None] stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 [stateful output =None] stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen [stateful output =None] stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 [stateful output =None] stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) [stateful output =None] stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 [stateful output =None] stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata [stateful output =None] stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f24cd3660d0>, <dependencyGraph.Codelet object at 0x7f24cd366280>, <dependencyGraph.Codelet object at 0x7f24cd366340>, <dependencyGraph.Codelet object at 0x7f24cd3661c0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f24cd366280>, <dependencyGraph.Codelet object at 0x7f24cd366340>, <dependencyGraph.Codelet object at 0x7f24cd3660d0>}
total number of nodes created:  4
state vars {'last_ttl', 'ttl_change', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
elements in v_outputs:  {'p__br_tmp6', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Created output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out
Stored read, write flank variables
{'p_ttl_change02', 'p_last_ttl00', 'p_seen01', 'p_last_ttl02', 'p_seen00', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p__br_tmp6 = p_seen00==0;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
 node inputs:  ['ttl_change', 'p__br_tmp6', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['ttl_change', 'p_ttl', 'p_last_ttl00', 'p__br_tmp6', 'p_seen00']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_ttl', 'p_last_ttl00', 'p__br_tmp6', 'p_seen00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_last_ttl00', 'p_ttl', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  {'ttl_change', 'p__br_tmp6', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_last_ttl01', 'p_last_ttl02', 'p__br_tmp5']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_ttl', 'p__br_tmp6', 'p_seen00']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_ttl', 'p__br_tmp6', 'p_seen00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_ttl', 'p__br_tmp6', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'p_seen00']
redundant outputs ['p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['last_ttl', 'p_ttl', 'p__br_tmp6', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'p_ttl', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_ttl', 'p__br_tmp6', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0;
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p_seen00']
 exclude_read_write_flanks: successor inputs:  {'ttl_change', 'p_ttl', 'p__br_tmp6', 'last_ttl', 'p_seen00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_ttl', 'p__br_tmp6', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'p_seen00']
redundant outputs []
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p__br_tmp6', 'p_seen00']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'p_last_ttl00', 'p__br_tmp6', 'last_ttl', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f24cd39d040>]
adj_inputs ['p_last_ttl00', 'p_ttl', 'p_seen00']
redundant outputs ['p_last_ttl01', 'p__br_tmp6', 'p_last_ttl02', 'p__br_tmp5']
state_var ['last_ttl']
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
new component inputs:  ['last_ttl', 'p_ttl', 'p_seen00']
new component outputs:  ['p_last_ttl00', 'last_ttl']
new component state_pkt_fields:  ['p_last_ttl00', 'p_last_ttl02']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_ttl', 'p_seen00']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 'p_seen00', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_ttl', 'p_last_ttl00', 'p__br_tmp6', 'p_seen00']
trying to fold node:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp6 = p_seen00==0;
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f24cd39d040>]
adj_inputs []
redundant outputs ['p_ttl_change02', 'p__br_tmp6', 'p_ttl_change01', 'p_ttl_change00']
state_var ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
new component inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp5']
new component outputs:  ['ttl_change']
new component state_pkt_fields:  ['p_ttl_change02', 'p_ttl_change00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp5']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp5', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
trying to fold predecessor:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 --- cannot fold. too many stateless inputs:  ['p_ttl', 'p_last_ttl00', 'p_seen00']
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0', 'p__br_tmp5'}
{'p_id0', 'p__br_tmp5'}
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_ttl', 'p_seen00']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 'p_seen00', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp5']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p__br_tmp5', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_7_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_7_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_7_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_7_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p_id0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p__br_tmp6', 'p_seen00']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p__br_tmp6', 'p_seen00']
 *** found stateful dependencies between  1  and  2
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f24cd39d730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 4 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f24cd39d730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 5 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  6
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f24cd39d730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 6 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------successor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f24cd39d730>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 7 has output p__br_tmp5
 *** found dependency between stateless ALU  7  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,
+---> dependencies of ALU  1 : 
0,2,4,5,6,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 
2,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (1, 0), (1, 2), (1, 4), (1, 5), (1, 6), (4, 7), (5, 7), (6, 7), (7, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 153 rows, 106 columns and 344 nonzeros
Model fingerprint: 0x4f4fa0c8
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 27 columns
Presolve time: 0.01s
Presolved: 150 rows, 79 columns, 354 nonzeros
Variable types: 0 continuous, 79 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 4
T0_A_3 -0
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  -0.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  1.0
action:  6
num stages:  5
stage:  3.0
action:  7
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f24cd39d6d0>, 0), (<alus.DominoALU object at 0x7f24cd39daf0>, 1), (<alus.DominoALU object at 0x7f24cd39d760>, 2), (<alus.DominoALU object at 0x7f24cd39d820>, 3), (<alus.DominoALU object at 0x7f24cd39d970>, 4)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f24cd39d880>, 0), (<alus.DominoGenericSALU object at 0x7f24cd366970>, 1), (<alus.DominoGenericSALU object at 0x7f24cd39d730>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  2
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (1, 0), (1, 2), (1, 4), (1, 5), (1, 6), (4, 7), (5, 7), (6, 7), (7, 2)], 'stateful_alus': [{'inputs': ['last_ttl', 'p_ttl', 'p_seen00'], 'outputs': ['p_last_ttl00', 'p_last_ttl01', 'p__br_tmp6', 'last_ttl', 'p_last_ttl02', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 12)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_1) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 - 30;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) > 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (6 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + 14);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['seen', 'p__br_tmp6', 'p_seen00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 31)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 4)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = 31;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p_seen00', 'p__br_tmp5'], 'outputs': ['ttl_change', 'p_ttl_change02', 'p__br_tmp6', 'p_ttl_change01', 'p_ttl_change00'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) != 2)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + -2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) > 2)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 8, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 5, 'opcode': 19, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_ttl', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 6, 'opcode': 18, 'operand0': '1', 'operand1': 'p_seen00', 'operand2': 'p_ttl', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (1, 0), (1, 2), (1, 4), (1, 5), (1, 6), (4, 7), (5, 7), (6, 7), (7, 2)], 'stateful_alus': [{'inputs': ['last_ttl', 'p_ttl', 'p_seen00'], 'outputs': ['p_last_ttl00', 'p_last_ttl01', 'p__br_tmp6', 'last_ttl', 'p_last_ttl02', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 12)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_1) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 - 30;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) > 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (6 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + 14);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['seen', 'p__br_tmp6', 'p_seen00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 31)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 4)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = 31;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p_seen00', 'p__br_tmp5'], 'outputs': ['ttl_change', 'p_ttl_change02', 'p__br_tmp6', 'p_ttl_change01', 'p_ttl_change00'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) != 2)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + -2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) > 2)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 8, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 5, 'opcode': 19, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_ttl', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 6, 'opcode': 18, 'operand0': '1', 'operand1': 'p_seen00', 'operand2': 'p_ttl', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
Time taken: 6.597109794616699 s
preprocessor time:
