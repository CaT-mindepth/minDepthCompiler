running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_1. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7fb8f28902e0>, 'write': <dependencyGraph.Statement object at 0x7fb8f2890370>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fb8f2890820>, 'write': <dependencyGraph.Statement object at 0x7fb8f28904c0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fb8f2855700>, 'write': <dependencyGraph.Statement object at 0x7fb8f2890790>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fb8f28902e0>, 'write': <dependencyGraph.Statement object at 0x7fb8f2890370>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fb8f2890820>, 'write': <dependencyGraph.Statement object at 0x7fb8f28904c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fb8f2855700>, 'write': <dependencyGraph.Statement object at 0x7fb8f2890790>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb8f2890d90>, <dependencyGraph.Codelet object at 0x7fb8f2890f10>, <dependencyGraph.Codelet object at 0x7fb8f2890cd0>, <dependencyGraph.Codelet object at 0x7fb8f2890eb0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb8f2890cd0>, <dependencyGraph.Codelet object at 0x7fb8f2890d90>, <dependencyGraph.Codelet object at 0x7fb8f2890f10>}
total number of nodes created:  4
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p__br_tmp6', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp6', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out
Stored read, write flank variables
{'p_last_ttl02', 'p_last_ttl00', 'p_seen01', 'p_ttl_change00', 'p_seen00', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fb8f2848220>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'last_ttl', 'p_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0', 'p__br_tmp5', 'p__br_tmp6'}
{'p_id0', 'p__br_tmp5', 'p__br_tmp6'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p__br_tmp6', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_8_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_8_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_8_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_8_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_7_stateless_p__br_tmp6_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_7_stateless_p__br_tmp6_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp6 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen01', 'p__br_tmp6', 'p_seen00']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fb8f28905b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 4 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fb8f28905b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 5 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fb8f28905b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 6 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fb8f28905b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 7 has output p__br_tmp5
 *** found dependency between stateless ALU  7  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  8
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fb8f28905b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 8 has output p__br_tmp6
 *** found dependency between stateless ALU  8  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,4,6,8,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 

+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 
1,
+---> dependencies of ALU  8 : 
1,
# alus: =  9
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
 * gen_dependency_list: dependency between  8  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 9}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 4), (0, 6), (0, 8), (2, 4), (2, 5), (4, 7), (5, 7), (6, 7), (7, 1), (8, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 170 rows, 119 columns and 386 nonzeros
Model fingerprint: 0x26affcb2
Model has 108 general constraints
Variable types: 0 continuous, 119 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 30 columns
Presolve time: 0.01s
Presolved: 169 rows, 89 columns, 399 nonzeros
Variable types: 0 continuous, 89 integer (79 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 4
T0_A_2 1
T0_A_3 -0
T0_A_4 2
T0_A_5 2
T0_A_6 1
T0_A_7 3
T0_A_8 1
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  1.0
action:  6
num stages:  5
stage:  3.0
action:  7
num stages:  5
stage:  1.0
action:  8
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  8 :  1.0
 > get_alu_stage: table  0 , alu_id =  8 :  1.0
alu  8  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7fb8f28485b0>, 0), (<alus.DominoALU object at 0x7fb8f2848be0>, 1), (<alus.DominoALU object at 0x7fb8f28484f0>, 2), (<alus.DominoALU object at 0x7fb8f2848c40>, 3), (<alus.DominoALU object at 0x7fb8f28488e0>, 4), (<alus.DominoALU object at 0x7fb8f2848910>, 5)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fb8f28488b0>, 0), (<alus.DominoGenericSALU object at 0x7fb8f28905b0>, 1), (<alus.DominoGenericSALU object at 0x7fb8f28487f0>, 2)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
 * gen_dependency_list: dependency between  8  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (0, 6), (0, 8), (2, 4), (2, 5), (4, 7), (5, 7), (6, 7), (7, 1), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen01', 'p__br_tmp6', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 16)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['p_ttl_change00', 'ttl_change', 'p_ttl_change01', 'p_ttl_change02'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) > 31)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_1) > 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) == 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p__br_tmp5', 'p_last_ttl02', 'p_last_ttl00', 'p__br_tmp6', 'last_ttl', 'p_last_ttl01'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_0) != 1)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_0) == 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) == 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 5, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_0', 'immediate_operand': '8'}, {'id': 6, 'opcode': 18, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '31'}, {'id': 8, 'opcode': 9, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (0, 6), (0, 8), (2, 4), (2, 5), (4, 7), (5, 7), (6, 7), (7, 1), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen01', 'p__br_tmp6', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 16)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['p_ttl_change00', 'ttl_change', 'p_ttl_change01', 'p_ttl_change02'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) > 31)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_1) > 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) == 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p__br_tmp5', 'p_last_ttl02', 'p_last_ttl00', 'p__br_tmp6', 'last_ttl', 'p_last_ttl01'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_0) != 1)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_0) == 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) == 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 5, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_0', 'immediate_operand': '8'}, {'id': 6, 'opcode': 18, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '31'}, {'id': 8, 'opcode': 9, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '0'}]}
Time taken: 6.3570733070373535 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_2. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f1d2cbfc2e0>, 'write': <dependencyGraph.Statement object at 0x7f1d2cbfc370>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f1d2cbfc820>, 'write': <dependencyGraph.Statement object at 0x7f1d2cbfc4c0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f1d2cbc2700>, 'write': <dependencyGraph.Statement object at 0x7f1d2cbfc790>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f1d2cbfc2e0>, 'write': <dependencyGraph.Statement object at 0x7f1d2cbfc370>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f1d2cbfc820>, 'write': <dependencyGraph.Statement object at 0x7f1d2cbfc4c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f1d2cbc2700>, 'write': <dependencyGraph.Statement object at 0x7f1d2cbfc790>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1d2cbfcd90>, <dependencyGraph.Codelet object at 0x7f1d2cbfcf10>, <dependencyGraph.Codelet object at 0x7f1d2cbfccd0>, <dependencyGraph.Codelet object at 0x7f1d2cbfceb0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1d2cbfccd0>, <dependencyGraph.Codelet object at 0x7f1d2cbfcd90>, <dependencyGraph.Codelet object at 0x7f1d2cbfcf10>}
total number of nodes created:  4
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out
Stored read, write flank variables
{'p_last_ttl00', 'p_seen01', 'p_seen00', 'p_ttl_change00', 'p_ttl_change02', 'p_last_ttl02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f1d2cbb3220>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp6', 'p__br_tmp5', 'p_id0'}
{'p__br_tmp6', 'p__br_tmp5', 'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p__br_tmp6', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_7_stateless_p__br_tmp6_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_7_stateless_p__br_tmp6_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp6 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_8_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_8_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_8_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_8_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'p__br_tmp6', 'seen', 'p_seen01']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1d2cbfc5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 3 has output p__br_tmp6
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1d2cbfc5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 4 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1d2cbfc5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 5 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1d2cbfc5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 6 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1d2cbfc5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 7 has output p__br_tmp5
 *** found dependency between stateless ALU  7  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,6,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 
1,
+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 
1,
+---> dependencies of ALU  8 : 

# alus: =  9
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 9}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 6), (2, 4), (2, 5), (3, 1), (4, 7), (5, 7), (6, 7), (7, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 169 rows, 119 columns and 384 nonzeros
Model fingerprint: 0xac8b6aed
Model has 108 general constraints
Variable types: 0 continuous, 119 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 30 columns
Presolve time: 0.01s
Presolved: 168 rows, 89 columns, 397 nonzeros
Variable types: 0 continuous, 89 integer (79 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 4
T0_A_2 1
T0_A_3 1
T0_A_4 2
T0_A_5 2
T0_A_6 1
T0_A_7 3
T0_A_8 -0
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  1.0
action:  6
num stages:  5
stage:  3.0
action:  7
num stages:  5
stage:  -0.0
action:  8
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
alu  8  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f1d2cbb35b0>, 0), (<alus.DominoALU object at 0x7f1d2cbb3be0>, 1), (<alus.DominoALU object at 0x7f1d2cbb34f0>, 2), (<alus.DominoALU object at 0x7f1d2cbb3c40>, 3), (<alus.DominoALU object at 0x7f1d2cbb38e0>, 4), (<alus.DominoALU object at 0x7f1d2cbb3910>, 5)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f1d2cbb38b0>, 0), (<alus.DominoGenericSALU object at 0x7f1d2cbfc5b0>, 1), (<alus.DominoGenericSALU object at 0x7f1d2cbb37f0>, 2)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 6), (2, 4), (2, 5), (3, 1), (4, 7), (5, 7), (6, 7), (7, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp6', 'seen', 'p_seen01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 31)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 4)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = 31;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['p_ttl_change02', 'p_ttl_change01', 'ttl_change', 'p_ttl_change00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - pkt_0) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) < 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) == 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = 1 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl', 'p__br_tmp6', 'p_last_ttl02', 'p_last_ttl01', 'p__br_tmp5'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_1) != 31)/*comp_2_..ateful.sk:141*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 9, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '0'}, {'id': 4, 'opcode': 8, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 6, 'opcode': 18, 'operand0': '1', 'operand1': 'p_seen00', 'operand2': 'p_seen00', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '29'}, {'id': 8, 'opcode': 2, 'operand0': 'p_rdata', 'operand1': '1', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 6), (2, 4), (2, 5), (3, 1), (4, 7), (5, 7), (6, 7), (7, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'p__br_tmp6', 'seen', 'p_seen01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 31)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 4)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = 31;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['p_ttl_change02', 'p_ttl_change01', 'ttl_change', 'p_ttl_change00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - pkt_0) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) < 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) == 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = 1 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl', 'p__br_tmp6', 'p_last_ttl02', 'p_last_ttl01', 'p__br_tmp5'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_1) != 31)/*comp_2_..ateful.sk:141*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 9, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '0'}, {'id': 4, 'opcode': 8, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 6, 'opcode': 18, 'operand0': '1', 'operand1': 'p_seen00', 'operand2': 'p_seen00', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '29'}, {'id': 8, 'opcode': 2, 'operand0': 'p_rdata', 'operand1': '1', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '0'}]}
Time taken: 7.679970026016235 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_3. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp7 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp8 = p_seen00==0;

lhs p__br_tmp8 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp8 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp8 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_seen00']
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp8 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp8 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
RAW p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
RAW p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
RAW p__br_tmp8 = p_seen00==0; p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp8 = p_seen00==0; p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f25f2657820>, 'write': <dependencyGraph.Statement object at 0x7f25f26574c0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f25f261c700>, 'write': <dependencyGraph.Statement object at 0x7f25f2657790>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f25f26572e0>, 'write': <dependencyGraph.Statement object at 0x7f25f2657370>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f25f2657820>, 'write': <dependencyGraph.Statement object at 0x7f25f26574c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f25f261c700>, 'write': <dependencyGraph.Statement object at 0x7f25f2657790>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f25f26572e0>, 'write': <dependencyGraph.Statement object at 0x7f25f2657370>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp8 = p_seen00==0 stmts len 1
p__br_tmp8 = p_seen00==0;
v p_seen01 = p__br_tmp8 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f25f2657d90>, <dependencyGraph.Codelet object at 0x7f25f2657f10>, <dependencyGraph.Codelet object at 0x7f25f2657cd0>, <dependencyGraph.Codelet object at 0x7f25f2657eb0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp8 = p_seen00==0;
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f25f2657cd0>, <dependencyGraph.Codelet object at 0x7f25f2657d90>, <dependencyGraph.Codelet object at 0x7f25f2657f10>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp7'}
elements in v_outputs:  {'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp8', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp7', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp7    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp8'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp8'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp8 = p_seen00==0
2   p_seen01 = p__br_tmp8 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp8 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp8', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp8    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp8 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp8 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out
Stored read, write flank variables
{'p_last_ttl02', 'p_seen00', 'p_ttl_change02', 'p_last_ttl00', 'p_ttl_change00', 'p_seen01'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp8 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp8 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f25f260d220>]
resultant component: 
p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp8  into node  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0', 'p__br_tmp7', 'p__br_tmp8'}
{'p_id0', 'p__br_tmp7', 'p__br_tmp8'}
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp8 = p_seen00==0;
u:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp8 = p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp7', 'p__br_tmp8']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp7', 'metadata_hi': 'p__br_tmp8', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_8_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_8_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_8_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_8_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p__br_tmp7_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp7 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp7_bnd_2.sk.out
['comp_6']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_7_stateless_p__br_tmp8_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_7_stateless_p__br_tmp8_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_7_stateless_p__br_tmp8_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_7_stateless_p__br_tmp8_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp8 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp8_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp8_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
>>>>>>>>>>ALU1 outputs ['p_seen01', 'seen', 'p_seen00', 'p__br_tmp8']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f25f26575b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 4 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f25f26575b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 5 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f25f26575b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 6 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f25f26575b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 7 has output p__br_tmp7
 *** found dependency between stateless ALU  7  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  8
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f25f26575b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_7'}
Stateless ALU id 8 has output p__br_tmp8
 *** found dependency between stateless ALU  8  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,4,6,8,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 

+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 
1,
+---> dependencies of ALU  8 : 
1,
# alus: =  9
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
 * gen_dependency_list: dependency between  8  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 9}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 4), (0, 6), (0, 8), (2, 4), (2, 5), (4, 7), (5, 7), (6, 7), (7, 1), (8, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 170 rows, 119 columns and 386 nonzeros
Model fingerprint: 0x26affcb2
Model has 108 general constraints
Variable types: 0 continuous, 119 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 30 columns
Presolve time: 0.01s
Presolved: 169 rows, 89 columns, 399 nonzeros
Variable types: 0 continuous, 89 integer (79 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 4
T0_A_2 1
T0_A_3 -0
T0_A_4 2
T0_A_5 2
T0_A_6 1
T0_A_7 3
T0_A_8 1
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  1.0
action:  6
num stages:  5
stage:  3.0
action:  7
num stages:  5
stage:  1.0
action:  8
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  8 :  1.0
 > get_alu_stage: table  0 , alu_id =  8 :  1.0
alu  8  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f25f260d5b0>, 0), (<alus.DominoALU object at 0x7f25f260dbe0>, 1), (<alus.DominoALU object at 0x7f25f260d4f0>, 2), (<alus.DominoALU object at 0x7f25f260dc40>, 3), (<alus.DominoALU object at 0x7f25f260d8e0>, 4), (<alus.DominoALU object at 0x7f25f260d910>, 5)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f25f260d8b0>, 0), (<alus.DominoGenericSALU object at 0x7f25f26575b0>, 1), (<alus.DominoGenericSALU object at 0x7f25f260d7f0>, 2)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
 * gen_dependency_list: dependency between  8  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (0, 6), (0, 8), (2, 4), (2, 5), (4, 7), (5, 7), (6, 7), (7, 1), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen01', 'seen', 'p_seen00', 'p__br_tmp8'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 16)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp7', 'p__br_tmp8'], 'outputs': ['p_ttl_change00', 'ttl_change', 'p_ttl_change02', 'p_ttl_change01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_1) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_0) == 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) == 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl02', 'p__br_tmp7', 'p_last_ttl01', 'p_last_ttl00', 'last_ttl', 'p__br_tmp8'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) < 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 8;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 59;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}, {'id': 4, 'opcode': 11, 'operand0': 'p_seen00', 'operand1': 'p_seen00', 'operand2': 'p_last_ttl00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 5, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_ttl', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': 'p_ttl', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp7', 'immediate_operand': '31'}, {'id': 8, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp8', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (0, 6), (0, 8), (2, 4), (2, 5), (4, 7), (5, 7), (6, 7), (7, 1), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen01', 'seen', 'p_seen00', 'p__br_tmp8'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 16)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp7', 'p__br_tmp8'], 'outputs': ['p_ttl_change00', 'ttl_change', 'p_ttl_change02', 'p_ttl_change01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_1) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_0) == 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) == 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl02', 'p__br_tmp7', 'p_last_ttl01', 'p_last_ttl00', 'last_ttl', 'p__br_tmp8'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) < 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 8;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 59;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}, {'id': 4, 'opcode': 11, 'operand0': 'p_seen00', 'operand1': 'p_seen00', 'operand2': 'p_last_ttl00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 5, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_ttl', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': 'p_ttl', 'operand1': 'p_seen00', 'operand2': 'p_ttl', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp7', 'immediate_operand': '31'}, {'id': 8, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp8', 'immediate_operand': '1'}]}
Time taken: 5.854822158813477 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_4. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f37e4be7820>, 'write': <dependencyGraph.Statement object at 0x7f37e4be74c0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f37e4bac700>, 'write': <dependencyGraph.Statement object at 0x7f37e4be7790>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f37e4be72e0>, 'write': <dependencyGraph.Statement object at 0x7f37e4be7370>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f37e4be7820>, 'write': <dependencyGraph.Statement object at 0x7f37e4be74c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f37e4bac700>, 'write': <dependencyGraph.Statement object at 0x7f37e4be7790>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f37e4be72e0>, 'write': <dependencyGraph.Statement object at 0x7f37e4be7370>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f37e4be7d90>, <dependencyGraph.Codelet object at 0x7f37e4be7f10>, <dependencyGraph.Codelet object at 0x7f37e4be7cd0>, <dependencyGraph.Codelet object at 0x7f37e4be7eb0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f37e4be7cd0>, <dependencyGraph.Codelet object at 0x7f37e4be7d90>, <dependencyGraph.Codelet object at 0x7f37e4be7f10>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p__br_tmp6', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp6', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out
Stored read, write flank variables
{'p_ttl_change02', 'p_seen01', 'p_last_ttl02', 'p_seen00', 'p_ttl_change00', 'p_last_ttl00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f37e4b9d220>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp6', 'p__br_tmp5', 'p_id0'}
{'p__br_tmp6', 'p__br_tmp5', 'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p__br_tmp6', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_7_stateless_p__br_tmp6_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_7_stateless_p__br_tmp6_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp6 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_8_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_8_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_8_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_8_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
>>>>>>>>>>ALU1 outputs ['p_seen01', 'p__br_tmp6', 'seen', 'p_seen00']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f37e4be75b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 3 has output p__br_tmp6
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f37e4be75b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 4 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f37e4be75b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 5 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  6
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f37e4be75b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 6 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f37e4be75b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_8'}
Stateless ALU id 7 has output p__br_tmp5
 *** found dependency between stateless ALU  7  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,4,5,6,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
5,6,
+---> dependencies of ALU  3 : 
1,
+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 
1,
+---> dependencies of ALU  8 : 

# alus: =  9
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 9}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (2, 5), (2, 6), (3, 1), (4, 7), (5, 7), (6, 7), (7, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 171 rows, 119 columns and 388 nonzeros
Model fingerprint: 0xecd871c9
Model has 108 general constraints
Variable types: 0 continuous, 119 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 30 columns
Presolve time: 0.01s
Presolved: 170 rows, 89 columns, 401 nonzeros
Variable types: 0 continuous, 89 integer (79 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 4
T0_A_2 1
T0_A_3 1
T0_A_4 1
T0_A_5 2
T0_A_6 2
T0_A_7 3
T0_A_8 -0
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  2.0
action:  6
num stages:  5
stage:  3.0
action:  7
num stages:  5
stage:  -0.0
action:  8
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
alu  8  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f37e4b9d5b0>, 0), (<alus.DominoALU object at 0x7f37e4b9dbe0>, 1), (<alus.DominoALU object at 0x7f37e4b9d4f0>, 2), (<alus.DominoALU object at 0x7f37e4b9dc40>, 3), (<alus.DominoALU object at 0x7f37e4b9d8e0>, 4), (<alus.DominoALU object at 0x7f37e4b9d910>, 5)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f37e4b9d8b0>, 0), (<alus.DominoGenericSALU object at 0x7f37e4be75b0>, 1), (<alus.DominoGenericSALU object at 0x7f37e4b9d7f0>, 2)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (2, 5), (2, 6), (3, 1), (4, 7), (5, 7), (6, 7), (7, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen01', 'p__br_tmp6', 'seen', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['ttl_change', 'p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_1) == 3)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) == 4)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) != 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 - pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p__br_tmp6', 'p_last_ttl02', 'p__br_tmp5', 'p_last_ttl01', 'p_last_ttl00', 'last_ttl'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) < 24)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) != 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) != 23)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 26;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 5, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 6, 'opcode': 8, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}, {'id': 8, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (2, 5), (2, 6), (3, 1), (4, 7), (5, 7), (6, 7), (7, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen01', 'p__br_tmp6', 'seen', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['ttl_change', 'p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_1) == 3)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) == 4)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) != 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 - pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p__br_tmp6', 'p_last_ttl02', 'p__br_tmp5', 'p_last_ttl01', 'p_last_ttl00', 'last_ttl'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) < 24)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) != 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) != 23)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 26;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 5, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 6, 'opcode': 8, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}, {'id': 8, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}]}
Time taken: 7.180420637130737 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_5. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7fc84d3282e0>, 'write': <dependencyGraph.Statement object at 0x7fc84d328370>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fc84d2ed700>, 'write': <dependencyGraph.Statement object at 0x7fc84d328790>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fc84d328820>, 'write': <dependencyGraph.Statement object at 0x7fc84d3284c0>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fc84d3282e0>, 'write': <dependencyGraph.Statement object at 0x7fc84d328370>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fc84d2ed700>, 'write': <dependencyGraph.Statement object at 0x7fc84d328790>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fc84d328820>, 'write': <dependencyGraph.Statement object at 0x7fc84d3284c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc84d328d90>, <dependencyGraph.Codelet object at 0x7fc84d328f10>, <dependencyGraph.Codelet object at 0x7fc84d328cd0>, <dependencyGraph.Codelet object at 0x7fc84d328eb0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc84d328cd0>, <dependencyGraph.Codelet object at 0x7fc84d328d90>, <dependencyGraph.Codelet object at 0x7fc84d328f10>}
total number of nodes created:  4
state vars {'seen', 'last_ttl', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p__br_tmp6', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp6', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out
Stored read, write flank variables
{'p_last_ttl02', 'p_seen00', 'p_last_ttl00', 'p_seen01', 'p_ttl_change00', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fc84d2e0220>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'last_ttl', 'p_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0', 'p__br_tmp6', 'p__br_tmp5'}
{'p_id0', 'p__br_tmp6', 'p__br_tmp5'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p__br_tmp6', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_8_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_8_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_8_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_8_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_7_stateless_p__br_tmp6_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_7_stateless_p__br_tmp6_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp6 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen01', 'p__br_tmp6', 'p_seen00']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc84d3285b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 4 has output p__br_tmp6
 *** found dependency between stateless ALU  4  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc84d3285b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 5 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc84d3285b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 6 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  2  and ALU  7
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc84d3285b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 7 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc84d3285b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 8 has output p__br_tmp5
 *** found dependency between stateless ALU  8  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,4,6,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
5,7,
+---> dependencies of ALU  3 : 

+---> dependencies of ALU  4 : 
1,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
1,
# alus: =  9
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 9}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 4), (0, 6), (2, 5), (2, 7), (4, 1), (5, 8), (6, 8), (7, 8), (8, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 169 rows, 119 columns and 384 nonzeros
Model fingerprint: 0xb46fa83f
Model has 108 general constraints
Variable types: 0 continuous, 119 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 30 columns
Presolve time: 0.01s
Presolved: 168 rows, 89 columns, 397 nonzeros
Variable types: 0 continuous, 89 integer (79 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 4
T0_A_2 1
T0_A_3 -0
T0_A_4 1
T0_A_5 2
T0_A_6 1
T0_A_7 2
T0_A_8 3
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  1.0
action:  6
num stages:  5
stage:  2.0
action:  7
num stages:  5
stage:  3.0
action:  8
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
alu  7  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
alu  8  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7fc84d2e05b0>, 0), (<alus.DominoALU object at 0x7fc84d2e0820>, 1), (<alus.DominoALU object at 0x7fc84d2e0b80>, 2), (<alus.DominoALU object at 0x7fc84d2e0a60>, 3), (<alus.DominoALU object at 0x7fc84d2e0b50>, 4), (<alus.DominoALU object at 0x7fc84d2e0940>, 5)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fc84d2e08b0>, 0), (<alus.DominoGenericSALU object at 0x7fc84d3285b0>, 1), (<alus.DominoGenericSALU object at 0x7fc84d2e07f0>, 2)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (0, 6), (2, 5), (2, 7), (4, 1), (5, 8), (6, 8), (7, 8), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen01', 'p__br_tmp6', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 19)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['ttl_change', 'p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_1) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (0 - pkt_0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1 - pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p__br_tmp6', 'p_last_ttl02', 'p_last_ttl00', 'p_last_ttl01', 'last_ttl', 'p__br_tmp5'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - pkt_0) > 31)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) < 31)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) > 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '1'}, {'id': 5, 'opcode': 8, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 6, 'opcode': 16, 'operand0': 'p_seen00', 'operand1': 'p_seen00', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 7, 'opcode': 18, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 8, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (0, 6), (2, 5), (2, 7), (4, 1), (5, 8), (6, 8), (7, 8), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen01', 'p__br_tmp6', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 19)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['ttl_change', 'p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_1) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (0 - pkt_0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1 - pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p__br_tmp6', 'p_last_ttl02', 'p_last_ttl00', 'p_last_ttl01', 'last_ttl', 'p__br_tmp5'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - pkt_0) > 31)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) < 31)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_1) > 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}, {'id': 4, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '1'}, {'id': 5, 'opcode': 8, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_ttl', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 6, 'opcode': 16, 'operand0': 'p_seen00', 'operand1': 'p_seen00', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 7, 'opcode': 18, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 8, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '31'}]}
Time taken: 7.872912406921387 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_6. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp9 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp11 = p_seen00==0;

lhs p__br_tmp11 rhs p_seen00==0
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp11 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp11 ? (1) : (p_seen00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_seen00']
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp11 ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp11 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
RAW p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
RAW p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
RAW p__br_tmp11 = p_seen00==0; p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp11 = p_seen00==0; p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f8d1f7b6700>, 'write': <dependencyGraph.Statement object at 0x7f8d1f7f1790>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f8d1f7f12e0>, 'write': <dependencyGraph.Statement object at 0x7f8d1f7f1370>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f8d1f7f1820>, 'write': <dependencyGraph.Statement object at 0x7f8d1f7f14c0>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f8d1f7b6700>, 'write': <dependencyGraph.Statement object at 0x7f8d1f7f1790>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f8d1f7f12e0>, 'write': <dependencyGraph.Statement object at 0x7f8d1f7f1370>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f8d1f7f1820>, 'write': <dependencyGraph.Statement object at 0x7f8d1f7f14c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp11 = p_seen00==0 stmts len 1
p__br_tmp11 = p_seen00==0;
v p_seen01 = p__br_tmp11 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8d1f7f1d90>, <dependencyGraph.Codelet object at 0x7f8d1f7f1f10>, <dependencyGraph.Codelet object at 0x7f8d1f7f1cd0>, <dependencyGraph.Codelet object at 0x7f8d1f7f1eb0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp11 = p_seen00==0;
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8d1f7f1cd0>, <dependencyGraph.Codelet object at 0x7f8d1f7f1d90>, <dependencyGraph.Codelet object at 0x7f8d1f7f1f10>}
total number of nodes created:  4
state vars {'last_ttl', 'seen', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp9'}
elements in v_outputs:  {'p__br_tmp9'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp9', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp11', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp9    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp11'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp11'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp11 = p_seen00==0
2   p_seen01 = p__br_tmp11 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp11 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp11', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp11  not in state vars
 statement:  p__br_tmp11 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp11    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp11 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp11 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out
Stored read, write flank variables
{'p_ttl_change00', 'p_seen00', 'p_seen01', 'p_last_ttl02', 'p_last_ttl00', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp11 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp11 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f8d1f7aa220>]
resultant component: 
p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp11  into node  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'last_ttl', 'p_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp9', 'p__br_tmp11', 'p_id0'}
{'p__br_tmp9', 'p__br_tmp11', 'p_id0'}
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp11 = p_seen00==0;
u:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp11 = p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp11', 'p__br_tmp9']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp11', 'metadata_hi': 'p__br_tmp9', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p__br_tmp9_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp9 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp9_bnd_2.sk.out
['comp_6']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_7_stateless_p__br_tmp11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_7_stateless_p__br_tmp11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_7_stateless_p__br_tmp11_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_7_stateless_p__br_tmp11_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp11 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp11_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp11_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_8_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_8_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_8_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_8_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
>>>>>>>>>>ALU1 outputs ['p_seen01', 'p_seen00', 'p__br_tmp11', 'seen']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8d1f7f15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8d1f7f15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8d1f7f15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8d1f7f15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 6 has output p__br_tmp9
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  7
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8d1f7f15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 7 has output p__br_tmp11
 *** found dependency between stateless ALU  7  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,4,5,7,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
+---> dependencies of ALU  7 : 
1,
+---> dependencies of ALU  8 : 

# alus: =  9
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 9}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1), (7, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 172 rows, 119 columns and 390 nonzeros
Model fingerprint: 0x43d8fe0a
Model has 108 general constraints
Variable types: 0 continuous, 119 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 31 columns
Presolve time: 0.01s
Presolved: 169 rows, 88 columns, 398 nonzeros
Variable types: 0 continuous, 88 integer (78 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 4 8 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 4
T0_A_2 1
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
T0_A_7 1
T0_A_8 -0
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
stage:  1.0
action:  7
num stages:  5
stage:  -0.0
action:  8
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
alu  8  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f8d1f7aa760>, 0), (<alus.DominoALU object at 0x7f8d1f7aa820>, 1), (<alus.DominoALU object at 0x7f8d1f7aaa30>, 2), (<alus.DominoALU object at 0x7f8d1f7aa550>, 3), (<alus.DominoALU object at 0x7f8d1f7aa340>, 4), (<alus.DominoALU object at 0x7f8d1f7aa4f0>, 5)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f8d1f7aa8b0>, 0), (<alus.DominoGenericSALU object at 0x7f8d1f7f15b0>, 1), (<alus.DominoGenericSALU object at 0x7f8d1f7aa7c0>, 2)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1), (7, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen01', 'p_seen00', 'p__br_tmp11', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp11', 'p__br_tmp9'], 'outputs': ['p_ttl_change00', 'p_ttl_change01', 'ttl_change', 'p_ttl_change02'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) < 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 + 26;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl01', 'p__br_tmp11', 'last_ttl', 'p__br_tmp9', 'p_last_ttl02', 'p_last_ttl00'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) < 3)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_0) > 16)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 8, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 12, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '29'}, {'id': 5, 'opcode': 19, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_ttl', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp9', 'immediate_operand': '4'}, {'id': 7, 'opcode': 9, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp11', 'immediate_operand': '0'}, {'id': 8, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1), (7, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen01', 'p_seen00', 'p__br_tmp11', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 18;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 12)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 20;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp11', 'p__br_tmp9'], 'outputs': ['p_ttl_change00', 'p_ttl_change01', 'ttl_change', 'p_ttl_change02'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) < 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 + 26;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl01', 'p__br_tmp11', 'last_ttl', 'p__br_tmp9', 'p_last_ttl02', 'p_last_ttl00'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) < 3)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_0) > 16)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 8, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 12, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '29'}, {'id': 5, 'opcode': 19, 'operand0': 'p_seen00', 'operand1': 'p_last_ttl00', 'operand2': 'p_ttl', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp9', 'immediate_operand': '4'}, {'id': 7, 'opcode': 9, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp11', 'immediate_operand': '0'}, {'id': 8, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '10'}]}
Time taken: 8.298563957214355 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_7. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp6 ? (0) : (p_ttl_change00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change00']
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);

lhs p__br_tmp7 rhs (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_seen01', 'p_last_ttl01', 'p_ttl']
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl_change01', 'p_ttl_change01']
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
finding dependencies
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p_seen00 = seen; p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
RAW p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
RAW p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7fac93105700>, 'write': <dependencyGraph.Statement object at 0x7fac9313f220>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fac9313f820>, 'write': <dependencyGraph.Statement object at 0x7fac9313f4c0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fac9313f2e0>, 'write': <dependencyGraph.Statement object at 0x7fac9313f370>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fac93105700>, 'write': <dependencyGraph.Statement object at 0x7fac9313f220>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fac9313f820>, 'write': <dependencyGraph.Statement object at 0x7fac9313f4c0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fac9313f2e0>, 'write': <dependencyGraph.Statement object at 0x7fac9313f370>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
v p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) stmts len 1
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
v p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fac9313fe20>, <dependencyGraph.Codelet object at 0x7fac9313ff10>, <dependencyGraph.Codelet object at 0x7fac9313feb0>, <dependencyGraph.Codelet object at 0x7fac9313fd90>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fac9313ff10>, <dependencyGraph.Codelet object at 0x7fac9313fe20>, <dependencyGraph.Codelet object at 0x7fac9313feb0>}
total number of nodes created:  4
state vars {'seen', 'last_ttl', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp7'}
elements in v_outputs:  {'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
2   p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
3   p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp7', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_seen01', 'p_last_ttl01', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp7    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
 -------------- v_outputs:  {'p_seen01', 'p_seen00', 'p__br_tmp6'}
p_seen01  is write flank
p_seen00  is read flank
elements in v_outputs:  {'p_seen01', 'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  6
output  p_seen01    read_flanks:  []   write_flanks:  ['p_seen01']
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen01', 'p_seen00'}
   - createing a node for flank  p_seen00
   - createing a node for flank  p_seen01
size of SCC graph post-duplicate:  7
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out
Stored read, write flank variables
{'p_last_ttl02', 'p_last_ttl00', 'p_ttl_change00', 'p_seen01', 'p_seen00', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  8
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fac930f82e0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_seen01', 'p_ttl']
 ~~~| state var:  ['last_ttl']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 problematic inputs:  ['last_ttl', 'p_seen00', 'p_seen01', 'p_ttl']
 problematic state vars:  ['last_ttl']
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_8. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7ff9ee0f8820>, 'write': <dependencyGraph.Statement object at 0x7ff9ee0f84c0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7ff9ee0bd700>, 'write': <dependencyGraph.Statement object at 0x7ff9ee0f8790>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7ff9ee0f82e0>, 'write': <dependencyGraph.Statement object at 0x7ff9ee0f8370>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7ff9ee0f8820>, 'write': <dependencyGraph.Statement object at 0x7ff9ee0f84c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7ff9ee0bd700>, 'write': <dependencyGraph.Statement object at 0x7ff9ee0f8790>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7ff9ee0f82e0>, 'write': <dependencyGraph.Statement object at 0x7ff9ee0f8370>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff9ee0f8d90>, <dependencyGraph.Codelet object at 0x7ff9ee0f8f10>, <dependencyGraph.Codelet object at 0x7ff9ee0f8cd0>, <dependencyGraph.Codelet object at 0x7ff9ee0f8eb0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff9ee0f8cd0>, <dependencyGraph.Codelet object at 0x7ff9ee0f8d90>, <dependencyGraph.Codelet object at 0x7ff9ee0f8f10>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out
Stored read, write flank variables
{'p_seen01', 'p_last_ttl02', 'p_ttl_change02', 'p_ttl_change00', 'p_last_ttl00', 'p_seen00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7ff9ee0b0220>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'last_ttl', 'p_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0', 'p__br_tmp6', 'p__br_tmp5'}
{'p_id0', 'p__br_tmp6', 'p__br_tmp5'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p__br_tmp6', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_8_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_8_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_8_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_8_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_7_stateless_p__br_tmp6_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_7_stateless_p__br_tmp6_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp6 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen01', 'p_seen00', 'p__br_tmp6', 'seen']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff9ee0f85b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 4 has output p__br_tmp6
 *** found dependency between stateless ALU  4  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff9ee0f85b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 5 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff9ee0f85b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 6 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  7
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  2  and ALU  7
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff9ee0f85b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 7 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff9ee0f85b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_7', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 8 has output p__br_tmp5
 *** found dependency between stateless ALU  8  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,4,5,6,7,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
7,
+---> dependencies of ALU  3 : 

+---> dependencies of ALU  4 : 
1,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
1,
# alus: =  9
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 9}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (2, 7), (4, 1), (5, 8), (6, 8), (7, 8), (8, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 170 rows, 119 columns and 386 nonzeros
Model fingerprint: 0x03275d2b
Model has 108 general constraints
Variable types: 0 continuous, 119 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 29 columns
Presolve time: 0.01s
Presolved: 171 rows, 90 columns, 404 nonzeros
Variable types: 0 continuous, 90 integer (80 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 4
T0_A_2 1
T0_A_3 -0
T0_A_4 1
T0_A_5 1
T0_A_6 1
T0_A_7 2
T0_A_8 3
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  1.0
action:  6
num stages:  5
stage:  2.0
action:  7
num stages:  5
stage:  3.0
action:  8
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
alu  7  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
alu  8  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7ff9ee0b05b0>, 0), (<alus.DominoALU object at 0x7ff9ee0b0820>, 1), (<alus.DominoALU object at 0x7ff9ee0b0b80>, 2), (<alus.DominoALU object at 0x7ff9ee0b0a60>, 3), (<alus.DominoALU object at 0x7ff9ee0b0b50>, 4), (<alus.DominoALU object at 0x7ff9ee0b0940>, 5)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7ff9ee0b08b0>, 0), (<alus.DominoGenericSALU object at 0x7ff9ee0f85b0>, 1), (<alus.DominoGenericSALU object at 0x7ff9ee0b07f0>, 2)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (2, 7), (4, 1), (5, 8), (6, 8), (7, 8), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen01', 'p_seen00', 'p__br_tmp6', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 10;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['p_ttl_change01', 'p_ttl_change02', 'ttl_change', 'p_ttl_change00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - pkt_1) == 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) != 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1 - pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_0);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) == 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 27);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl02', 'last_ttl', 'p_last_ttl01', 'p__br_tmp5', 'p_last_ttl00', 'p__br_tmp6'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) == 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}, {'id': 4, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '1'}, {'id': 5, 'opcode': 22, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 6, 'opcode': 18, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 7, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (2, 7), (4, 1), (5, 8), (6, 8), (7, 8), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen01', 'p_seen00', 'p__br_tmp6', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 10;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['p_ttl_change01', 'p_ttl_change02', 'ttl_change', 'p_ttl_change00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - pkt_1) == 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) != 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1 - pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_0);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) == 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 27);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl02', 'last_ttl', 'p_last_ttl01', 'p__br_tmp5', 'p_last_ttl00', 'p__br_tmp6'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) == 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}, {'id': 4, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '1'}, {'id': 5, 'opcode': 22, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 6, 'opcode': 18, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 7, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '3'}]}
Time taken: 6.024144411087036 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_9. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp3 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp4 = p_seen00==0;

lhs p__br_tmp4 rhs p_seen00==0
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp4 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp4 ? (1) : (p_seen00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_seen00']
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp4 ? (0) : (p_ttl_change01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp4 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
RAW p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
RAW p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
RAW p__br_tmp4 = p_seen00==0; p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp4 = p_seen00==0; p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f9b0f12f2e0>, 'write': <dependencyGraph.Statement object at 0x7f9b0f12f370>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f9b0f0f4700>, 'write': <dependencyGraph.Statement object at 0x7f9b0f12f790>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f9b0f12f820>, 'write': <dependencyGraph.Statement object at 0x7f9b0f12f4c0>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f9b0f12f2e0>, 'write': <dependencyGraph.Statement object at 0x7f9b0f12f370>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f9b0f0f4700>, 'write': <dependencyGraph.Statement object at 0x7f9b0f12f790>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f9b0f12f820>, 'write': <dependencyGraph.Statement object at 0x7f9b0f12f4c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp4 = p_seen00==0 stmts len 1
p__br_tmp4 = p_seen00==0;
v p_seen01 = p__br_tmp4 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9b0f12fd90>, <dependencyGraph.Codelet object at 0x7f9b0f12ff10>, <dependencyGraph.Codelet object at 0x7f9b0f12fcd0>, <dependencyGraph.Codelet object at 0x7f9b0f12feb0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp4 = p_seen00==0;
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9b0f12fcd0>, <dependencyGraph.Codelet object at 0x7f9b0f12fd90>, <dependencyGraph.Codelet object at 0x7f9b0f12ff10>}
total number of nodes created:  4
state vars {'seen', 'last_ttl', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp3'}
elements in v_outputs:  {'p__br_tmp3'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp3', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp4', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp3    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p__br_tmp4', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp4', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp4 = p_seen00==0
2   p_seen01 = p__br_tmp4 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp4 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp4', 'p_seen00']
 state vars:  ['seen']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p__br_tmp4    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp4 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp4 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out
Stored read, write flank variables
{'p_last_ttl00', 'p_ttl_change02', 'p_last_ttl02', 'p_seen01', 'p_ttl_change00', 'p_seen00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp4 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp4 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f9b0f0e7220>]
resultant component: 
p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp4  into node  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp3', 'p__br_tmp4', 'p_id0'}
{'p__br_tmp3', 'p__br_tmp4', 'p_id0'}
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp4 = p_seen00==0;
u:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp4 = p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp3', 'p__br_tmp4']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 'p__br_tmp4', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p__br_tmp3_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp3 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp3_bnd_2.sk.out
['comp_6']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_7_stateless_p__br_tmp4_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_7_stateless_p__br_tmp4_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_7_stateless_p__br_tmp4_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_7_stateless_p__br_tmp4_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp4 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp4_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp4_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_8_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_8_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_8_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_8_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen01', 'p__br_tmp4', 'p_seen00']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f9b0f12f5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f9b0f12f5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f9b0f12f5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f9b0f12f5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 6 has output p__br_tmp3
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  7
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f9b0f12f5b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7', 8: 'comp_8'}
Stateless ALU id 7 has output p__br_tmp4
 *** found dependency between stateless ALU  7  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,4,7,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
+---> dependencies of ALU  7 : 
1,
+---> dependencies of ALU  8 : 

# alus: =  9
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 9}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 4), (0, 7), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1), (7, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 171 rows, 119 columns and 388 nonzeros
Model fingerprint: 0xf3e6ee2f
Model has 108 general constraints
Variable types: 0 continuous, 119 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 31 columns
Presolve time: 0.01s
Presolved: 168 rows, 88 columns, 396 nonzeros
Variable types: 0 continuous, 88 integer (78 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 4 8 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 4
T0_A_2 1
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
T0_A_7 1
T0_A_8 -0
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
stage:  1.0
action:  7
num stages:  5
stage:  -0.0
action:  8
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
alu  8  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f9b0f0e7790>, 0), (<alus.DominoALU object at 0x7f9b0f0e7820>, 1), (<alus.DominoALU object at 0x7f9b0f0e7a30>, 2), (<alus.DominoALU object at 0x7f9b0f0e7580>, 3), (<alus.DominoALU object at 0x7f9b0f0e7370>, 4), (<alus.DominoALU object at 0x7f9b0f0e7430>, 5)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f9b0f0e78b0>, 0), (<alus.DominoGenericSALU object at 0x7f9b0f12f5b0>, 1), (<alus.DominoGenericSALU object at 0x7f9b0f0e77f0>, 2)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (0, 7), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1), (7, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen01', 'p__br_tmp4', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp3', 'p__br_tmp4'], 'outputs': ['p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00', 'ttl_change'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) != 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_1) > 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 60;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1 - pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_1) > 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'p_last_ttl01', 'last_ttl', 'p_last_ttl02', 'p__br_tmp4', 'p__br_tmp3'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) != 2)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) != 2)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) < 13)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 7);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 31, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_last_ttl00', 'result': '_out_s12', 'immediate_operand': '16'}, {'id': 4, 'opcode': 12, 'operand0': 'p_last_ttl00', 'operand1': 'p_seen00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp3', 'immediate_operand': '1'}, {'id': 7, 'opcode': 26, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp4', 'immediate_operand': '1'}, {'id': 8, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (0, 7), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1), (7, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen01', 'p__br_tmp4', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp3', 'p__br_tmp4'], 'outputs': ['p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00', 'ttl_change'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) != 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_1) > 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 60;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1 - pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_1) > 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'p_last_ttl01', 'last_ttl', 'p_last_ttl02', 'p__br_tmp4', 'p__br_tmp3'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) != 2)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) != 2)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) < 13)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 7);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 31, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_last_ttl00', 'result': '_out_s12', 'immediate_operand': '16'}, {'id': 4, 'opcode': 12, 'operand0': 'p_last_ttl00', 'operand1': 'p_seen00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 6, 'operand0': 'p_ttl', 'operand1': 'p_last_ttl00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp3', 'immediate_operand': '1'}, {'id': 7, 'opcode': 26, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp4', 'immediate_operand': '1'}, {'id': 8, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
Time taken: 6.032243728637695 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_10. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f47b11b1820>, 'write': <dependencyGraph.Statement object at 0x7f47b11b14c0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f47b11b12e0>, 'write': <dependencyGraph.Statement object at 0x7f47b11b1370>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f47b1176700>, 'write': <dependencyGraph.Statement object at 0x7f47b11b1790>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f47b11b1820>, 'write': <dependencyGraph.Statement object at 0x7f47b11b14c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f47b11b12e0>, 'write': <dependencyGraph.Statement object at 0x7f47b11b1370>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f47b1176700>, 'write': <dependencyGraph.Statement object at 0x7f47b11b1790>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f47b11b1d90>, <dependencyGraph.Codelet object at 0x7f47b11b1f10>, <dependencyGraph.Codelet object at 0x7f47b11b1cd0>, <dependencyGraph.Codelet object at 0x7f47b11b1eb0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f47b11b1cd0>, <dependencyGraph.Codelet object at 0x7f47b11b1d90>, <dependencyGraph.Codelet object at 0x7f47b11b1f10>}
total number of nodes created:  4
state vars {'ttl_change', 'seen', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out
Stored read, write flank variables
{'p_seen01', 'p_seen00', 'p_last_ttl02', 'p_ttl_change00', 'p_ttl_change02', 'p_last_ttl00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f47b1169220>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp6', 'p_id0', 'p__br_tmp5'}
{'p__br_tmp6', 'p_id0', 'p__br_tmp5'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0;
u:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p__br_tmp6', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_7_stateless_p__br_tmp6_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_7_stateless_p__br_tmp6_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_7_stateless_p__br_tmp6_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp6 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp6_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_8_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_8_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_8_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_8_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_id0_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_2.sk.out
['comp_6']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen', 'p__br_tmp6', 'p_seen01']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f47b11b15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp6
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f47b11b15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 5 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  2  and ALU  6
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f47b11b15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 6 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
 *** found stateless dependency between ALU  2  and ALU  7
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f47b11b15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 7 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f47b11b15b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_8', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6'}
Stateless ALU id 8 has output p__br_tmp5
 *** found dependency between stateless ALU  8  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,5,6,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
6,7,
+---> dependencies of ALU  3 : 
1,
+---> dependencies of ALU  4 : 

+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
1,
# alus: =  9
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 9}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 5), (0, 6), (2, 6), (2, 7), (3, 1), (5, 8), (6, 8), (7, 8), (8, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 170 rows, 119 columns and 386 nonzeros
Model fingerprint: 0xd8034ae4
Model has 108 general constraints
Variable types: 0 continuous, 119 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 30 columns
Presolve time: 0.01s
Presolved: 169 rows, 89 columns, 399 nonzeros
Variable types: 0 continuous, 89 integer (79 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 4
T0_A_2 1
T0_A_3 1
T0_A_4 -0
T0_A_5 1
T0_A_6 2
T0_A_7 2
T0_A_8 3
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  2.0
action:  6
num stages:  5
stage:  2.0
action:  7
num stages:  5
stage:  3.0
action:  8
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
alu  7  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
alu  8  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f47b11695b0>, 0), (<alus.DominoALU object at 0x7f47b1169820>, 1), (<alus.DominoALU object at 0x7f47b1169b80>, 2), (<alus.DominoALU object at 0x7f47b1169a60>, 3), (<alus.DominoALU object at 0x7f47b1169b50>, 4), (<alus.DominoALU object at 0x7f47b1169940>, 5)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f47b11698b0>, 0), (<alus.DominoGenericSALU object at 0x7f47b11b15b0>, 1), (<alus.DominoGenericSALU object at 0x7f47b11697f0>, 2)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 5), (0, 6), (2, 6), (2, 7), (3, 1), (5, 8), (6, 8), (7, 8), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen', 'p__br_tmp6', 'p_seen01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01', 'ttl_change'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - 0) == 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_0) != 16)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 8 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl01', 'p_last_ttl02', 'p_last_ttl00', 'p__br_tmp6', 'last_ttl', 'p__br_tmp5'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_0) == 3)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) != 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 51;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 31)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '1'}, {'id': 4, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 20, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 6, 'opcode': 7, 'operand0': 'p_seen00', 'operand1': 'p_seen00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 7, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 5), (0, 6), (2, 6), (2, 7), (3, 1), (5, 8), (6, 8), (7, 8), (8, 1)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen', 'p__br_tmp6', 'p_seen01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p__br_tmp6'], 'outputs': ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01', 'ttl_change'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - 0) == 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((0 - pkt_0) != 16)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 8 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl01', 'p_last_ttl02', 'p_last_ttl00', 'p__br_tmp6', 'last_ttl', 'p__br_tmp5'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - pkt_0) == 3)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) != 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 51;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 31)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 24, 'operand0': 'p_seen00', 'operand1': '1', 'operand2': 'p_seen00', 'result': 'p__br_tmp6', 'immediate_operand': '1'}, {'id': 4, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 20, 'operand0': 'p_seen00', 'operand1': 'p_ttl', 'operand2': 'p_seen00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 6, 'opcode': 7, 'operand0': 'p_seen00', 'operand1': 'p_seen00', 'operand2': 'p_last_ttl00', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 7, 'opcode': 6, 'operand0': 'p_last_ttl00', 'operand1': 'p_ttl', 'operand2': 'p_last_ttl00', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '2'}]}
Time taken: 6.756897687911987 s
preprocessor time:
