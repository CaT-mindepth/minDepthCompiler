running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_1. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f238cda58b0>, 'write': <dependencyGraph.Statement object at 0x7f238cda5340>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f238cda5760>, 'write': <dependencyGraph.Statement object at 0x7f238cda53d0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f238cd6c700>, 'write': <dependencyGraph.Statement object at 0x7f238cda56d0>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f238cda58b0>, 'write': <dependencyGraph.Statement object at 0x7f238cda5340>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f238cda5760>, 'write': <dependencyGraph.Statement object at 0x7f238cda53d0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f238cd6c700>, 'write': <dependencyGraph.Statement object at 0x7f238cda56d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f238cda5d60>, <dependencyGraph.Codelet object at 0x7f238cda5ee0>, <dependencyGraph.Codelet object at 0x7f238cda5ca0>, <dependencyGraph.Codelet object at 0x7f238cda5e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f238cda5ee0>, <dependencyGraph.Codelet object at 0x7f238cda5ca0>, <dependencyGraph.Codelet object at 0x7f238cda5d60>}
total number of nodes created:  4
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp6'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00', 'p__br_tmp6'}
   - createing a node for flank  p__br_tmp6
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out
Stored read, write flank variables
{'p_ttl_change02', 'p_seen01', 'p_last_ttl02', 'p_last_ttl00', 'p_seen00', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  5
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
other inputs:  {'p__br_tmp6', 'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
other inputs:  {'p_seen00', 'p_ttl', 'last_ttl'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f238cd5c280>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
pred rhs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'p__br_tmp6', 'ttl_change'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'ttl_change', 'p__br_tmp5'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change02', 'p_ttl_change00', 'ttl_change', 'p_ttl_change01']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
redundant outputs ['p_last_ttl02', 'p_last_ttl01', 'p_last_ttl00']
state_var ['last_ttl']
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change00', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['p_ttl', 'ttl_change', 'p_seen00']
		| merged state vars:  {'ttl_change', 'last_ttl'}
		| merged stateless vars:  ['p_ttl', 'p_seen00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f238cda5760>, <dependencyGraph.Statement object at 0x7f238cda5670>, <dependencyGraph.Statement object at 0x7f238cda56a0>, <dependencyGraph.Statement object at 0x7f238cda53d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f238cda5760>, <dependencyGraph.Statement object at 0x7f238cda5670>, <dependencyGraph.Statement object at 0x7f238cda56a0>, <dependencyGraph.Statement object at 0x7f238cda53d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_last_ttl02', 'p__br_tmp6', 'p_last_ttl01', 'p_last_ttl00', 'p__br_tmp5', 'p_ttl_change00']
state_var ['last_ttl', 'ttl_change']
		* new component :  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
		* new component outputs :  ['ttl_change', 'last_ttl']
		* state_pkt_fields of new component:  ['p_last_ttl02', 'p_last_ttl00', 'p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'last_ttl']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
redundant outputs ['p__br_tmp6', 'p_seen01']
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['last_ttl', 'ttl_change']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['p_ttl', 'ttl_change', 'last_ttl']
		| merged state vars:  {'seen', 'ttl_change', 'last_ttl'}
		| merged stateless vars:  ['p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p_seen00', 'p__br_tmp6', 'p_seen01']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p_seen00']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'ttl_change', 'last_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_seen00;

curr line: 	bit p__br_tmp6;

curr line: 	int p_seen01;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_seen00;

 > FOUND OUT LINE : 	_out[2] = p_seen00;

> found out variable:  p_seen00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_seen00
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p_seen00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 0 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 0, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 26 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 26, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 1 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_seen00;

curr line: 	bit p__br_tmp6;

curr line: 	int p_seen01;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp6;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp6;

> found out variable:  p__br_tmp6
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp6
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p__br_tmp6
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 9 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, 9, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_lo 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_lo, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_ttl_change02;

curr line: 	int p_ttl_change01;

curr line: 	int p_last_ttl02;

curr line: 	bit p__br_tmp6;

curr line: 	int p_last_ttl01;

curr line: 	int p_last_ttl00;

curr line: 	bit p__br_tmp5;

curr line: 	int p_ttl_change00;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_last_ttl00 = last_ttl;

curr line: 	p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

curr line: 	p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

curr line: 	p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

curr line: 	last_ttl = p_last_ttl02;

curr line: 	p_ttl_change00 = ttl_change;

curr line: 	p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

curr line: 	p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

curr line: 	ttl_change = p_ttl_change02;

curr line: 	_out[0] = last_ttl;

 > FOUND OUT LINE : 	_out[0] = last_ttl;

curr line: 	_out[1] = ttl_change;

 > FOUND OUT LINE : 	_out[1] = ttl_change;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p_seen00  metadata_hi= p_ttl  register_lo= last_ttl  register_hi= ttl_change  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 16 5 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 16, 5, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - 0 ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-0)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - 0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_hi ) + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_hi)+register_lo)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_hi) + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_5_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_5_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_5_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_5_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_5_stateless_p_id0_bnd_1.sk.out
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_5'}
>>>>>>>>>>ALU1 outputs ['p_seen00']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 80 rows, 54 columns and 166 nonzeros
Model fingerprint: 0x258a5c61
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 93 rows, 51 columns, 224 nonzeros
Variable types: 0 continuous, 51 integer (46 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f238cd5cf40>, <alus.SALU object at 0x7f238cd5cdf0>, <alus.SALU object at 0x7f238cd5ca60>, <alus.ALU object at 0x7f238cd5cdc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f238cd5cdc0>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f238cd5cf40>, 0), (<alus.SALU object at 0x7f238cd5cdf0>, 1), (<alus.SALU object at 0x7f238cd5ca60>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp6
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '30'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '30'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f238cd5cf40>
 -* this SALU:  <alus.SALU object at 0x7f238cd5cdf0>
 -* this SALU:  <alus.SALU object at 0x7f238cd5ca60>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f238cd5cf40>
 -* this SALU:  <alus.SALU object at 0x7f238cd5cdf0>
 -* this SALU:  <alus.SALU object at 0x7f238cd5ca60>
salu_configs:  [[1, 1, 0], [0, 0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(2)-(0)', 'update_hi_2_value': '(alu_lo)', 'update_lo_1_value': '(alu_lo)-(26)', 'update_lo_2_value': '(1)-(0)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp6', 'update_hi_1_value': '(9)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(0)+(alu_hi)', 'condition_hi': '(0-alu_lo)>0', 'condition_lo': '(0-alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '(0)-(ipv4.p_seen00)', 'update_lo_1_value': '(ipv4.p_ttl)+(0)', 'update_lo_2_value': '(5)-(16)', 'condition_hi': '(((0-ipv4.p_seen00)-0)+1)>0', 'condition_lo': '((0-ipv4.p_ttl)+alu_lo)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(2)-(0)', 'update_hi_2_value': '(alu_lo)', 'update_lo_1_value': '(alu_lo)-(26)', 'update_lo_2_value': '(1)-(0)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp6', 'update_hi_1_value': '(9)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(0)+(alu_hi)', 'condition_hi': '(0-alu_lo)>0', 'condition_lo': '(0-alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '(0)-(ipv4.p_seen00)', 'update_lo_1_value': '(ipv4.p_ttl)+(0)', 'update_lo_2_value': '(5)-(16)', 'condition_hi': '(((0-ipv4.p_seen00)-0)+1)>0', 'condition_lo': '((0-ipv4.p_ttl)+alu_lo)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '30'}], [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '30'}]]
[[1, 1, 0], [0, 0, 1]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_id0 : 32 (signed);   
        p__br_tmp6 : 32 (signed);   
        p_ttl : 32 (signed);   
        p_seen00 : 32 (signed);   
        p_rdata : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (alu_lo)-(26);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : (1)-(0);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (2)-(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_seen00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0-alu_lo)==0;
    condition_hi              : (0-alu_lo)>0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (0)+(alu_hi);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (9)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp6;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
  

  
    
  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p_ttl)+alu_lo)==0;
    condition_hi              : (((0-ipv4.p_seen00)-0)+1)>0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.p_ttl)+(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (5)-(16);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (1)+(alu_hi);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (0)-(ipv4.p_seen00);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_2_action () {
    test_stateful_alu_1_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 1
table test_stateful_alu_1_2_table {
    actions {
        test_stateful_alu_1_2_action;
    }
    default_action: test_stateful_alu_1_2_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    modify_field(ipv4.p_id0, ipv4.p_rdata);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
      
    
      
        
      
      
        
      
        
      
        
          apply(test_stateful_alu_1_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.9843320846557617 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_2. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fe4e4b55760>, 'write': <dependencyGraph.Statement object at 0x7fe4e4b553d0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fe4e4b1c700>, 'write': <dependencyGraph.Statement object at 0x7fe4e4b556d0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fe4e4b558b0>, 'write': <dependencyGraph.Statement object at 0x7fe4e4b55340>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fe4e4b55760>, 'write': <dependencyGraph.Statement object at 0x7fe4e4b553d0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fe4e4b1c700>, 'write': <dependencyGraph.Statement object at 0x7fe4e4b556d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fe4e4b558b0>, 'write': <dependencyGraph.Statement object at 0x7fe4e4b55340>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe4e4b55d60>, <dependencyGraph.Codelet object at 0x7fe4e4b55ee0>, <dependencyGraph.Codelet object at 0x7fe4e4b55ca0>, <dependencyGraph.Codelet object at 0x7fe4e4b55e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe4e4b55ca0>, <dependencyGraph.Codelet object at 0x7fe4e4b55ee0>, <dependencyGraph.Codelet object at 0x7fe4e4b55d60>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp6'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00', 'p__br_tmp6'}
   - createing a node for flank  p__br_tmp6
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out
Stored read, write flank variables
{'p_seen00', 'p_seen01', 'p_last_ttl02', 'p_last_ttl00', 'p_ttl_change02', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  5
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
other inputs:  {'p_seen00', 'p_ttl', 'last_ttl'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fe4e4b0c280>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
pred rhs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'ttl_change', 'p__br_tmp6'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'p__br_tmp5', 'ttl_change'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
redundant outputs ['p_last_ttl01', 'p_last_ttl02', 'p_last_ttl00']
state_var ['last_ttl']
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['p_ttl', 'ttl_change', 'p_seen00']
		| merged state vars:  {'ttl_change', 'last_ttl'}
		| merged stateless vars:  ['p_ttl', 'p_seen00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7fe4e4b55760>, <dependencyGraph.Statement object at 0x7fe4e4b55670>, <dependencyGraph.Statement object at 0x7fe4e4b556a0>, <dependencyGraph.Statement object at 0x7fe4e4b553d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7fe4e4b55760>, <dependencyGraph.Statement object at 0x7fe4e4b55670>, <dependencyGraph.Statement object at 0x7fe4e4b556a0>, <dependencyGraph.Statement object at 0x7fe4e4b553d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
removing two old components
adj_inputs []
redundant outputs ['p_last_ttl01', 'p_last_ttl02', 'p_ttl_change01', 'p_last_ttl00', 'p__br_tmp5', 'p__br_tmp6', 'p_ttl_change02', 'p_ttl_change00']
state_var ['last_ttl', 'ttl_change']
		* new component :  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
		* new component outputs :  ['ttl_change', 'last_ttl']
		* state_pkt_fields of new component:  ['p_last_ttl02', 'p_last_ttl00', 'p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'last_ttl']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
redundant outputs ['p_seen01', 'p__br_tmp6']
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['last_ttl', 'ttl_change']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['p_ttl', 'ttl_change', 'last_ttl']
		| merged state vars:  {'ttl_change', 'last_ttl', 'seen'}
		| merged stateless vars:  ['p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'last_ttl', 'ttl_change'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'p_seen01', 'p__br_tmp6', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_seen00;

curr line: 	int p_seen01;

curr line: 	bit p__br_tmp6;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp6;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp6;

> found out variable:  p__br_tmp6
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp6
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p__br_tmp6
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 0 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 30 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 30, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 7 metadata_lo 11 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_lo, 11, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 15 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 15, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 1 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+1)!=0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 1) != 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)<0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_seen00;

curr line: 	int p_seen01;

curr line: 	bit p__br_tmp6;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_seen00;

 > FOUND OUT LINE : 	_out[2] = p_seen00;

> found out variable:  p_seen00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_seen00
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p_seen00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_last_ttl01;

curr line: 	int p_last_ttl02;

curr line: 	int p_ttl_change01;

curr line: 	int p_last_ttl00;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp6;

curr line: 	int p_ttl_change02;

curr line: 	int p_ttl_change00;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_last_ttl00 = last_ttl;

curr line: 	p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

curr line: 	p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

curr line: 	p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

curr line: 	last_ttl = p_last_ttl02;

curr line: 	p_ttl_change00 = ttl_change;

curr line: 	p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

curr line: 	p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

curr line: 	ttl_change = p_ttl_change02;

curr line: 	_out[0] = last_ttl;

 > FOUND OUT LINE : 	_out[0] = last_ttl;

curr line: 	_out[1] = ttl_change;

 > FOUND OUT LINE : 	_out[1] = ttl_change;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p_seen00  metadata_hi= p_ttl  register_lo= last_ttl  register_hi= ttl_change  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 metadata_lo 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, metadata_lo, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 29 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 29, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_lo ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_lo)!=0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_lo_0) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_5_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_5_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_5_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_5_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_5_stateless_p_id0_bnd_1.sk.out
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5'}
>>>>>>>>>>ALU1 outputs ['p_seen00']
 *** found stateful dependencies between  1  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  1  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 80 rows, 54 columns and 166 nonzeros
Model fingerprint: 0x818fb638
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 93 rows, 51 columns, 224 nonzeros
Variable types: 0 continuous, 51 integer (46 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7fe4e4b0cf40>, <alus.SALU object at 0x7fe4e4b0ce20>, <alus.SALU object at 0x7fe4e4b0ca60>, <alus.ALU object at 0x7fe4e4b0cdc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fe4e4b0cdc0>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7fe4e4b0cf40>, 0), (<alus.SALU object at 0x7fe4e4b0ce20>, 1), (<alus.SALU object at 0x7fe4e4b0ca60>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp6
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fe4e4b0cf40>
 -* this SALU:  <alus.SALU object at 0x7fe4e4b0ce20>
 -* this SALU:  <alus.SALU object at 0x7fe4e4b0ca60>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fe4e4b0cf40>
 -* this SALU:  <alus.SALU object at 0x7fe4e4b0ce20>
 -* this SALU:  <alus.SALU object at 0x7fe4e4b0ca60>
salu_configs:  [[1, 1, 0], [0, 0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp6', 'update_hi_1_value': '(0)+(2)', 'update_hi_2_value': '(31)-(30)', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(15)', 'condition_hi': '((0-alu_lo)+1) !=0', 'condition_lo': '((0-alu_lo)+1)<0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) or (condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_ttl)+(0)', 'update_lo_2_value': '(ipv4.p_seen00)-(29)', 'condition_hi': '((0-ipv4.p_ttl)+alu_lo) !=0', 'condition_lo': '((0-ipv4.p_seen00)+1)>0', 'update_hi_1_predicate': '(condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp6', 'update_hi_1_value': '(0)+(2)', 'update_hi_2_value': '(31)-(30)', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(15)', 'condition_hi': '((0-alu_lo)+1) !=0', 'condition_lo': '((0-alu_lo)+1)<0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) or (condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_ttl)+(0)', 'update_lo_2_value': '(ipv4.p_seen00)-(29)', 'condition_hi': '((0-ipv4.p_ttl)+alu_lo) !=0', 'condition_lo': '((0-ipv4.p_seen00)+1)>0', 'update_hi_1_predicate': '(condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}], [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]]
[[1, 1, 0], [0, 0, 1]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_id0 : 32 (signed);   
        p_ttl : 32 (signed);   
        p_seen00 : 32 (signed);   
        p_rdata : 32 (signed);   
        p__br_tmp6 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+1)<0;
    condition_hi              : ((0-alu_lo)+1) !=0;
    update_lo_1_predicate     :  not ((condition_hi) and (condition_lo));
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(15);
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : (0)+(2);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (31)-(30);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp6;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (2)-(0);
    update_lo_2_predicate     : (condition_hi) or (condition_lo);
    update_lo_2_value         : 1;
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (alu_lo)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (3);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_seen00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
  

  
    
  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p_seen00)+1)>0;
    condition_hi              : ((0-ipv4.p_ttl)+alu_lo) !=0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.p_ttl)+(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p_seen00)-(29);
    update_hi_1_predicate     : (condition_lo);
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_2_action () {
    test_stateful_alu_1_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 1
table test_stateful_alu_1_2_table {
    actions {
        test_stateful_alu_1_2_action;
    }
    default_action: test_stateful_alu_1_2_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    modify_field(ipv4.p_id0, ipv4.p_rdata);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
      
    
      
        
      
      
        
      
        
      
        
          apply(test_stateful_alu_1_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 4.2940709590911865 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_3. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp7 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp8 = p_seen00==0;

lhs p__br_tmp8 rhs p_seen00==0
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp8 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp8 ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_seen00']
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp8 ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp8 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
RAW p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
RAW p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
RAW p__br_tmp8 = p_seen00==0; p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp8 = p_seen00==0; p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f21fed358b0>, 'write': <dependencyGraph.Statement object at 0x7f21fed35340>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f21fed35760>, 'write': <dependencyGraph.Statement object at 0x7f21fed353d0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f21fecfc700>, 'write': <dependencyGraph.Statement object at 0x7f21fed356d0>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f21fed358b0>, 'write': <dependencyGraph.Statement object at 0x7f21fed35340>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f21fed35760>, 'write': <dependencyGraph.Statement object at 0x7f21fed353d0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f21fecfc700>, 'write': <dependencyGraph.Statement object at 0x7f21fed356d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp8 = p_seen00==0 stmts len 1
p__br_tmp8 = p_seen00==0;
v p_seen01 = p__br_tmp8 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f21fed35d60>, <dependencyGraph.Codelet object at 0x7f21fed35ee0>, <dependencyGraph.Codelet object at 0x7f21fed35ca0>, <dependencyGraph.Codelet object at 0x7f21fed35e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp8 = p_seen00==0;
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f21fed35ca0>, <dependencyGraph.Codelet object at 0x7f21fed35ee0>, <dependencyGraph.Codelet object at 0x7f21fed35d60>}
total number of nodes created:  4
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp7'}
elements in v_outputs:  {'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp7'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp8', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp7', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp7'}
   - createing a node for flank  p__br_tmp7
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp8'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp8'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp8'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp8 = p_seen00==0
2   p_seen01 = p__br_tmp8 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp8 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp8', 'p_seen00']
 state vars:  ['seen']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00', 'p__br_tmp8'}
   - createing a node for flank  p__br_tmp8
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out
Stored read, write flank variables
{'p_ttl_change02', 'p_seen01', 'p_last_ttl00', 'p_ttl_change00', 'p_seen00', 'p_last_ttl02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  5
pred_stmt:  p__br_tmp8 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp8', 'p_seen00', 'p_ttl']
other inputs:  {'p_seen00', 'p_ttl', 'last_ttl'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp8 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp8 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f21fecec280>]
resultant component: 
p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp8  into node  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
pred rhs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
comp inputs:  ['ttl_change', 'p__br_tmp7', 'p__br_tmp8']
other inputs:  {'ttl_change', 'p__br_tmp8'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp8 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['ttl_change', 'p__br_tmp7', 'p__br_tmp8']
other inputs:  {'p__br_tmp7', 'ttl_change'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change02', 'p_ttl_change00', 'ttl_change', 'p_ttl_change01']
 node inputs:  ['ttl_change', 'p__br_tmp7', 'p__br_tmp8']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['ttl_change', 'p__br_tmp7', 'p__br_tmp8']
redundant outputs ['p_last_ttl00', 'p_last_ttl02', 'p_last_ttl01']
state_var ['last_ttl']
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change00', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['p_ttl', 'ttl_change', 'p_seen00']
		| merged state vars:  {'ttl_change', 'last_ttl'}
		| merged stateless vars:  ['p_ttl', 'p_seen00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl00', 'p_last_ttl02']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f21fed35760>, <dependencyGraph.Statement object at 0x7f21fed35670>, <dependencyGraph.Statement object at 0x7f21fed356a0>, <dependencyGraph.Statement object at 0x7f21fed353d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
resultant component: 
p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl00', 'p_last_ttl02']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f21fed35760>, <dependencyGraph.Statement object at 0x7f21fed35670>, <dependencyGraph.Statement object at 0x7f21fed356a0>, <dependencyGraph.Statement object at 0x7f21fed353d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00', 'p_last_ttl00', 'p__br_tmp7', 'p_last_ttl02', 'p__br_tmp8', 'p_last_ttl01']
state_var ['last_ttl', 'ttl_change']
		* new component :  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
		* new component outputs :  ['ttl_change', 'last_ttl']
		* state_pkt_fields of new component:  ['p_last_ttl00', 'p_last_ttl02', 'p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'last_ttl']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
redundant outputs ['p_seen01', 'p__br_tmp8']
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['last_ttl', 'ttl_change']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['p_ttl', 'ttl_change', 'last_ttl']
		| merged state vars:  {'seen', 'ttl_change', 'last_ttl'}
		| merged stateless vars:  ['p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'ttl_change', 'last_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'p_seen01', 'p__br_tmp8', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_seen00;

curr line: 	int p_seen01;

curr line: 	bit p__br_tmp8;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp8 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp8;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp8;

> found out variable:  p__br_tmp8
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp8
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p__br_tmp8
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 4 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 4, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_seen00;

curr line: 	int p_seen01;

curr line: 	bit p__br_tmp8;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp8 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_seen00;

 > FOUND OUT LINE : 	_out[2] = p_seen00;

> found out variable:  p_seen00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_seen00
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p_seen00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo + register_lo ) + 4 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo+register_lo)+4)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo + register_lo_0) + 4) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_ttl_change02;

curr line: 	int p_ttl_change01;

curr line: 	int p_ttl_change00;

curr line: 	int p_last_ttl00;

curr line: 	bit p__br_tmp7;

curr line: 	int p_last_ttl02;

curr line: 	bit p__br_tmp8;

curr line: 	int p_last_ttl01;

curr line: 	p__br_tmp8 = p_seen00==0;

curr line: 	p_last_ttl00 = last_ttl;

curr line: 	p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

curr line: 	p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);

curr line: 	p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);

curr line: 	last_ttl = p_last_ttl02;

curr line: 	p_ttl_change00 = ttl_change;

curr line: 	p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);

curr line: 	p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);

curr line: 	ttl_change = p_ttl_change02;

curr line: 	_out[0] = last_ttl;

 > FOUND OUT LINE : 	_out[0] = last_ttl;

curr line: 	_out[1] = ttl_change;

 > FOUND OUT LINE : 	_out[1] = ttl_change;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p_seen00  metadata_hi= p_ttl  register_lo= last_ttl  register_hi= ttl_change  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 2 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 2, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi 30 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 30, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - 0 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-0)!=0
    ( line =    bit condition_hi_s55 = (metadata_lo - 0) != 0;
  )
demangled line:  bit condition_lo = ( metadata_hi - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi-register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_5_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_5_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_5_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_5_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_5_stateless_p_id0_bnd_1.sk.out
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5'}
>>>>>>>>>>ALU1 outputs ['p_seen00']
 *** found stateful dependencies between  1  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  1  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 80 rows, 54 columns and 166 nonzeros
Model fingerprint: 0x818fb638
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 93 rows, 51 columns, 224 nonzeros
Variable types: 0 continuous, 51 integer (46 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f21fececf40>, <alus.SALU object at 0x7f21fecece20>, <alus.SALU object at 0x7f21fececa60>, <alus.ALU object at 0x7f21fececdc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f21fececdc0>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f21fececf40>, 0), (<alus.SALU object at 0x7f21fecece20>, 1), (<alus.SALU object at 0x7f21fececa60>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp8
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f21fececf40>
 -* this SALU:  <alus.SALU object at 0x7f21fecece20>
 -* this SALU:  <alus.SALU object at 0x7f21fececa60>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f21fececf40>
 -* this SALU:  <alus.SALU object at 0x7f21fecece20>
 -* this SALU:  <alus.SALU object at 0x7f21fececa60>
salu_configs:  [[1, 1, 0], [0, 0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp8', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(4)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(26)+(3)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '((0+alu_lo)+4)==0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_hi) or (condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(2)-(2)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_ttl)', 'update_lo_2_value': '(ipv4.p_ttl)', 'condition_hi': '(ipv4.p_seen00-0) !=0', 'condition_lo': '(ipv4.p_ttl-alu_lo)==0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp8', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(4)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(26)+(3)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '((0+alu_lo)+4)==0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_hi) or (condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(2)-(2)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_ttl)', 'update_lo_2_value': '(ipv4.p_ttl)', 'condition_hi': '(ipv4.p_seen00-0) !=0', 'condition_lo': '(ipv4.p_ttl-alu_lo)==0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}], [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]]
[[1, 1, 0], [0, 0, 1]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_ttl : 32 (signed);   
        p_rdata : 32 (signed);   
        p_id0 : 32 (signed);   
        p_seen00 : 32 (signed);   
        p__br_tmp8 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(4);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp8;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-alu_lo)+1)>0;
    condition_hi              : ((0+alu_lo)+4)==0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (2)-(0);
    update_lo_2_predicate     : (condition_hi) or (condition_lo);
    update_lo_2_value         : 1;
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (alu_lo)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (26)+(3);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_seen00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
  

  
    
  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (ipv4.p_ttl-alu_lo)==0;
    condition_hi              : (ipv4.p_seen00-0) !=0;
    update_lo_1_predicate     : (condition_hi) or (condition_lo);
    update_lo_1_value         : (ipv4.p_ttl);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_ttl);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : (2)-(2);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_2_action () {
    test_stateful_alu_1_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 1
table test_stateful_alu_1_2_table {
    actions {
        test_stateful_alu_1_2_action;
    }
    default_action: test_stateful_alu_1_2_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    modify_field(ipv4.p_id0, ipv4.p_rdata);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
      
    
      
        
      
      
        
      
        
      
        
          apply(test_stateful_alu_1_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 4.326643466949463 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_4. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f80978ec760>, 'write': <dependencyGraph.Statement object at 0x7f80978ec3d0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f80978ec8b0>, 'write': <dependencyGraph.Statement object at 0x7f80978ec340>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f80978b2700>, 'write': <dependencyGraph.Statement object at 0x7f80978ec6d0>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f80978ec760>, 'write': <dependencyGraph.Statement object at 0x7f80978ec3d0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f80978ec8b0>, 'write': <dependencyGraph.Statement object at 0x7f80978ec340>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f80978b2700>, 'write': <dependencyGraph.Statement object at 0x7f80978ec6d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f80978ecd60>, <dependencyGraph.Codelet object at 0x7f80978ecee0>, <dependencyGraph.Codelet object at 0x7f80978ecca0>, <dependencyGraph.Codelet object at 0x7f80978ece80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f80978ecca0>, <dependencyGraph.Codelet object at 0x7f80978ecee0>, <dependencyGraph.Codelet object at 0x7f80978ecd60>}
total number of nodes created:  4
state vars {'ttl_change', 'seen', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p__br_tmp6', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp6', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp6'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p__br_tmp6', 'p_seen00'}
   - createing a node for flank  p_seen00
   - createing a node for flank  p__br_tmp6
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out
Stored read, write flank variables
{'p_ttl_change00', 'p_last_ttl00', 'p_seen01', 'p_last_ttl02', 'p_seen00', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
number of nodes on SCC_GRAPH:  5
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'p_seen00', 'last_ttl'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f80978ec5b0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'p__br_tmp5', 'ttl_change'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
pred rhs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'p__br_tmp6', 'ttl_change'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02', 'ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
redundant outputs ['p_seen01', 'p_seen00']
state_var ['seen']
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02']
state_var ['ttl_change']
     | merged inputs:  ['p__br_tmp5', 'ttl_change']
		| merged state vars:  {'ttl_change', 'seen'}
		| merged stateless vars:  ['p__br_tmp5']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f80978ec760>, <dependencyGraph.Statement object at 0x7f80978ec670>, <dependencyGraph.Statement object at 0x7f80978ec6a0>, <dependencyGraph.Statement object at 0x7f80978ec3d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['ttl_change']
resultant component: 
p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['seen', 'ttl_change', 'p__br_tmp5']
 ~~~| state var:  ['seen', 'ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f80978ec760>, <dependencyGraph.Statement object at 0x7f80978ec670>, <dependencyGraph.Statement object at 0x7f80978ec6a0>, <dependencyGraph.Statement object at 0x7f80978ec3d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['ttl_change']
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_seen01', 'p__br_tmp6', 'p_ttl_change01', 'p_seen00', 'p_ttl_change02']
state_var ['seen', 'ttl_change']
		* new component :  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['seen', 'p__br_tmp5', 'ttl_change']
		* new component outputs :  ['ttl_change', 'seen']
		* state_pkt_fields of new component:  ['p_seen01', 'p_seen00', 'p_ttl_change00', 'p_ttl_change02']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p__br_tmp5', 'p_last_ttl00', 'last_ttl', 'p__br_tmp6', 'p_last_ttl02', 'p_last_ttl01']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl']
redundant outputs ['p__br_tmp6', 'p_seen01']
state_var ['seen']
adj_inputs []
redundant outputs ['p__br_tmp5', 'p_last_ttl00', 'p__br_tmp6', 'p_last_ttl02', 'p_last_ttl01']
state_var ['last_ttl']
     | merged inputs:  ['p_ttl', 'last_ttl']
		| merged state vars:  {'last_ttl', 'seen'}
		| merged stateless vars:  ['p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 | b:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;  with *************************
[<dependencyGraph.Statement object at 0x7f80978ec5b0>, <dependencyGraph.Statement object at 0x7f80978b2700>, <dependencyGraph.Statement object at 0x7f80978ec1c0>, <dependencyGraph.Statement object at 0x7f80978ec730>, <dependencyGraph.Statement object at 0x7f80978ec310>, <dependencyGraph.Statement object at 0x7f80978ec6d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['last_ttl']
resultant component: 
p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'seen', 'p_ttl']
 ~~~| state var:  ['seen', 'last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 0, 'register_lo': 'last_ttl', 'register_hi': 'seen'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'seen']
 node inputs:  ['seen', 'p__br_tmp5', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'p_seen00', 'last_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_seen01;

curr line: 	int p_seen00;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_seen00;

 > FOUND OUT LINE : 	_out[2] = p_seen00;

> found out variable:  p_seen00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_seen00
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p_seen00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 7 15 20 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 15, 20, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  true
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_last_ttl00;

curr line: 	bit p__br_tmp6;

curr line: 	int p_last_ttl02;

curr line: 	int p_last_ttl01;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_last_ttl00 = last_ttl;

curr line: 	p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

curr line: 	p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

curr line: 	p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

curr line: 	last_ttl = p_last_ttl02;

curr line: 	_out[0] = last_ttl;

 > FOUND OUT LINE : 	_out[0] = last_ttl;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 1  metadata_lo= p_seen00  metadata_hi= p_ttl  register_lo= last_ttl  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 0 28 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 0, 28, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 5 19 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(5, 19, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 5 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 5, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 29 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 29, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_lo)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - 0 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-0)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - 0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['seen', 'ttl_change', 'p__br_tmp5']
 ~~~| state var:  ['seen', 'ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_ttl_change00;

curr line: 	int p_seen01;

curr line: 	bit p__br_tmp6;

curr line: 	int p_ttl_change01;

curr line: 	int p_seen00;

curr line: 	int p_ttl_change02;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	p_ttl_change00 = ttl_change;

curr line: 	p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

curr line: 	p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

curr line: 	ttl_change = p_ttl_change02;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = ttl_change;

 > FOUND OUT LINE : 	_out[1] = ttl_change;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= seen  register_hi= ttl_change  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 31 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_5_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_5_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_5_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_5_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_5_stateless_p_id0_bnd_1.sk.out
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_5'}
>>>>>>>>>>ALU1 outputs ['p_seen00']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 80 rows, 54 columns and 166 nonzeros
Model fingerprint: 0xd068d8d8
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 93 rows, 51 columns, 224 nonzeros
Variable types: 0 continuous, 51 integer (46 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f80978a1f10>, <alus.SALU object at 0x7f80978a1a00>, <alus.SALU object at 0x7f80978a1ca0>, <alus.ALU object at 0x7f80978a1a30>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f80978a1a30>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f80978a1f10>, 0), (<alus.SALU object at 0x7f80978a1a00>, 1), (<alus.SALU object at 0x7f80978a1ca0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
Illegal character '~'
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '30'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '30'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f80978a1f10>
 -* this SALU:  <alus.SALU object at 0x7f80978a1a00>
 -* this SALU:  <alus.SALU object at 0x7f80978a1ca0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f80978a1f10>
 -* this SALU:  <alus.SALU object at 0x7f80978a1a00>
 -* this SALU:  <alus.SALU object at 0x7f80978a1ca0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)-(26)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'true', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '1', 'update_hi_2_value': '0', 'update_lo_1_value': '(ipv4.p_ttl)', 'update_lo_2_value': '(ipv4.p_seen00)-(29)', 'condition_hi': '((0-ipv4.p_ttl)+alu_lo)==0', 'condition_lo': '(ipv4.p_seen00-0)>0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '((condition_hi) and (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)', 'update_hi_2_value': '(ipv4.p__br_tmp5)+(alu_hi)', 'update_lo_1_value': '(31)+(alu_lo)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)-(26)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'true', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '1', 'update_hi_2_value': '0', 'update_lo_1_value': '(ipv4.p_ttl)', 'update_lo_2_value': '(ipv4.p_seen00)-(29)', 'condition_hi': '((0-ipv4.p_ttl)+alu_lo)==0', 'condition_lo': '(ipv4.p_seen00-0)>0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '((condition_hi) and (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)', 'update_hi_2_value': '(ipv4.p__br_tmp5)+(alu_hi)', 'update_lo_1_value': '(31)+(alu_lo)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '30'}], [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '30'}]]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp5 : 32 (signed);   
        p_id0 : 32 (signed);   
        p_ttl : 32 (signed);   
        p_rdata : 32 (signed);   
        p_seen00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (2)-(0);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : 1;
    update_hi_1_predicate     : true;
    update_hi_1_value         : (alu_lo)-(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(26);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_seen00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-alu_lo)+1)>0;
    condition_hi              : ((0-alu_lo)+1)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (31)+(alu_lo);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (0);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (ipv4.p__br_tmp5)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (ipv4.p_seen00-0)>0;
    condition_hi              : ((0-ipv4.p_ttl)+alu_lo)==0;
    update_lo_1_predicate     : ((condition_hi) and (condition_lo));
    update_lo_1_value         : (ipv4.p_ttl);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p_seen00)-(29);
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : 1;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : 0;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    modify_field(ipv4.p_id0, ipv4.p_rdata);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 5.588578939437866 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_5. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fc4441f4760>, 'write': <dependencyGraph.Statement object at 0x7fc4441f43d0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fc4441bb700>, 'write': <dependencyGraph.Statement object at 0x7fc4441f46d0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fc4441f48b0>, 'write': <dependencyGraph.Statement object at 0x7fc4441f4340>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fc4441f4760>, 'write': <dependencyGraph.Statement object at 0x7fc4441f43d0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fc4441bb700>, 'write': <dependencyGraph.Statement object at 0x7fc4441f46d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fc4441f48b0>, 'write': <dependencyGraph.Statement object at 0x7fc4441f4340>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc4441f4d60>, <dependencyGraph.Codelet object at 0x7fc4441f4ee0>, <dependencyGraph.Codelet object at 0x7fc4441f4ca0>, <dependencyGraph.Codelet object at 0x7fc4441f4e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc4441f4ca0>, <dependencyGraph.Codelet object at 0x7fc4441f4ee0>, <dependencyGraph.Codelet object at 0x7fc4441f4d60>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p__br_tmp6', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp6', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp6'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p__br_tmp6', 'p_seen00'}
   - createing a node for flank  p_seen00
   - createing a node for flank  p__br_tmp6
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out
Stored read, write flank variables
{'p_last_ttl02', 'p_ttl_change02', 'p_ttl_change00', 'p_seen01', 'p_last_ttl00', 'p_seen00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
number of nodes on SCC_GRAPH:  5
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl', 'p_seen00'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fc4441f45b0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'ttl_change', 'p__br_tmp5'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
pred rhs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'p__br_tmp6', 'ttl_change'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change00', 'ttl_change', 'p_ttl_change02', 'p_ttl_change01']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
redundant outputs ['p_seen01', 'p_seen00']
state_var ['seen']
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['ttl_change', 'p__br_tmp5']
		| merged state vars:  {'ttl_change', 'seen'}
		| merged stateless vars:  ['p__br_tmp5']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7fc4441f4760>, <dependencyGraph.Statement object at 0x7fc4441f4670>, <dependencyGraph.Statement object at 0x7fc4441f46a0>, <dependencyGraph.Statement object at 0x7fc4441f43d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['ttl_change']
resultant component: 
p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['seen', 'ttl_change', 'p__br_tmp5']
 ~~~| state var:  ['seen', 'ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7fc4441f4760>, <dependencyGraph.Statement object at 0x7fc4441f4670>, <dependencyGraph.Statement object at 0x7fc4441f46a0>, <dependencyGraph.Statement object at 0x7fc4441f43d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['ttl_change']
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_ttl_change02', 'p_ttl_change00', 'p_seen01', 'p_ttl_change01', 'p_seen00']
state_var ['seen', 'ttl_change']
		* new component :  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['seen', 'p__br_tmp5', 'ttl_change']
		* new component outputs :  ['ttl_change', 'seen']
		* state_pkt_fields of new component:  ['p_seen01', 'p_seen00', 'p_ttl_change00', 'p_ttl_change02']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p__br_tmp6', 'p_last_ttl02', 'last_ttl', 'p_last_ttl00', 'p_last_ttl01', 'p__br_tmp5']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl']
redundant outputs ['p__br_tmp6', 'p_seen01']
state_var ['seen']
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_last_ttl02', 'p_last_ttl00', 'p_last_ttl01', 'p__br_tmp5']
state_var ['last_ttl']
     | merged inputs:  ['p_ttl', 'last_ttl']
		| merged state vars:  {'last_ttl', 'seen'}
		| merged stateless vars:  ['p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 | b:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;  with *************************
[<dependencyGraph.Statement object at 0x7fc4441f45b0>, <dependencyGraph.Statement object at 0x7fc4441bb700>, <dependencyGraph.Statement object at 0x7fc4441f41c0>, <dependencyGraph.Statement object at 0x7fc4441f4730>, <dependencyGraph.Statement object at 0x7fc4441f4310>, <dependencyGraph.Statement object at 0x7fc4441f46d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['last_ttl']
resultant component: 
p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'seen', 'p_ttl']
 ~~~| state var:  ['seen', 'last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 0, 'register_lo': 'last_ttl', 'register_hi': 'seen'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'seen']
 node inputs:  ['seen', 'p__br_tmp5', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'last_ttl', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_seen01;

curr line: 	int p_seen00;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_seen00;

 > FOUND OUT LINE : 	_out[2] = p_seen00;

> found out variable:  p_seen00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_seen00
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p_seen00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 7 15 20 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 15, 20, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  true
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_last_ttl02;

curr line: 	int p_last_ttl00;

curr line: 	int p_last_ttl01;

curr line: 	bit p__br_tmp5;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_last_ttl00 = last_ttl;

curr line: 	p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

curr line: 	p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

curr line: 	p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

curr line: 	last_ttl = p_last_ttl02;

curr line: 	_out[0] = last_ttl;

 > FOUND OUT LINE : 	_out[0] = last_ttl;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 1  metadata_lo= p_seen00  metadata_hi= p_ttl  register_lo= last_ttl  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_hi ) + 1 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_hi)+1)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_hi_1) + 1) < 0;
  )
demangled line:  bit condition_lo = ( metadata_hi - register_lo ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi-register_lo)!=0
    ( line =    bit condition_lo_s67 = (metadata_hi - register_lo_0) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['seen', 'ttl_change', 'p__br_tmp5']
 ~~~| state var:  ['seen', 'ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_ttl_change02;

curr line: 	int p_ttl_change00;

curr line: 	int p_seen01;

curr line: 	int p_ttl_change01;

curr line: 	int p_seen00;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	p_ttl_change00 = ttl_change;

curr line: 	p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

curr line: 	p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

curr line: 	ttl_change = p_ttl_change02;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = ttl_change;

 > FOUND OUT LINE : 	_out[1] = ttl_change;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= seen  register_hi= ttl_change  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_hi + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_hi+register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_hi + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_hi ) + 2 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_hi)+2)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_hi_1) + 2) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_5_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_5_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_5_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_5_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_5_stateless_p_id0_bnd_1.sk.out
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_5'}
>>>>>>>>>>ALU1 outputs ['p_seen00']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 80 rows, 54 columns and 166 nonzeros
Model fingerprint: 0xd068d8d8
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 93 rows, 51 columns, 224 nonzeros
Variable types: 0 continuous, 51 integer (46 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7fc4441abf10>, <alus.SALU object at 0x7fc4441aba00>, <alus.SALU object at 0x7fc4441abca0>, <alus.ALU object at 0x7fc4441aba30>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fc4441aba30>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7fc4441abf10>, 0), (<alus.SALU object at 0x7fc4441aba00>, 1), (<alus.SALU object at 0x7fc4441abca0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fc4441abf10>
 -* this SALU:  <alus.SALU object at 0x7fc4441aba00>
 -* this SALU:  <alus.SALU object at 0x7fc4441abca0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fc4441abf10>
 -* this SALU:  <alus.SALU object at 0x7fc4441aba00>
 -* this SALU:  <alus.SALU object at 0x7fc4441abca0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)-(26)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'true', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(1)', 'update_hi_2_value': '(ipv4.p_seen00)', 'update_lo_1_value': '(ipv4.p_seen00)-(2)', 'update_lo_2_value': '(ipv4.p_ttl)', 'condition_hi': '(((0-ipv4.p_seen00)-alu_hi)+1)<0', 'condition_lo': '(ipv4.p_ttl-alu_lo) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p__br_tmp5)+(alu_hi)', 'update_hi_2_value': '(alu_lo)-(0)', 'update_lo_1_value': '1', 'update_lo_2_value': '(1)-(alu_lo)', 'condition_hi': '(0+alu_lo)>0', 'condition_lo': '(((0-ipv4.p__br_tmp5)-alu_hi)+2)==0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)-(26)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'true', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(1)', 'update_hi_2_value': '(ipv4.p_seen00)', 'update_lo_1_value': '(ipv4.p_seen00)-(2)', 'update_lo_2_value': '(ipv4.p_ttl)', 'condition_hi': '(((0-ipv4.p_seen00)-alu_hi)+1)<0', 'condition_lo': '(ipv4.p_ttl-alu_lo) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p__br_tmp5)+(alu_hi)', 'update_hi_2_value': '(alu_lo)-(0)', 'update_lo_1_value': '1', 'update_lo_2_value': '(1)-(alu_lo)', 'condition_hi': '(0+alu_lo)>0', 'condition_lo': '(((0-ipv4.p__br_tmp5)-alu_hi)+2)==0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}], [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_ttl : 32 (signed);   
        p_rdata : 32 (signed);   
        p_id0 : 32 (signed);   
        p_seen00 : 32 (signed);   
        p__br_tmp5 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (2)-(0);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : 1;
    update_hi_1_predicate     : true;
    update_hi_1_value         : (alu_lo)-(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(26);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_seen00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (((0-ipv4.p__br_tmp5)-alu_hi)+2)==0;
    condition_hi              : (0+alu_lo)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : 1;
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (1)-(alu_lo);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (ipv4.p__br_tmp5)+(alu_hi);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (alu_lo)-(0);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (ipv4.p_ttl-alu_lo) !=0;
    condition_hi              : (((0-ipv4.p_seen00)-alu_hi)+1)<0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (ipv4.p_seen00)-(2);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (ipv4.p_ttl);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (1);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (ipv4.p_seen00);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    modify_field(ipv4.p_id0, ipv4.p_rdata);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 6.7992682456970215 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_6. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp9 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp11 = p_seen00==0;

lhs p__br_tmp11 rhs p_seen00==0
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp11 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp11 ? (1) : (p_seen00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_seen00']
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp11 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp11 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
RAW p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
RAW p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
RAW p__br_tmp11 = p_seen00==0; p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp11 = p_seen00==0; p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f9764e78760>, 'write': <dependencyGraph.Statement object at 0x7f9764e783d0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f9764e788b0>, 'write': <dependencyGraph.Statement object at 0x7f9764e78340>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f9764e3e700>, 'write': <dependencyGraph.Statement object at 0x7f9764e786d0>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f9764e78760>, 'write': <dependencyGraph.Statement object at 0x7f9764e783d0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f9764e788b0>, 'write': <dependencyGraph.Statement object at 0x7f9764e78340>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f9764e3e700>, 'write': <dependencyGraph.Statement object at 0x7f9764e786d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp11 = p_seen00==0 stmts len 1
p__br_tmp11 = p_seen00==0;
v p_seen01 = p__br_tmp11 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9764e78d60>, <dependencyGraph.Codelet object at 0x7f9764e78ee0>, <dependencyGraph.Codelet object at 0x7f9764e78ca0>, <dependencyGraph.Codelet object at 0x7f9764e78e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp11 = p_seen00==0;
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9764e78ca0>, <dependencyGraph.Codelet object at 0x7f9764e78ee0>, <dependencyGraph.Codelet object at 0x7f9764e78d60>}
total number of nodes created:  4
state vars {'ttl_change', 'seen', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp9'}
elements in v_outputs:  {'p__br_tmp9'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp9'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp11', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp9', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp9'}
   - createing a node for flank  p__br_tmp9
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp11'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp11'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp11'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp11 = p_seen00==0
2   p_seen01 = p__br_tmp11 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp11 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp11', 'p_seen00']
 state vars:  ['seen']
p__br_tmp11  not in state vars
 statement:  p__br_tmp11 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00', 'p__br_tmp11'}
   - createing a node for flank  p__br_tmp11
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out
Stored read, write flank variables
{'p_seen00', 'p_ttl_change00', 'p_last_ttl02', 'p_last_ttl00', 'p_seen01', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  5
pred_stmt:  p__br_tmp11 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp11', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl', 'p_seen00'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp11 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp11 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f9764e2d280>]
resultant component: 
p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp11  into node  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
pred rhs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
comp inputs:  ['ttl_change', 'p__br_tmp11', 'p__br_tmp9']
other inputs:  {'ttl_change', 'p__br_tmp11'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp11 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['ttl_change', 'p__br_tmp11', 'p__br_tmp9']
other inputs:  {'ttl_change', 'p__br_tmp9'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02']
 node inputs:  ['ttl_change', 'p__br_tmp11', 'p__br_tmp9']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['ttl_change', 'p__br_tmp11', 'p__br_tmp9']
redundant outputs ['p_last_ttl02', 'p_last_ttl00', 'p_last_ttl01']
state_var ['last_ttl']
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02']
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'ttl_change', 'p_ttl']
		| merged state vars:  {'ttl_change', 'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl00', 'p_last_ttl02']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f9764e78760>, <dependencyGraph.Statement object at 0x7f9764e78670>, <dependencyGraph.Statement object at 0x7f9764e786a0>, <dependencyGraph.Statement object at 0x7f9764e783d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
resultant component: 
p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl00', 'p_last_ttl02']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f9764e78760>, <dependencyGraph.Statement object at 0x7f9764e78670>, <dependencyGraph.Statement object at 0x7f9764e786a0>, <dependencyGraph.Statement object at 0x7f9764e783d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp9', 'p_ttl_change00', 'p_last_ttl02', 'p__br_tmp11', 'p_last_ttl00', 'p_ttl_change01', 'p_ttl_change02', 'p_last_ttl01']
state_var ['last_ttl', 'ttl_change']
		* new component :  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
		* new component outputs :  ['ttl_change', 'last_ttl']
		* state_pkt_fields of new component:  ['p_last_ttl00', 'p_last_ttl02', 'p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'last_ttl']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
redundant outputs ['p_seen01', 'p__br_tmp11']
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['last_ttl', 'ttl_change']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['ttl_change', 'p_ttl', 'last_ttl']
		| merged state vars:  {'ttl_change', 'seen', 'last_ttl'}
		| merged stateless vars:  ['p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'last_ttl', 'ttl_change'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'p_seen01', 'seen', 'p__br_tmp11']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_seen00;

curr line: 	int p_seen01;

curr line: 	bit p__br_tmp11;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp11 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp11;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp11;

> found out variable:  p__br_tmp11
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp11
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p__br_tmp11
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 17 21 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 17, 21, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 2 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+2)<0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 2) < 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 2 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+2)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 2) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_seen00;

curr line: 	int p_seen01;

curr line: 	bit p__br_tmp11;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp11 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_seen00;

 > FOUND OUT LINE : 	_out[2] = p_seen00;

> found out variable:  p_seen00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_seen00
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p_seen00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 0 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 0, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 26 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 26, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 1 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp9;

curr line: 	int p_ttl_change00;

curr line: 	int p_last_ttl02;

curr line: 	bit p__br_tmp11;

curr line: 	int p_last_ttl00;

curr line: 	int p_ttl_change01;

curr line: 	int p_ttl_change02;

curr line: 	int p_last_ttl01;

curr line: 	p__br_tmp11 = p_seen00==0;

curr line: 	p_last_ttl00 = last_ttl;

curr line: 	p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

curr line: 	p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);

curr line: 	p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);

curr line: 	last_ttl = p_last_ttl02;

curr line: 	p_ttl_change00 = ttl_change;

curr line: 	p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);

curr line: 	p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);

curr line: 	ttl_change = p_ttl_change02;

curr line: 	_out[0] = last_ttl;

 > FOUND OUT LINE : 	_out[0] = last_ttl;

curr line: 	_out[1] = ttl_change;

 > FOUND OUT LINE : 	_out[1] = ttl_change;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p_seen00  metadata_hi= p_ttl  register_lo= last_ttl  register_hi= ttl_change  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_hi - register_lo ) != 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_hi-register_lo)!=0
    ( line =    bit condition_hi_s55 = (metadata_hi - register_lo_0) != 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - 0 ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-0)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - 0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_5_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_5_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_5_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_5_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_5_stateless_p_id0_bnd_1.sk.out
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5'}
>>>>>>>>>>ALU1 outputs ['p_seen00']
 *** found stateful dependencies between  1  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  1  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 80 rows, 54 columns and 166 nonzeros
Model fingerprint: 0x818fb638
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 93 rows, 51 columns, 224 nonzeros
Variable types: 0 continuous, 51 integer (46 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f9764e2df40>, <alus.SALU object at 0x7f9764e2de20>, <alus.SALU object at 0x7f9764e2da60>, <alus.ALU object at 0x7f9764e2dd60>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f9764e2dd60>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f9764e2df40>, 0), (<alus.SALU object at 0x7f9764e2de20>, 1), (<alus.SALU object at 0x7f9764e2da60>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp11
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f9764e2df40>
 -* this SALU:  <alus.SALU object at 0x7f9764e2de20>
 -* this SALU:  <alus.SALU object at 0x7f9764e2da60>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f9764e2df40>
 -* this SALU:  <alus.SALU object at 0x7f9764e2de20>
 -* this SALU:  <alus.SALU object at 0x7f9764e2da60>
salu_configs:  [[1, 1, 0], [0, 0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp11', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(1)-(alu_lo)', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)<0', 'condition_lo': '((0-alu_lo)+2) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(2)-(0)', 'update_hi_2_value': '(alu_lo)', 'update_lo_1_value': '(alu_lo)-(26)', 'update_lo_2_value': '(1)-(0)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p_seen00)+(0)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_ttl)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_ttl)+(0)', 'condition_hi': '(ipv4.p_ttl-alu_lo) !=0', 'condition_lo': '(((0-ipv4.p_seen00)-0)+1)>0', 'update_hi_1_predicate': '(condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp11', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(1)-(alu_lo)', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)<0', 'condition_lo': '((0-alu_lo)+2) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(2)-(0)', 'update_hi_2_value': '(alu_lo)', 'update_lo_1_value': '(alu_lo)-(26)', 'update_lo_2_value': '(1)-(0)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p_seen00)+(0)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_ttl)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_ttl)+(0)', 'condition_hi': '(ipv4.p_ttl-alu_lo) !=0', 'condition_lo': '(((0-ipv4.p_seen00)-0)+1)>0', 'update_hi_1_predicate': '(condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}], [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]]
[[1, 1, 0], [0, 0, 1]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_seen00 : 32 (signed);   
        p_id0 : 32 (signed);   
        p_rdata : 32 (signed);   
        p__br_tmp11 : 32 (signed);   
        p_ttl : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+2) !=0;
    condition_hi              : ((0-alu_lo)+2)<0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (17)+(21);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (1)-(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp11;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (alu_lo)-(26);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : (1)-(0);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (2)-(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_seen00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
  

  
    
  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (((0-ipv4.p_seen00)-0)+1)>0;
    condition_hi              : (ipv4.p_ttl-alu_lo) !=0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (ipv4.p_ttl)+(alu_lo);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (ipv4.p_ttl)+(0);
    update_hi_1_predicate     : (condition_lo);
    update_hi_1_value         : (ipv4.p_seen00)+(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_2_action () {
    test_stateful_alu_1_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 1
table test_stateful_alu_1_2_table {
    actions {
        test_stateful_alu_1_2_action;
    }
    default_action: test_stateful_alu_1_2_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    modify_field(ipv4.p_id0, ipv4.p_rdata);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
      
    
      
        
      
      
        
      
        
      
        
          apply(test_stateful_alu_1_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 4.077666759490967 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_7. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp6 ? (0) : (p_ttl_change00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change00']
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);

lhs p__br_tmp7 rhs (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_seen01', 'p_last_ttl01', 'p_ttl']
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl_change01', 'p_ttl_change01']
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
finding dependencies
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p_seen00 = seen; p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
RAW p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
RAW p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f8ba461b700>, 'write': <dependencyGraph.Statement object at 0x7f8ba4654100>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f8ba4654760>, 'write': <dependencyGraph.Statement object at 0x7f8ba46543d0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f8ba46548b0>, 'write': <dependencyGraph.Statement object at 0x7f8ba4654340>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f8ba461b700>, 'write': <dependencyGraph.Statement object at 0x7f8ba4654100>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f8ba4654760>, 'write': <dependencyGraph.Statement object at 0x7f8ba46543d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f8ba46548b0>, 'write': <dependencyGraph.Statement object at 0x7f8ba4654340>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
v p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) stmts len 1
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
v p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8ba4654df0>, <dependencyGraph.Codelet object at 0x7f8ba4654ee0>, <dependencyGraph.Codelet object at 0x7f8ba4654e80>, <dependencyGraph.Codelet object at 0x7f8ba4654d60>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8ba4654e80>, <dependencyGraph.Codelet object at 0x7f8ba4654ee0>, <dependencyGraph.Codelet object at 0x7f8ba4654df0>}
total number of nodes created:  4
state vars {'seen', 'last_ttl', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp7'}
elements in v_outputs:  {'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp7'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
2   p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
3   p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp7', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_seen01', 'p_last_ttl01', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp7'}
   - createing a node for flank  p__br_tmp7
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6', 'p_seen01'}
p_seen00  is read flank
p_seen01  is write flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6', 'p_seen01'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp6'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen01    read_flanks:  []   write_flanks:  ['p_seen01']
flanks:  {'p_seen00', 'p_seen01', 'p__br_tmp6'}
   - createing a node for flank  p_seen01
   - createing a node for flank  p__br_tmp6
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out
Stored read, write flank variables
{'p_last_ttl00', 'p_seen01', 'p_last_ttl02', 'p_seen00', 'p_ttl_change02', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_4 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
pred_stmt:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
pred rhs:  ['p__br_tmp6', 'p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_seen01', 'p_ttl']
other inputs:  {'p__br_tmp6', 'last_ttl', 'p_seen00', 'p_ttl'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
 | b:  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);  with *************************
[<dependencyGraph.Statement object at 0x7f8ba460c2b0>]
resultant component: 
p_seen01 = p__br_tmp6 ? (1) : (p_seen00); p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00); p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 problematic inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
 problematic state vars:  ['last_ttl']
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_8. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f4e18a77760>, 'write': <dependencyGraph.Statement object at 0x7f4e18a773d0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f4e18a3d700>, 'write': <dependencyGraph.Statement object at 0x7f4e18a776d0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f4e18a778b0>, 'write': <dependencyGraph.Statement object at 0x7f4e18a77340>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f4e18a77760>, 'write': <dependencyGraph.Statement object at 0x7f4e18a773d0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f4e18a3d700>, 'write': <dependencyGraph.Statement object at 0x7f4e18a776d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f4e18a778b0>, 'write': <dependencyGraph.Statement object at 0x7f4e18a77340>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4e18a77d60>, <dependencyGraph.Codelet object at 0x7f4e18a77ee0>, <dependencyGraph.Codelet object at 0x7f4e18a77ca0>, <dependencyGraph.Codelet object at 0x7f4e18a77e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4e18a77ca0>, <dependencyGraph.Codelet object at 0x7f4e18a77ee0>, <dependencyGraph.Codelet object at 0x7f4e18a77d60>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp6'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00', 'p__br_tmp6'}
   - createing a node for flank  p__br_tmp6
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out
Stored read, write flank variables
{'p_seen00', 'p_last_ttl00', 'p_ttl_change02', 'p_seen01', 'p_last_ttl02', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  5
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl', 'p_seen00'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f4e18a2c280>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
pred rhs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'ttl_change', 'p__br_tmp6'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'ttl_change', 'p__br_tmp5'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
redundant outputs ['p_last_ttl00', 'p_last_ttl02', 'p_last_ttl01']
state_var ['last_ttl']
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02']
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'p_ttl', 'ttl_change']
		| merged state vars:  {'ttl_change', 'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f4e18a77760>, <dependencyGraph.Statement object at 0x7f4e18a77670>, <dependencyGraph.Statement object at 0x7f4e18a776a0>, <dependencyGraph.Statement object at 0x7f4e18a773d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f4e18a77760>, <dependencyGraph.Statement object at 0x7f4e18a77670>, <dependencyGraph.Statement object at 0x7f4e18a776a0>, <dependencyGraph.Statement object at 0x7f4e18a773d0>]
 --my stateful vars:  ['last_ttl']
 --their stateful vars:  ['ttl_change']
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_last_ttl00', 'p_ttl_change02', 'p_last_ttl02', 'p__br_tmp6', 'p_ttl_change00', 'p__br_tmp5', 'p_last_ttl01']
state_var ['last_ttl', 'ttl_change']
		* new component :  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
		* new component outputs :  ['last_ttl', 'ttl_change']
		* state_pkt_fields of new component:  ['p_last_ttl02', 'p_last_ttl00', 'p_ttl_change00', 'p_ttl_change02']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['last_ttl', 'ttl_change']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'ttl_change']
redundant outputs ['p_seen01', 'p__br_tmp6']
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['last_ttl', 'ttl_change']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['last_ttl', 'p_ttl', 'ttl_change']
		| merged state vars:  {'ttl_change', 'last_ttl', 'seen'}
		| merged stateless vars:  ['p_ttl']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'last_ttl', 'ttl_change', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen01', 'p_seen00', 'seen', 'p__br_tmp6']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_seen01;

curr line: 	int p_seen00;

curr line: 	bit p__br_tmp6;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp6;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp6;

> found out variable:  p__br_tmp6
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp6
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p__br_tmp6
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 17 21 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 17, 21, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 2 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+2)<0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 2) < 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 2 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+2)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 2) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_seen01;

curr line: 	int p_seen00;

curr line: 	bit p__br_tmp6;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_seen00;

 > FOUND OUT LINE : 	_out[2] = p_seen00;

> found out variable:  p_seen00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_seen00
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p_seen00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 7 15 20 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 15, 20, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  true
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'ttl_change', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl', 'ttl_change']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_ttl_change01;

curr line: 	int p_last_ttl00;

curr line: 	int p_ttl_change02;

curr line: 	int p_last_ttl02;

curr line: 	bit p__br_tmp6;

curr line: 	int p_ttl_change00;

curr line: 	bit p__br_tmp5;

curr line: 	int p_last_ttl01;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_last_ttl00 = last_ttl;

curr line: 	p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

curr line: 	p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

curr line: 	p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

curr line: 	last_ttl = p_last_ttl02;

curr line: 	p_ttl_change00 = ttl_change;

curr line: 	p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

curr line: 	p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

curr line: 	ttl_change = p_ttl_change02;

curr line: 	_out[0] = last_ttl;

 > FOUND OUT LINE : 	_out[0] = last_ttl;

curr line: 	_out[1] = ttl_change;

 > FOUND OUT LINE : 	_out[1] = ttl_change;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p_seen00  metadata_hi= p_ttl  register_lo= last_ttl  register_hi= ttl_change  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 31 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 31, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi 5 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 5, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - 0 ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-0)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - 0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_hi ) + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_hi)+register_lo)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_hi) + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_5_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_5_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_5_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_5_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_5_stateless_p_id0_bnd_1.sk.out
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5'}
>>>>>>>>>>ALU1 outputs ['p_seen00']
 *** found stateful dependencies between  1  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  1  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 80 rows, 54 columns and 166 nonzeros
Model fingerprint: 0x818fb638
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 93 rows, 51 columns, 224 nonzeros
Variable types: 0 continuous, 51 integer (46 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f4e18a2cf40>, <alus.SALU object at 0x7f4e18a2ce20>, <alus.SALU object at 0x7f4e18a2ca60>, <alus.ALU object at 0x7f4e18a2cdc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f4e18a2cdc0>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f4e18a2cf40>, 0), (<alus.SALU object at 0x7f4e18a2ce20>, 1), (<alus.SALU object at 0x7f4e18a2ca60>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp6
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '31'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '31'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f4e18a2cf40>
 -* this SALU:  <alus.SALU object at 0x7f4e18a2ce20>
 -* this SALU:  <alus.SALU object at 0x7f4e18a2ca60>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f4e18a2cf40>
 -* this SALU:  <alus.SALU object at 0x7f4e18a2ce20>
 -* this SALU:  <alus.SALU object at 0x7f4e18a2ca60>
salu_configs:  [[1, 1, 0], [0, 0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp6', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(1)-(alu_lo)', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)<0', 'condition_lo': '((0-alu_lo)+2) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)-(26)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'true', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '(ipv4.p_seen00)+(0)', 'update_lo_1_value': '(ipv4.p_ttl)', 'update_lo_2_value': '(ipv4.p_ttl)', 'condition_hi': '(((0-ipv4.p_seen00)-0)+1)>0', 'condition_lo': '((0-ipv4.p_ttl)+alu_lo)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp6', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(1)-(alu_lo)', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)<0', 'condition_lo': '((0-alu_lo)+2) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)-(26)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'true', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '(ipv4.p_seen00)+(0)', 'update_lo_1_value': '(ipv4.p_ttl)', 'update_lo_2_value': '(ipv4.p_ttl)', 'condition_hi': '(((0-ipv4.p_seen00)-0)+1)>0', 'condition_lo': '((0-ipv4.p_ttl)+alu_lo)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '31'}], [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': 'ipv4.p_rdata', 'result': 'ipv4.p_id0', 'immediate_operand': '31'}]]
[[1, 1, 0], [0, 0, 1]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_seen00 : 32 (signed);   
        p_id0 : 32 (signed);   
        p_rdata : 32 (signed);   
        p__br_tmp6 : 32 (signed);   
        p_ttl : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+2) !=0;
    condition_hi              : ((0-alu_lo)+2)<0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (17)+(21);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (1)-(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp6;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (2)-(0);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : 1;
    update_hi_1_predicate     : true;
    update_hi_1_value         : (alu_lo)-(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(26);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_seen00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
  

  
    
  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p_ttl)+alu_lo)==0;
    condition_hi              : (((0-ipv4.p_seen00)-0)+1)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p_ttl);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (ipv4.p_ttl);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (1)+(alu_hi);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (ipv4.p_seen00)+(0);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_2_action () {
    test_stateful_alu_1_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 1
table test_stateful_alu_1_2_table {
    actions {
        test_stateful_alu_1_2_action;
    }
    default_action: test_stateful_alu_1_2_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    modify_field(ipv4.p_id0, ipv4.p_rdata);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
      
    
      
        
      
      
        
      
        
      
        
          apply(test_stateful_alu_1_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 4.2605040073394775 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_9. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp3 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp4 = p_seen00==0;

lhs p__br_tmp4 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp4 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp4 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_seen00']
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp4 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp4 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
RAW p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
RAW p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
RAW p__br_tmp4 = p_seen00==0; p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp4 = p_seen00==0; p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fa1ab30c760>, 'write': <dependencyGraph.Statement object at 0x7fa1ab30c3d0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fa1ab2d2700>, 'write': <dependencyGraph.Statement object at 0x7fa1ab30c6d0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fa1ab30c8b0>, 'write': <dependencyGraph.Statement object at 0x7fa1ab30c340>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fa1ab30c760>, 'write': <dependencyGraph.Statement object at 0x7fa1ab30c3d0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fa1ab2d2700>, 'write': <dependencyGraph.Statement object at 0x7fa1ab30c6d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fa1ab30c8b0>, 'write': <dependencyGraph.Statement object at 0x7fa1ab30c340>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp4 = p_seen00==0 stmts len 1
p__br_tmp4 = p_seen00==0;
v p_seen01 = p__br_tmp4 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa1ab30cd60>, <dependencyGraph.Codelet object at 0x7fa1ab30cee0>, <dependencyGraph.Codelet object at 0x7fa1ab30cca0>, <dependencyGraph.Codelet object at 0x7fa1ab30ce80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp4 = p_seen00==0;
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa1ab30cca0>, <dependencyGraph.Codelet object at 0x7fa1ab30cee0>, <dependencyGraph.Codelet object at 0x7fa1ab30cd60>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp3'}
elements in v_outputs:  {'p__br_tmp3'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp3'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp4', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp3', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp3'}
   - createing a node for flank  p__br_tmp3
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p__br_tmp4', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp4', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp4'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp4 = p_seen00==0
2   p_seen01 = p__br_tmp4 ? (1) : (p_seen00)
3   seen = p_seen01
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp4 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp4', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p__br_tmp4', 'p_seen00'}
   - createing a node for flank  p_seen00
   - createing a node for flank  p__br_tmp4
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out
Stored read, write flank variables
{'p_ttl_change02', 'p_last_ttl02', 'p_last_ttl00', 'p_ttl_change00', 'p_seen01', 'p_seen00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
number of nodes on SCC_GRAPH:  5
pred_stmt:  p__br_tmp4 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp4', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl', 'p_seen00'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp4 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp4 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fa1ab30c5b0>]
resultant component: 
p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp4  into node  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp4 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['ttl_change', 'p__br_tmp3', 'p__br_tmp4']
other inputs:  {'ttl_change', 'p__br_tmp3'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
pred rhs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
comp inputs:  ['ttl_change', 'p__br_tmp3', 'p__br_tmp4']
other inputs:  {'p__br_tmp4', 'ttl_change'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change02', 'p_ttl_change01', 'ttl_change', 'p_ttl_change00']
 node inputs:  ['ttl_change', 'p__br_tmp3', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['ttl_change', 'p__br_tmp3', 'p__br_tmp4']
redundant outputs ['p_seen01', 'p_seen00']
state_var ['seen']
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['ttl_change', 'p__br_tmp3']
		| merged state vars:  {'ttl_change', 'seen'}
		| merged stateless vars:  ['p__br_tmp3']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7fa1ab30c760>, <dependencyGraph.Statement object at 0x7fa1ab30c670>, <dependencyGraph.Statement object at 0x7fa1ab30c6a0>, <dependencyGraph.Statement object at 0x7fa1ab30c3d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['ttl_change']
resultant component: 
p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['seen', 'ttl_change', 'p__br_tmp3']
 ~~~| state var:  ['seen', 'ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7fa1ab30c760>, <dependencyGraph.Statement object at 0x7fa1ab30c670>, <dependencyGraph.Statement object at 0x7fa1ab30c6a0>, <dependencyGraph.Statement object at 0x7fa1ab30c3d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['ttl_change']
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change02', 'p__br_tmp4', 'p_ttl_change01', 'p_ttl_change00', 'p_seen01', 'p_seen00']
state_var ['seen', 'ttl_change']
		* new component :  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['seen', 'p__br_tmp3', 'ttl_change']
		* new component outputs :  ['ttl_change', 'seen']
		* state_pkt_fields of new component:  ['p_seen01', 'p_seen00', 'p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p__br_tmp4', 'p_last_ttl02', 'p_last_ttl00', 'p__br_tmp3', 'p_last_ttl01', 'last_ttl']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl']
redundant outputs ['p__br_tmp4', 'p_seen01']
state_var ['seen']
adj_inputs []
redundant outputs ['p__br_tmp4', 'p_last_ttl02', 'p_last_ttl00', 'p__br_tmp3', 'p_last_ttl01']
state_var ['last_ttl']
     | merged inputs:  ['p_ttl', 'last_ttl']
		| merged state vars:  {'seen', 'last_ttl'}
		| merged stateless vars:  ['p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 | b:  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;  with *************************
[<dependencyGraph.Statement object at 0x7fa1ab30c5b0>, <dependencyGraph.Statement object at 0x7fa1ab2d2700>, <dependencyGraph.Statement object at 0x7fa1ab30c1c0>, <dependencyGraph.Statement object at 0x7fa1ab30c730>, <dependencyGraph.Statement object at 0x7fa1ab30c310>, <dependencyGraph.Statement object at 0x7fa1ab30c6d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['last_ttl']
resultant component: 
p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01; p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'seen', 'p_ttl']
 ~~~| state var:  ['seen', 'last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 0, 'register_lo': 'last_ttl', 'register_hi': 'seen'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'seen']
 node inputs:  ['seen', 'p__br_tmp3', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p_seen00']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'last_ttl', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp4;

curr line: 	int p_seen01;

curr line: 	int p_seen00;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp4 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_seen00;

 > FOUND OUT LINE : 	_out[2] = p_seen00;

> found out variable:  p_seen00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_seen00
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p_seen00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp4;

curr line: 	int p_last_ttl02;

curr line: 	int p_last_ttl00;

curr line: 	bit p__br_tmp3;

curr line: 	int p_last_ttl01;

curr line: 	p__br_tmp4 = p_seen00==0;

curr line: 	p_last_ttl00 = last_ttl;

curr line: 	p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

curr line: 	p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);

curr line: 	p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);

curr line: 	last_ttl = p_last_ttl02;

curr line: 	_out[0] = last_ttl;

 > FOUND OUT LINE : 	_out[0] = last_ttl;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp3;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp3;

> found out variable:  p__br_tmp3
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp3
Constructing new SALU: id= 1  metadata_lo= p_seen00  metadata_hi= p_ttl  register_lo= last_ttl  register_hi= 0  output_dst= p__br_tmp3
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 0 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi 31 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 31, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_lo ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_lo)!=0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_lo_0) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + 2 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+2)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + 2) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['seen', 'ttl_change', 'p__br_tmp3']
 ~~~| state var:  ['seen', 'ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_ttl_change02;

curr line: 	bit p__br_tmp4;

curr line: 	int p_ttl_change01;

curr line: 	int p_ttl_change00;

curr line: 	int p_seen01;

curr line: 	int p_seen00;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp4 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	p_ttl_change00 = ttl_change;

curr line: 	p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);

curr line: 	p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);

curr line: 	ttl_change = p_ttl_change02;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = ttl_change;

 > FOUND OUT LINE : 	_out[1] = ttl_change;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp3  metadata_hi= 0  register_lo= seen  register_hi= ttl_change  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 1 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 1, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 25 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 25, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 3 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+1)!=0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 1) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_5_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_5_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_5_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_5_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_5_stateless_p_id0_bnd_1.sk.out
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_5'}
>>>>>>>>>>ALU1 outputs ['p_seen00']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 80 rows, 54 columns and 166 nonzeros
Model fingerprint: 0xd068d8d8
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 93 rows, 51 columns, 224 nonzeros
Variable types: 0 continuous, 51 integer (46 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7fa1ab2c3f10>, <alus.SALU object at 0x7fa1ab2c3a00>, <alus.SALU object at 0x7fa1ab2c3ca0>, <alus.ALU object at 0x7fa1ab2c3a30>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fa1ab2c3a30>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7fa1ab2c3f10>, 0), (<alus.SALU object at 0x7fa1ab2c3a00>, 1), (<alus.SALU object at 0x7fa1ab2c3ca0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp3
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp3
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp3
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fa1ab2c3f10>
 -* this SALU:  <alus.SALU object at 0x7fa1ab2c3a00>
 -* this SALU:  <alus.SALU object at 0x7fa1ab2c3ca0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fa1ab2c3f10>
 -* this SALU:  <alus.SALU object at 0x7fa1ab2c3a00>
 -* this SALU:  <alus.SALU object at 0x7fa1ab2c3ca0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '1', 'update_hi_2_value': '(3)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '((0-alu_lo)+1)==0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp3', 'update_hi_1_value': '(ipv4.p_seen00)', 'update_hi_2_value': '(0)+(1)', 'update_lo_1_value': '(ipv4.p_ttl)', 'update_lo_2_value': '(ipv4.p_ttl)', 'condition_hi': '((0-ipv4.p_ttl)+alu_lo) !=0', 'condition_lo': '((0-ipv4.p_seen00)+2)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) or ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p__br_tmp3)+(alu_hi)', 'update_hi_2_value': '(alu_lo)', 'update_lo_1_value': '(25)-(4)', 'update_lo_2_value': '(3)-(2)', 'condition_hi': '(((0-ipv4.p__br_tmp3)+alu_hi)+1) !=0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_lo)', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '1', 'update_hi_2_value': '(3)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '((0-alu_lo)+1)==0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp3', 'update_hi_1_value': '(ipv4.p_seen00)', 'update_hi_2_value': '(0)+(1)', 'update_lo_1_value': '(ipv4.p_ttl)', 'update_lo_2_value': '(ipv4.p_ttl)', 'condition_hi': '((0-ipv4.p_ttl)+alu_lo) !=0', 'condition_lo': '((0-ipv4.p_seen00)+2)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) or ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p__br_tmp3)+(alu_hi)', 'update_hi_2_value': '(alu_lo)', 'update_lo_1_value': '(25)-(4)', 'update_lo_2_value': '(3)-(2)', 'condition_hi': '(((0-ipv4.p__br_tmp3)+alu_hi)+1) !=0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}], [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_ttl : 32 (signed);   
        p_rdata : 32 (signed);   
        p_id0 : 32 (signed);   
        p__br_tmp3 : 32 (signed);   
        p_seen00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+1)==0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (2)-(0);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : 1;
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : 1;
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (3);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_seen00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-alu_lo)+1)>0;
    condition_hi              : (((0-ipv4.p__br_tmp3)+alu_hi)+1) !=0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (25)-(4);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (3)-(2);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (ipv4.p__br_tmp3)+(alu_hi);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (alu_lo);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p_seen00)+2)>0;
    condition_hi              : ((0-ipv4.p_ttl)+alu_lo) !=0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (ipv4.p_ttl);
    update_lo_2_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_2_value         : (ipv4.p_ttl);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (ipv4.p_seen00);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (0)+(1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp3;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    modify_field(ipv4.p_id0, ipv4.p_rdata);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 10.641374826431274 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_10. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  True
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f64da3f8700>, 'write': <dependencyGraph.Statement object at 0x7f64da4316d0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f64da431760>, 'write': <dependencyGraph.Statement object at 0x7f64da4313d0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f64da4318b0>, 'write': <dependencyGraph.Statement object at 0x7f64da431340>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f64da3f8700>, 'write': <dependencyGraph.Statement object at 0x7f64da4316d0>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f64da431760>, 'write': <dependencyGraph.Statement object at 0x7f64da4313d0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f64da4318b0>, 'write': <dependencyGraph.Statement object at 0x7f64da431340>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f64da431d60>, <dependencyGraph.Codelet object at 0x7f64da431ee0>, <dependencyGraph.Codelet object at 0x7f64da431ca0>, <dependencyGraph.Codelet object at 0x7f64da431e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f64da431ca0>, <dependencyGraph.Codelet object at 0x7f64da431ee0>, <dependencyGraph.Codelet object at 0x7f64da431d60>}
total number of nodes created:  4
state vars {'last_ttl', 'ttl_change', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['last_ttl']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5'}
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
flanks:  {'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
 -------------- v_outputs:  {'p__br_tmp6', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp6', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['seen']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp6'}
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  4
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p__br_tmp6', 'p_seen00'}
   - createing a node for flank  p_seen00
   - createing a node for flank  p__br_tmp6
size of SCC graph post-duplicate:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out
Stored read, write flank variables
{'p_last_ttl02', 'p_last_ttl00', 'p_seen01', 'p_seen00', 'p_ttl_change00', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
number of nodes on SCC_GRAPH:  5
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
other inputs:  {'p__br_tmp6', 'last_ttl', 'p_ttl'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['last_ttl', 'p__br_tmp6', 'p_seen00', 'p_ttl']
other inputs:  {'last_ttl', 'p_ttl', 'p_seen00'}
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f64da4315b0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p__br_tmp6 = p_seen00==0
pred rhs:  ['p_seen00']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'ttl_change', 'p__br_tmp5'}
 rhs not in other inputs, continuing...
pred_stmt:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
pred rhs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
comp inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
other inputs:  {'p__br_tmp6', 'ttl_change'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
redundant outputs ['p_seen01', 'p_seen00']
state_var ['seen']
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['ttl_change', 'p__br_tmp5']
		| merged state vars:  {'ttl_change', 'seen'}
		| merged stateless vars:  ['p__br_tmp5']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f64da431760>, <dependencyGraph.Statement object at 0x7f64da431670>, <dependencyGraph.Statement object at 0x7f64da4316a0>, <dependencyGraph.Statement object at 0x7f64da4313d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['ttl_change']
resultant component: 
p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['seen', 'ttl_change', 'p__br_tmp5']
 ~~~| state var:  ['seen', 'ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;  with *************************
[<dependencyGraph.Statement object at 0x7f64da431760>, <dependencyGraph.Statement object at 0x7f64da431670>, <dependencyGraph.Statement object at 0x7f64da4316a0>, <dependencyGraph.Statement object at 0x7f64da4313d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['ttl_change']
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_seen01', 'p_seen00', 'p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02']
state_var ['seen', 'ttl_change']
		* new component :  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['seen', 'p__br_tmp5', 'ttl_change']
		* new component outputs :  ['seen', 'ttl_change']
		* state_pkt_fields of new component:  ['p_seen01', 'p_seen00', 'p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p__br_tmp6', 'p_last_ttl02', 'last_ttl', 'p_last_ttl00', 'p__br_tmp5', 'p_last_ttl01']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl']
redundant outputs ['p__br_tmp6', 'p_seen01']
state_var ['seen']
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_last_ttl02', 'p_last_ttl00', 'p__br_tmp5', 'p_last_ttl01']
state_var ['last_ttl']
     | merged inputs:  ['last_ttl', 'p_ttl']
		| merged state vars:  {'last_ttl', 'seen'}
		| merged stateless vars:  ['p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 | b:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component a:  ['p_seen01', 'p_seen00']
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;  with *************************
[<dependencyGraph.Statement object at 0x7f64da4315b0>, <dependencyGraph.Statement object at 0x7f64da3f8700>, <dependencyGraph.Statement object at 0x7f64da4311c0>, <dependencyGraph.Statement object at 0x7f64da431730>, <dependencyGraph.Statement object at 0x7f64da431310>, <dependencyGraph.Statement object at 0x7f64da4316d0>]
 --my stateful vars:  ['seen']
 --their stateful vars:  ['last_ttl']
resultant component: 
p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'seen', 'p_ttl']
 ~~~| state var:  ['seen', 'last_ttl']
salu_inputs {'metadata_lo': 'p_ttl', 'metadata_hi': 0, 'register_lo': 'last_ttl', 'register_hi': 'seen'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['seen', 'ttl_change']
 node inputs:  ['seen', 'p__br_tmp5', 'ttl_change']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'last_ttl', 'p_ttl', 'p_seen00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_seen01;

curr line: 	int p_seen00;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_seen00;

 > FOUND OUT LINE : 	_out[2] = p_seen00;

> found out variable:  p_seen00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_seen00
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= seen  register_hi= 0  output_dst= p_seen00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 7 15 20 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 15, 20, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  true
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_last_ttl02;

curr line: 	int p_last_ttl00;

curr line: 	bit p__br_tmp5;

curr line: 	int p_last_ttl01;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_last_ttl00 = last_ttl;

curr line: 	p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

curr line: 	p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

curr line: 	p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

curr line: 	last_ttl = p_last_ttl02;

curr line: 	_out[0] = last_ttl;

 > FOUND OUT LINE : 	_out[0] = last_ttl;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 1  metadata_lo= p_seen00  metadata_hi= p_ttl  register_lo= last_ttl  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 2 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 2, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 26 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 26, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - 0 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-0)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - 0) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_hi ) + register_lo ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_hi)+register_lo)!=0
    ( line =    bit condition_lo_s67 = ((0 - metadata_hi) + register_lo_0) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['seen', 'ttl_change', 'p__br_tmp5']
 ~~~| state var:  ['seen', 'ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 'ttl_change'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_seen01;

curr line: 	int p_seen00;

curr line: 	int p_ttl_change01;

curr line: 	int p_ttl_change00;

curr line: 	int p_ttl_change02;

curr line: 	p_seen00 = seen;

curr line: 	p__br_tmp6 = p_seen00==0;

curr line: 	p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

curr line: 	seen = p_seen01;

curr line: 	p_ttl_change00 = ttl_change;

curr line: 	p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

curr line: 	p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

curr line: 	ttl_change = p_ttl_change02;

curr line: 	_out[0] = seen;

 > FOUND OUT LINE : 	_out[0] = seen;

curr line: 	_out[1] = ttl_change;

 > FOUND OUT LINE : 	_out[1] = ttl_change;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= seen  register_hi= ttl_change  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 5 3 2 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(5, 3, 2, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 3 31 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 3, 31, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 0 1 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (0-register_lo)<0
    ( line =    bit condition_hi_s55 = (0 - register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+2)==0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 2) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_5_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_5_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_5_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_5_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_5_stateless_p_id0_bnd_1.sk.out
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_id0_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_5'}
>>>>>>>>>>ALU1 outputs ['p_seen00']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 80 rows, 54 columns and 166 nonzeros
Model fingerprint: 0xd068d8d8
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 93 rows, 51 columns, 224 nonzeros
Variable types: 0 continuous, 51 integer (46 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f64da3e8f10>, <alus.SALU object at 0x7f64da3e8a00>, <alus.SALU object at 0x7f64da3e8ca0>, <alus.ALU object at 0x7f64da3e8a30>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f64da3e8a30>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f64da3e8f10>, 0), (<alus.SALU object at 0x7f64da3e8a00>, 1), (<alus.SALU object at 0x7f64da3e8ca0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p_seen00
p4_codegen: PHV var found for stateful ALU, it is  p_ttl
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f64da3e8f10>
 -* this SALU:  <alus.SALU object at 0x7f64da3e8a00>
 -* this SALU:  <alus.SALU object at 0x7f64da3e8ca0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f64da3e8f10>
 -* this SALU:  <alus.SALU object at 0x7f64da3e8a00>
 -* this SALU:  <alus.SALU object at 0x7f64da3e8ca0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)-(26)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'true', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(2)-(1)', 'update_hi_2_value': '(ipv4.p_seen00)', 'update_lo_1_value': '(ipv4.p_ttl)-(0)', 'update_lo_2_value': '(ipv4.p_ttl)-(alu_hi)', 'condition_hi': '(ipv4.p_seen00-0)==0', 'condition_lo': '((0-ipv4.p_ttl)+alu_lo) !=0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p__br_tmp5)+(alu_hi)', 'update_hi_2_value': '0', 'update_lo_1_value': '1', 'update_lo_2_value': '(0)+(1)', 'condition_hi': '(0-alu_lo)<0', 'condition_lo': '((0-alu_lo)+2)==0', 'update_hi_1_predicate': '(condition_hi) or (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p_seen00', 'update_hi_1_value': '(alu_lo)-(0)', 'update_hi_2_value': '(3)-(26)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'true', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(2)-(1)', 'update_hi_2_value': '(ipv4.p_seen00)', 'update_lo_1_value': '(ipv4.p_ttl)-(0)', 'update_lo_2_value': '(ipv4.p_ttl)-(alu_hi)', 'condition_hi': '(ipv4.p_seen00-0)==0', 'condition_lo': '((0-ipv4.p_ttl)+alu_lo) !=0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p__br_tmp5)+(alu_hi)', 'update_hi_2_value': '0', 'update_lo_1_value': '1', 'update_lo_2_value': '(0)+(1)', 'condition_hi': '(0-alu_lo)<0', 'condition_lo': '((0-alu_lo)+2)==0', 'update_hi_1_predicate': '(condition_hi) or (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}], [{'enable': 0, 'opcode': 0, 'operand0': 'ipv4.p_rdata', 'operand1': '1', 'result': 'ipv4.p_id0', 'immediate_operand': '0'}]]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_ttl : 32 (signed);   
        p_seen00 : 32 (signed);   
        p__br_tmp5 : 32 (signed);   
        p_rdata : 32 (signed);   
        p_id0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (2)-(0);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : 1;
    update_hi_1_predicate     : true;
    update_hi_1_value         : (alu_lo)-(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(26);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_seen00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-alu_lo)+2)==0;
    condition_hi              : (0-alu_lo)<0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : 1;
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (0)+(1);
    update_hi_1_predicate     : (condition_hi) or (condition_lo);
    update_hi_1_value         : (ipv4.p__br_tmp5)+(alu_hi);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : 0;
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p_ttl)+alu_lo) !=0;
    condition_hi              : (ipv4.p_seen00-0)==0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.p_ttl)-(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p_ttl)-(alu_hi);
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : (2)-(1);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (ipv4.p_seen00);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    modify_field(ipv4.p_id0, ipv4.p_rdata);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 5.625091314315796 s
preprocessor time:
