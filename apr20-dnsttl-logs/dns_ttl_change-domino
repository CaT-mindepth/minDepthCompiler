running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_1. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fc097268670>, 'write': <dependencyGraph.Statement object at 0x7fc097268a00>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fc097268d30>, 'write': <dependencyGraph.Statement object at 0x7fc097268c10>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fc097268700>, 'write': <dependencyGraph.Statement object at 0x7fc097268b50>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fc097268670>, 'write': <dependencyGraph.Statement object at 0x7fc097268a00>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fc097268d30>, 'write': <dependencyGraph.Statement object at 0x7fc097268c10>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fc097268700>, 'write': <dependencyGraph.Statement object at 0x7fc097268b50>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc097268520>, <dependencyGraph.Codelet object at 0x7fc096f37df0>, <dependencyGraph.Codelet object at 0x7fc0981cc6d0>, <dependencyGraph.Codelet object at 0x7fc0972682e0>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc097268520>, <dependencyGraph.Codelet object at 0x7fc0981cc6d0>, <dependencyGraph.Codelet object at 0x7fc096f37df0>}
total number of nodes created:  4
state vars {'last_ttl', 'seen', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p__br_tmp6', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp6', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out
Stored read, write flank variables
{'p_ttl_change00', 'p_seen01', 'p_last_ttl02', 'p_last_ttl00', 'p_seen00', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fc0972891f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'last_ttl', 'p_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change00', 'ttl_change', 'p_ttl_change02', 'p_ttl_change01']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['p__br_tmp6', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'ttl_change']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p__br_tmp6', 'p_last_ttl00', 'p_ttl', 'p_seen00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
     | merged inputs:  ['p__br_tmp5', 'p_seen00', 'ttl_change']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p__br_tmp5', 'p_seen00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fc0972891f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp6 = p_seen00==0;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fc0972891f0>]
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change00', 'p__br_tmp6', 'p_ttl_change01', 'p_ttl_change02']
state_var ['ttl_change']
		* new component :  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['ttl_change', 'p__br_tmp5', 'p_seen00']
		* new component outputs :  ['ttl_change']
		* state_pkt_fields of new component:  ['p_ttl_change00', 'p_ttl_change02']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_last_ttl00', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs ['p__br_tmp6', 'p__br_tmp5', 'p_last_ttl01', 'p_last_ttl02']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 | state_pkt_fields of component a:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);  with *************************
[<dependencyGraph.Statement object at 0x7fc097289130>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs ['p__br_tmp6', 'p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'p_seen00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'last_ttl', 'p_last_ttl00', 'p_ttl', 'p_seen00', 'ttl_change'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out/comp_6_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_2', 2: 'comp_0', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  1
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_2', 2: 'comp_0', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xd91540e1
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fc097289b50>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fc097289df0>, 0), (<alus.DominoGenericSALU object at 0x7fc097268b20>, 1), (<alus.DominoGenericSALU object at 0x7fc097289cd0>, 2)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 4)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 2)/*comp_2_..ateful.sk:141*/\n', '  {\n', '    state_0 = 59;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_1 - 0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) != 6)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - 0) > 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) > 3)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 4)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 2)/*comp_2_..ateful.sk:141*/\n', '  {\n', '    state_0 = 59;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_1 - 0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) != 6)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - 0) > 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) > 3)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
Time taken: 6.888941764831543 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_2. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f3b48f167f0>, 'write': <dependencyGraph.Statement object at 0x7f3b48f16580>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f3b48f16160>, 'write': <dependencyGraph.Statement object at 0x7f3b48f162e0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f3b48edc6d0>, 'write': <dependencyGraph.Statement object at 0x7f3b48f16760>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f3b48f167f0>, 'write': <dependencyGraph.Statement object at 0x7f3b48f16580>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f3b48f16160>, 'write': <dependencyGraph.Statement object at 0x7f3b48f162e0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f3b48edc6d0>, 'write': <dependencyGraph.Statement object at 0x7f3b48f16760>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3b48f16d60>, <dependencyGraph.Codelet object at 0x7f3b48f16ee0>, <dependencyGraph.Codelet object at 0x7f3b48f16ca0>, <dependencyGraph.Codelet object at 0x7f3b48f16e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3b48f16ca0>, <dependencyGraph.Codelet object at 0x7f3b48f16ee0>, <dependencyGraph.Codelet object at 0x7f3b48f16d60>}
total number of nodes created:  4
state vars {'ttl_change', 'seen', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out
Stored read, write flank variables
{'p_last_ttl02', 'p_seen00', 'p_ttl_change02', 'p_seen01', 'p_ttl_change00', 'p_last_ttl00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f3b48ece1f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change00', 'ttl_change', 'p_ttl_change02', 'p_ttl_change01']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'p_ttl', 'ttl_change', 'p__br_tmp6', 'p_last_ttl00']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p_ttl', 'p__br_tmp6', 'p_last_ttl00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'ttl_change', 'p__br_tmp5']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp5']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f3b48ece1f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp6 = p_seen00==0;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f3b48ece1f0>]
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00', 'p__br_tmp6']
state_var ['ttl_change']
		* new component :  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['ttl_change', 'p__br_tmp5', 'p_seen00']
		* new component outputs :  ['ttl_change']
		* state_pkt_fields of new component:  ['p_ttl_change00', 'p_ttl_change02']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_seen00', 'p_ttl', 'p_last_ttl00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_seen00', 'p_ttl', 'p_last_ttl00']
redundant outputs ['p_last_ttl01', 'p__br_tmp6', 'p_last_ttl02', 'p__br_tmp5']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);  with *************************
[<dependencyGraph.Statement object at 0x7f3b48ece130>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs ['p_seen01', 'p__br_tmp6']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['last_ttl', 'p_last_ttl00']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'p_last_ttl00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_seen00', 'p_ttl', 'p_last_ttl00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'ttl_change', 'last_ttl', 'p_last_ttl00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out/comp_6_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  1
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xd91540e1
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f3b48eceb20>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f3b48ecedf0>, 0), (<alus.DominoGenericSALU object at 0x7f3b48f16520>, 1), (<alus.DominoGenericSALU object at 0x7f3b48ececd0>, 2)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 10;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) == 17)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - 0) > 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 25);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_1) > 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 31)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) == 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 10;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) == 17)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - 0) > 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 25);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_1) > 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 3;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 31)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) == 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}]}
Time taken: 6.241533517837524 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_3. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp7 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp8 = p_seen00==0;

lhs p__br_tmp8 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp8 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp8 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp8 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_seen00']
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp8 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp8 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
RAW p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
RAW p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
RAW p__br_tmp8 = p_seen00==0; p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp8 = p_seen00==0; p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f5c2fbc47f0>, 'write': <dependencyGraph.Statement object at 0x7f5c2fbc4580>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f5c2fb8a6d0>, 'write': <dependencyGraph.Statement object at 0x7f5c2fbc4760>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f5c2fbc4160>, 'write': <dependencyGraph.Statement object at 0x7f5c2fbc42e0>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f5c2fbc47f0>, 'write': <dependencyGraph.Statement object at 0x7f5c2fbc4580>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f5c2fb8a6d0>, 'write': <dependencyGraph.Statement object at 0x7f5c2fbc4760>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f5c2fbc4160>, 'write': <dependencyGraph.Statement object at 0x7f5c2fbc42e0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp8 = p_seen00==0 stmts len 1
p__br_tmp8 = p_seen00==0;
v p_seen01 = p__br_tmp8 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5c2fbc4d60>, <dependencyGraph.Codelet object at 0x7f5c2fbc4ee0>, <dependencyGraph.Codelet object at 0x7f5c2fbc4ca0>, <dependencyGraph.Codelet object at 0x7f5c2fbc4e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp8 = p_seen00==0;
p_seen01 = p__br_tmp8 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5c2fbc4ee0>, <dependencyGraph.Codelet object at 0x7f5c2fbc4ca0>, <dependencyGraph.Codelet object at 0x7f5c2fbc4d60>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp7'}
elements in v_outputs:  {'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp8', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp7', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp7    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp8'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp8'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp8 = p_seen00==0
2   p_seen01 = p__br_tmp8 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp8 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp8', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp8    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp8 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp8 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out
Stored read, write flank variables
{'p_ttl_change02', 'p_last_ttl02', 'p_ttl_change00', 'p_seen00', 'p_last_ttl00', 'p_seen01'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp8 = p_seen00==0 p_seen01 = p__br_tmp8 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp8 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp8 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f5c2fb7c1f0>]
resultant component: 
p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp8  into node  p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp8 = p_seen00==0;', 'p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change01', 'p_ttl_change02', 'ttl_change', 'p_ttl_change00']
 node inputs:  ['ttl_change', 'p__br_tmp7', 'p__br_tmp8']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['p_ttl', 'p__br_tmp8', 'ttl_change', 'p_seen00', 'p_last_ttl00']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_ttl', 'p__br_tmp8', 'p_seen00', 'p_last_ttl00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp8 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'ttl_change', 'p__br_tmp7']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp7']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp8 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp8 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f5c2fb7c1f0>]
resultant component: 
p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp7', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp7', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp8 = p_seen00==0;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp8 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f5c2fb7c1f0>]
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change02', 'p__br_tmp8', 'p_ttl_change00']
state_var ['ttl_change']
		* new component :  p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['ttl_change', 'p__br_tmp7', 'p_seen00']
		* new component outputs :  ['ttl_change']
		* state_pkt_fields of new component:  ['p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp7']
 node inputs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p_last_ttl02', 'p__br_tmp8', 'p_last_ttl01', 'p__br_tmp7']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 | state_pkt_fields of component a:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);  with *************************
[<dependencyGraph.Statement object at 0x7f5c2fb7c130>]
resultant component: 
p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'ttl_change', 'p__br_tmp7', 'p_seen00']
redundant outputs ['p_seen01', 'p__br_tmp8']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp7', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'ttl_change', 'p__br_tmp7', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_last_ttl00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'ttl_change', 'p__br_tmp7', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'ttl_change', 'p_seen00', 'p_last_ttl00', 'last_ttl', 'p__br_tmp7'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp8 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp7 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp8 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp7 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp8 = p_seen00==0; p_seen01 = p__br_tmp8 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp8 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp7 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp8 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp7', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp7', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out/comp_6_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  1  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0), (1, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0x03375f9e
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f5c2fb7cb20>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f5c2fb7cdf0>, 0), (<alus.DominoGenericSALU object at 0x7f5c2fbc4520>, 1), (<alus.DominoGenericSALU object at 0x7f5c2fb7ccd0>, 2)]
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  1  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(1, 0), (1, 2)], 'stateful_alus': [{'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 0)/*comp_0_..ateful.sk:135*/\n', '  {\n', '    state_0 = pkt_1 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 12;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 4)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 47;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp7', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - 0) == 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 4;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 2, 'operand0': 'p_rdata', 'operand1': '1', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(1, 0), (1, 2)], 'stateful_alus': [{'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 0)/*comp_0_..ateful.sk:135*/\n', '  {\n', '    state_0 = pkt_1 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 12;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 4)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 47;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp7', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) == 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - 0) == 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 4;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_0) < 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 2, 'operand0': 'p_rdata', 'operand1': '1', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '0'}]}
Time taken: 5.131781578063965 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_4. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fd4ceff46d0>, 'write': <dependencyGraph.Statement object at 0x7fd4cf02e760>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fd4cf02e160>, 'write': <dependencyGraph.Statement object at 0x7fd4cf02e2e0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fd4cf02e7f0>, 'write': <dependencyGraph.Statement object at 0x7fd4cf02e580>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fd4ceff46d0>, 'write': <dependencyGraph.Statement object at 0x7fd4cf02e760>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fd4cf02e160>, 'write': <dependencyGraph.Statement object at 0x7fd4cf02e2e0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fd4cf02e7f0>, 'write': <dependencyGraph.Statement object at 0x7fd4cf02e580>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd4cf02ed60>, <dependencyGraph.Codelet object at 0x7fd4cf02eee0>, <dependencyGraph.Codelet object at 0x7fd4cf02eca0>, <dependencyGraph.Codelet object at 0x7fd4cf02ee80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd4cf02eca0>, <dependencyGraph.Codelet object at 0x7fd4cf02eee0>, <dependencyGraph.Codelet object at 0x7fd4cf02ed60>}
total number of nodes created:  4
state vars {'last_ttl', 'seen', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p__br_tmp6', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp6', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out
Stored read, write flank variables
{'p_last_ttl02', 'p_seen00', 'p_last_ttl00', 'p_ttl_change02', 'p_ttl_change00', 'p_seen01'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fd4cefe61f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'last_ttl', 'p_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change02', 'p_ttl_change00', 'p_ttl_change01', 'ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change00', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['p_ttl', 'p__br_tmp6', 'p_seen00', 'ttl_change', 'p_last_ttl00']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_ttl', 'p__br_tmp6', 'p_seen00', 'p_last_ttl00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
     | merged inputs:  ['p__br_tmp5', 'p_seen00', 'ttl_change']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p__br_tmp5', 'p_seen00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fd4cefe61f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp6 = p_seen00==0;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fd4cefe61f0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00']
state_var ['ttl_change']
		* new component :  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['ttl_change', 'p__br_tmp5', 'p_seen00']
		* new component outputs :  ['ttl_change']
		* state_pkt_fields of new component:  ['p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_ttl', 'p_seen00', 'p_last_ttl00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_ttl', 'p_seen00', 'p_last_ttl00']
redundant outputs ['p_last_ttl02', 'p__br_tmp6', 'p__br_tmp5', 'p_last_ttl01']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_ttl', 'p_seen00']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_ttl', 'p_seen00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);  with *************************
[<dependencyGraph.Statement object at 0x7fd4cefe6130>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs ['p__br_tmp6', 'p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['last_ttl', 'p_last_ttl00']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'p_seen00', 'p_last_ttl00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_ttl', 'p_seen00', 'p_last_ttl00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p_seen00']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'last_ttl', 'p_ttl', 'p_seen00', 'ttl_change', 'p_last_ttl00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out/comp_6_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00']
 *** found stateful dependencies between  0  and  1
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xd91540e1
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fd4cefe6b20>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fd4cefe6df0>, 0), (<alus.DominoGenericSALU object at 0x7fd4cf02e520>, 1), (<alus.DominoGenericSALU object at 0x7fd4cefe6cd0>, 2)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 16)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) != 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 2);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) < 1)/*comp_2_..ateful.sk:135*/\n', '  {\n', '    state_0 = pkt_0 - pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 16)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) != 2)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 2);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) < 1)/*comp_2_..ateful.sk:135*/\n', '  {\n', '    state_0 = pkt_0 - pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': 'p_rdata', 'result': 'p_id0', 'immediate_operand': '31'}]}
Time taken: 6.9511308670043945 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_5. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f31e47b86d0>, 'write': <dependencyGraph.Statement object at 0x7f31e47f2760>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f31e47f2160>, 'write': <dependencyGraph.Statement object at 0x7f31e47f22e0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f31e47f27f0>, 'write': <dependencyGraph.Statement object at 0x7f31e47f2580>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f31e47b86d0>, 'write': <dependencyGraph.Statement object at 0x7f31e47f2760>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f31e47f2160>, 'write': <dependencyGraph.Statement object at 0x7f31e47f22e0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f31e47f27f0>, 'write': <dependencyGraph.Statement object at 0x7f31e47f2580>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f31e47f2d60>, <dependencyGraph.Codelet object at 0x7f31e47f2ee0>, <dependencyGraph.Codelet object at 0x7f31e47f2ca0>, <dependencyGraph.Codelet object at 0x7f31e47f2e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f31e47f2ca0>, <dependencyGraph.Codelet object at 0x7f31e47f2ee0>, <dependencyGraph.Codelet object at 0x7f31e47f2d60>}
total number of nodes created:  4
state vars {'last_ttl', 'seen', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out
Stored read, write flank variables
{'p_seen00', 'p_ttl_change02', 'p_ttl_change00', 'p_last_ttl00', 'p_last_ttl02', 'p_seen01'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f31e47aa1f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'last_ttl', 'p_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change01', 'ttl_change', 'p_ttl_change02', 'p_ttl_change00']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change02', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['p_ttl', 'p_seen00', 'ttl_change', 'p__br_tmp6', 'p_last_ttl00']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_ttl', 'p_seen00', 'p__br_tmp6', 'p_last_ttl00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'ttl_change', 'p__br_tmp5']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp5']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f31e47aa1f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp6 = p_seen00==0;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f31e47aa1f0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_ttl_change02', 'p_ttl_change00', 'p_ttl_change01']
state_var ['ttl_change']
		* new component :  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['ttl_change', 'p__br_tmp5', 'p_seen00']
		* new component outputs :  ['ttl_change']
		* state_pkt_fields of new component:  ['p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs ['p_last_ttl01', 'p__br_tmp6', 'p__br_tmp5', 'p_last_ttl02']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);  with *************************
[<dependencyGraph.Statement object at 0x7f31e47aa130>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs ['p__br_tmp6', 'p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['last_ttl', 'p_last_ttl00']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'p_last_ttl00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'p_ttl', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_seen00', 'p_last_ttl00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_seen00', 'ttl_change', 'p_ttl', 'last_ttl', 'p_last_ttl00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out/comp_6_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  1
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xd91540e1
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f31e47aab20>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f31e47aadf0>, 0), (<alus.DominoGenericSALU object at 0x7f31e47f2520>, 1), (<alus.DominoGenericSALU object at 0x7f31e47aacd0>, 2)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) < 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 17;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_1) != 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_1) < 1)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_0) > 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) == 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) > 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) < 1)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 17;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_1) != 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_1) < 1)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_0) > 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) == 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
Time taken: 17.358471393585205 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_6. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp9 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp11 = p_seen00==0;

lhs p__br_tmp11 rhs p_seen00==0
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp11 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp11 ? (1) : (p_seen00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp11 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_seen00']
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp11 ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp11 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
RAW p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
RAW p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
RAW p__br_tmp11 = p_seen00==0; p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp11 = p_seen00==0; p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f2bb22de6d0>, 'write': <dependencyGraph.Statement object at 0x7f2bb2318760>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f2bb2318160>, 'write': <dependencyGraph.Statement object at 0x7f2bb23182e0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f2bb23187f0>, 'write': <dependencyGraph.Statement object at 0x7f2bb2318580>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f2bb22de6d0>, 'write': <dependencyGraph.Statement object at 0x7f2bb2318760>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f2bb2318160>, 'write': <dependencyGraph.Statement object at 0x7f2bb23182e0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f2bb23187f0>, 'write': <dependencyGraph.Statement object at 0x7f2bb2318580>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp11 = p_seen00==0 stmts len 1
p__br_tmp11 = p_seen00==0;
v p_seen01 = p__br_tmp11 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2bb2318d60>, <dependencyGraph.Codelet object at 0x7f2bb2318ee0>, <dependencyGraph.Codelet object at 0x7f2bb2318ca0>, <dependencyGraph.Codelet object at 0x7f2bb2318e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp11 = p_seen00==0;
p_seen01 = p__br_tmp11 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2bb2318ca0>, <dependencyGraph.Codelet object at 0x7f2bb2318ee0>, <dependencyGraph.Codelet object at 0x7f2bb2318d60>}
total number of nodes created:  4
state vars {'last_ttl', 'seen', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp9'}
elements in v_outputs:  {'p__br_tmp9'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp11', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp9', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp9    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp11'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp11'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp11 = p_seen00==0
2   p_seen01 = p__br_tmp11 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp11 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp11', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp11  not in state vars
 statement:  p__br_tmp11 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp11    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp11 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp11 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out
Stored read, write flank variables
{'p_seen01', 'p_last_ttl00', 'p_last_ttl02', 'p_ttl_change00', 'p_ttl_change02', 'p_seen00'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp11 = p_seen00==0 p_seen01 = p__br_tmp11 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp11 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp11 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f2bb22d11f0>]
resultant component: 
p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp11  into node  p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp11 = p_seen00==0;', 'p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01', 'ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp11', 'p__br_tmp9']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['p_ttl', 'p_last_ttl00', 'ttl_change', 'p_seen00', 'p__br_tmp11']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_ttl', 'p_last_ttl00', 'p_seen00', 'p__br_tmp11']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp11 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
     | merged inputs:  ['p__br_tmp9', 'p_seen00', 'ttl_change']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p__br_tmp9', 'p_seen00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp11 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp11 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f2bb22d11f0>]
resultant component: 
p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp9', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp9', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp11 = p_seen00==0;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp11 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f2bb22d11f0>]
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02', 'p__br_tmp11']
state_var ['ttl_change']
		* new component :  p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['ttl_change', 'p__br_tmp9', 'p_seen00']
		* new component outputs :  ['ttl_change']
		* state_pkt_fields of new component:  ['p_ttl_change00', 'p_ttl_change02']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp9']
 node inputs:  ['p_ttl', 'p_seen00', 'p_last_ttl00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_ttl', 'p_seen00', 'p_last_ttl00']
redundant outputs ['p__br_tmp9', 'p_last_ttl02', 'p_last_ttl01', 'p__br_tmp11']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_ttl', 'p_seen00']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_ttl', 'p_seen00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);  with *************************
[<dependencyGraph.Statement object at 0x7f2bb22d1130>]
resultant component: 
p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'ttl_change', 'p__br_tmp9', 'p_seen00']
redundant outputs ['p_seen01', 'p__br_tmp11']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp9', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'ttl_change', 'p__br_tmp9', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'p_seen00', 'p_last_ttl00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_ttl', 'p_seen00', 'p_last_ttl00', 'ttl_change', 'p__br_tmp9', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_ttl', 'p_seen00', 'p_last_ttl00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p_seen00']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'p__br_tmp9', 'p_last_ttl00', 'ttl_change', 'p_seen00', 'last_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp11 = p_seen00==0; p_seen01 = p__br_tmp11 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp11 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp9 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp11 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp11 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp9 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp11 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp9 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp9', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp9', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out/comp_6_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00']
 *** found stateful dependencies between  0  and  1
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xd91540e1
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f2bb22d1b20>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f2bb22d1df0>, 0), (<alus.DominoGenericSALU object at 0x7f2bb2318520>, 1), (<alus.DominoGenericSALU object at 0x7f2bb22d1cd0>, 2)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 12;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 4)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 47;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_0) != 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = -27;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_0) == 12)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = 8 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp9', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) < 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - 0) < 6)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 46;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) == 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 12;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) == 4)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 47;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_0) != 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = -27;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_0) == 12)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = 8 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp9', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_1) < 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - 0) < 6)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 46;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) == 0)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '30'}]}
Time taken: 11.955506086349487 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_7. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp6 ? (0) : (p_ttl_change00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change00']
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);

lhs p__br_tmp7 rhs (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_seen01', 'p_last_ttl01', 'p_ttl']
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_ttl_change01', 'p_ttl_change01']
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
finding dependencies
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p_seen00 = seen; p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
RAW p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
RAW p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
RAW p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fc2433997f0>, 'write': <dependencyGraph.Statement object at 0x7fc243399580>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fc243399160>, 'write': <dependencyGraph.Statement object at 0x7fc2433992e0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fc24335f6d0>, 'write': <dependencyGraph.Statement object at 0x7fc243399310>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fc2433997f0>, 'write': <dependencyGraph.Statement object at 0x7fc243399580>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fc243399160>, 'write': <dependencyGraph.Statement object at 0x7fc2433992e0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fc24335f6d0>, 'write': <dependencyGraph.Statement object at 0x7fc243399310>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
v p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) stmts len 1
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
v p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc243399df0>, <dependencyGraph.Codelet object at 0x7fc243399ee0>, <dependencyGraph.Codelet object at 0x7fc243399e80>, <dependencyGraph.Codelet object at 0x7fc243399d60>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00);
p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl);
p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc243399e80>, <dependencyGraph.Codelet object at 0x7fc243399ee0>, <dependencyGraph.Codelet object at 0x7fc243399df0>}
total number of nodes created:  4
state vars {'last_ttl', 'ttl_change', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp7'}
elements in v_outputs:  {'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
2   p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
3   p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_seen01', 'p_last_ttl01', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp7', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp7    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
 -------------- v_outputs:  {'p_seen00', 'p_seen01', 'p__br_tmp6'}
p_seen00  is read flank
p_seen01  is write flank
elements in v_outputs:  {'p_seen00', 'p_seen01', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  6
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen01    read_flanks:  []   write_flanks:  ['p_seen01']
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00', 'p_seen01'}
   - createing a node for flank  p_seen01
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  7
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out
Stored read, write flank variables
{'p_last_ttl00', 'p_ttl_change02', 'p_seen00', 'p_last_ttl02', 'p_ttl_change00', 'p_seen01'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp6 ? (0) : (p_ttl_change00) p_ttl_change02 = p__br_tmp7 ? (1+p_ttl_change01) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00) p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl) p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  8
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fc2433512b0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_seen01', 'p_ttl']
 ~~~| state var:  ['last_ttl']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp6 ? (p_ttl) : (p_last_ttl00); p__br_tmp7 = (!(p_seen00==0))&&(!(p_seen01==0))&&(p_last_ttl01!=p_ttl); p_last_ttl02 = p__br_tmp7 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 problematic inputs:  ['last_ttl', 'p_seen00', 'p_seen01', 'p_ttl']
 problematic state vars:  ['last_ttl']
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_8. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'last_ttl', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f0dcdddb160>, 'write': <dependencyGraph.Statement object at 0x7f0dcdddb2e0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f0dcdda16d0>, 'write': <dependencyGraph.Statement object at 0x7f0dcdddb760>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f0dcdddb7f0>, 'write': <dependencyGraph.Statement object at 0x7f0dcdddb580>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f0dcdddb160>, 'write': <dependencyGraph.Statement object at 0x7f0dcdddb2e0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f0dcdda16d0>, 'write': <dependencyGraph.Statement object at 0x7f0dcdddb760>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f0dcdddb7f0>, 'write': <dependencyGraph.Statement object at 0x7f0dcdddb580>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0dcdddbd60>, <dependencyGraph.Codelet object at 0x7f0dcdddbee0>, <dependencyGraph.Codelet object at 0x7f0dcdddbca0>, <dependencyGraph.Codelet object at 0x7f0dcdddbe80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0dcdddbca0>, <dependencyGraph.Codelet object at 0x7f0dcdddbee0>, <dependencyGraph.Codelet object at 0x7f0dcdddbd60>}
total number of nodes created:  4
state vars {'seen', 'last_ttl', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out
Stored read, write flank variables
{'p_ttl_change00', 'p_seen00', 'p_ttl_change02', 'p_seen01', 'p_last_ttl00', 'p_last_ttl02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f0dcdd931f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change02', 'p_ttl_change01', 'ttl_change', 'p_ttl_change00']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00']
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'p_last_ttl00', 'p_ttl', 'p__br_tmp6', 'ttl_change']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl', 'p__br_tmp6']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'p__br_tmp5', 'ttl_change']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp5']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f0dcdd931f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp6 = p_seen00==0;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change02', 'p_ttl_change00']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7f0dcdd931f0>]
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01', 'p__br_tmp6']
state_var ['ttl_change']
		* new component :  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['ttl_change', 'p__br_tmp5', 'p_seen00']
		* new component outputs :  ['ttl_change']
		* state_pkt_fields of new component:  ['p_ttl_change02', 'p_ttl_change00']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_seen00', 'p_ttl', 'p_last_ttl00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_seen00', 'p_ttl', 'p_last_ttl00']
redundant outputs ['p_last_ttl01', 'p__br_tmp5', 'p_last_ttl02', 'p__br_tmp6']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 | state_pkt_fields of component a:  ['p_last_ttl02', 'p_last_ttl00']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);  with *************************
[<dependencyGraph.Statement object at 0x7f0dcdd93130>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs ['p__br_tmp6', 'p_seen01']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['last_ttl', 'p_last_ttl00']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'p_last_ttl00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_seen00', 'p_ttl', 'p_last_ttl00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p__br_tmp5', 'last_ttl', 'p_last_ttl00', 'p_ttl', 'ttl_change'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out/comp_6_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  1
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xd91540e1
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f0dcdd93b20>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f0dcdd93df0>, 0), (<alus.DominoGenericSALU object at 0x7f0dcdddb520>, 1), (<alus.DominoGenericSALU object at 0x7f0dcdd93cd0>, 2)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) < 3)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = -22;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) < 28)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 17;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) < 3)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) != 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + -2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 3)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 0 - pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 21;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_0 - pkt_0) < 3)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = -22;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - pkt_0) < 28)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 17;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) < 3)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) != 2)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + -2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 3)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - 0) < 1)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = 0 - pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 21;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
Time taken: 5.3872997760772705 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_9. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp3 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp4 = p_seen00==0;

lhs p__br_tmp4 rhs p_seen00==0
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp4 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp4 ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = p__br_tmp4 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_seen00']
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp4 ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp4 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
RAW p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
RAW p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
RAW p__br_tmp4 = p_seen00==0; p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp4 = p_seen00==0; p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7fd017ea0160>, 'write': <dependencyGraph.Statement object at 0x7fd017ea02e0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fd017ea07f0>, 'write': <dependencyGraph.Statement object at 0x7fd017ea0580>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fd017e666d0>, 'write': <dependencyGraph.Statement object at 0x7fd017ea0760>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fd017ea0160>, 'write': <dependencyGraph.Statement object at 0x7fd017ea02e0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fd017ea07f0>, 'write': <dependencyGraph.Statement object at 0x7fd017ea0580>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fd017e666d0>, 'write': <dependencyGraph.Statement object at 0x7fd017ea0760>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp4 = p_seen00==0 stmts len 1
p__br_tmp4 = p_seen00==0;
v p_seen01 = p__br_tmp4 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd017ea0d60>, <dependencyGraph.Codelet object at 0x7fd017ea0ee0>, <dependencyGraph.Codelet object at 0x7fd017ea0ca0>, <dependencyGraph.Codelet object at 0x7fd017ea0e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp4 = p_seen00==0;
p_seen01 = p__br_tmp4 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd017ea0ca0>, <dependencyGraph.Codelet object at 0x7fd017ea0d60>, <dependencyGraph.Codelet object at 0x7fd017ea0ee0>}
total number of nodes created:  4
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp3'}
elements in v_outputs:  {'p__br_tmp3'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp3', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp4', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp3    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp4'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp4 = p_seen00==0
2   p_seen01 = p__br_tmp4 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp4 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp4', 'p_seen00']
 state vars:  ['seen']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp4 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp4 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out
Stored read, write flank variables
{'p_ttl_change00', 'p_seen01', 'p_seen00', 'p_last_ttl00', 'p_last_ttl02', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp4 = p_seen00==0 p_seen01 = p__br_tmp4 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp4 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp4 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fd017e581f0>]
resultant component: 
p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp4  into node  p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'last_ttl', 'p_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp4 = p_seen00==0;', 'p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change', 'p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02']
 node inputs:  ['ttl_change', 'p__br_tmp3', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change01', 'p_ttl_change00', 'p_ttl_change02']
state_var ['ttl_change']
     | merged inputs:  ['ttl_change', 'p_seen00', 'p__br_tmp4', 'p_ttl', 'p_last_ttl00']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp4', 'p_ttl', 'p_last_ttl00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp4 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'p__br_tmp3', 'ttl_change']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp3']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp4 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp4 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fd017e581f0>]
resultant component: 
p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp3', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp4 = p_seen00==0;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp4 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fd017e581f0>]
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change01', 'p__br_tmp4', 'p_ttl_change02']
state_var ['ttl_change']
		* new component :  p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['ttl_change', 'p__br_tmp3', 'p_seen00']
		* new component outputs :  ['ttl_change']
		* state_pkt_fields of new component:  ['p_ttl_change00', 'p_ttl_change02']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp3']
 node inputs:  ['p_last_ttl00', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs ['p_last_ttl01', 'p__br_tmp3', 'p__br_tmp4', 'p_last_ttl02']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 | state_pkt_fields of component a:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);  with *************************
[<dependencyGraph.Statement object at 0x7fd017e58130>]
resultant component: 
p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'ttl_change', 'p__br_tmp3', 'p_seen00']
redundant outputs ['p_seen01', 'p__br_tmp4']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp3', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'ttl_change', 'p__br_tmp3', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['last_ttl', 'p_last_ttl00']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_last_ttl00', 'p_seen00', 'p_ttl'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'p_seen00', 'p_ttl', 'ttl_change', 'p__br_tmp3', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_last_ttl00', 'p_seen00', 'p_ttl']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['seen', 'p_seen00']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'ttl_change', 'p__br_tmp3', 'p_seen00', 'last_ttl', 'p_ttl', 'p_last_ttl00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp4 = p_seen00==0; p_seen01 = p__br_tmp4 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp4 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp3 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp4 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp4 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp3 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp4 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp3 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp3', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out/comp_6_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00']
 *** found stateful dependencies between  0  and  1
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['seen', 'p_seen00']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xd91540e1
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fd017e58af0>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fd017e58dc0>, 0), (<alus.DominoGenericSALU object at 0x7fd017ea0520>, 1), (<alus.DominoGenericSALU object at 0x7fd017e58ca0>, 2)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 31)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 4)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = 31;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) == 18)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_1) == 18)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 28;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp3', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) == 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['seen', 'p_seen00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 31)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) > 4)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = 31;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 3;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['last_ttl', 'p_last_ttl00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) == 18)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_1) == 18)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 28;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp3', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_1 - 0) > 0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 0)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) == 1)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
Time taken: 24.316911697387695 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_10. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

lhs p__br_tmp5 rhs (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);

 is_read_flank: processing rhs_vars =  ['p_seen00', 'p_last_ttl00', 'p_ttl']
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

lhs p_ttl_change01 rhs p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp6 = p_seen00==0;

lhs p__br_tmp6 rhs p_seen00==0
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p__br_tmp6 = p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

lhs p_seen01 rhs p__br_tmp6 ? (1) : (p_seen00)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_seen01 = p__br_tmp6 ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_seen00']
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs p__br_tmp6 ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'last_ttl', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
RAW p_seen00 = seen; p__br_tmp6 = p_seen00==0;
RAW p_seen00 = seen; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
RAW p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
RAW p__br_tmp6 = p_seen00==0; p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp6 = p_seen00==0; p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
RAW p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fb6405777f0>, 'write': <dependencyGraph.Statement object at 0x7fb640577580>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fb64053d6d0>, 'write': <dependencyGraph.Statement object at 0x7fb640577760>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fb640577160>, 'write': <dependencyGraph.Statement object at 0x7fb6405772e0>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fb6405777f0>, 'write': <dependencyGraph.Statement object at 0x7fb640577580>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fb64053d6d0>, 'write': <dependencyGraph.Statement object at 0x7fb640577760>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fb640577160>, 'write': <dependencyGraph.Statement object at 0x7fb6405772e0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  14
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) stmts len 1
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
v p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) stmts len 1
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
v p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp6 = p_seen00==0 stmts len 1
p__br_tmp6 = p_seen00==0;
v p_seen01 = p__br_tmp6 ? (1) : (p_seen00) stmts len 1
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb640577d60>, <dependencyGraph.Codelet object at 0x7fb640577ee0>, <dependencyGraph.Codelet object at 0x7fb640577ca0>, <dependencyGraph.Codelet object at 0x7fb640577e80>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00);
p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp6 = p_seen00==0;
p_seen01 = p__br_tmp6 ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb640577ca0>, <dependencyGraph.Codelet object at 0x7fb640577ee0>, <dependencyGraph.Codelet object at 0x7fb640577d60>}
total number of nodes created:  4
state vars {'ttl_change', 'last_ttl', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
2   p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp5', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp6', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
 rhs_vars:  ['p_seen00', 'p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp5    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp6'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp6 = p_seen00==0
2   p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
3   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = p__br_tmp6 ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp6', 'p_seen00']
 state vars:  ['seen']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp6 = p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp6 = p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out
Stored read, write flank variables
{'p_ttl_change00', 'p_last_ttl00', 'p_seen00', 'p_seen01', 'p_ttl_change02', 'p_last_ttl02'}
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00) p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl) p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp6 = p_seen00==0 p_seen01 = p__br_tmp6 ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  6
 all rhs in other inputs, trying merge...
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | state_pkt_fields of component b:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fb64052f1f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_101_stateful.sk.out
---------- Merge success. ---------
can merge  p__br_tmp6  into node  p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
pred_stmt:  p_seen00 = seen
pred rhs:  ['seen']
comp inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
other inputs:  {'p_ttl', 'last_ttl'}
 rhs not in other inputs, continuing...
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['p_ttl_change00', 'ttl_change', 'p_ttl_change02', 'p_ttl_change01']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
redundant outputs []
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
state_var ['ttl_change']
     | merged inputs:  ['p_ttl', 'p_last_ttl00', 'p_seen00', 'ttl_change', 'p__br_tmp6']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_ttl', 'p_last_ttl00', 'p_seen00', 'p__br_tmp6']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p__br_tmp6 = p_seen00==0;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['ttl_change']
     | merged inputs:  ['p_seen00', 'p__br_tmp5', 'ttl_change']
		| merged state vars:  {'ttl_change'}
		| merged stateless vars:  ['p_seen00', 'p__br_tmp5']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0;
 | b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fb64052f1f0>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp6 = p_seen00==0;
 | component b:  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 | state_pkt_fields of component b:  ['p_ttl_change00', 'p_ttl_change02']
merge component: component is ----  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ********************** adding statements from component  p__br_tmp6 = p_seen00==0;  with *************************
[<dependencyGraph.Statement object at 0x7fb64052f1f0>]
removing two old components
adj_inputs []
redundant outputs ['p_ttl_change00', 'p_ttl_change01', 'p_ttl_change02', 'p__br_tmp6']
state_var ['ttl_change']
		* new component :  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
		* new component inputs :  ['ttl_change', 'p__br_tmp5', 'p_seen00']
		* new component outputs :  ['ttl_change']
		* state_pkt_fields of new component:  ['p_ttl_change00', 'p_ttl_change02']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);', 'p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;', 'p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;', 'p_id0 = p_rdata;', 'p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;']
 * recursive_merge: node ::  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_seen00', 'p_ttl', 'p_last_ttl00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
adj_inputs ['p_seen00', 'p_ttl', 'p_last_ttl00']
redundant outputs ['p_last_ttl01', 'p_last_ttl02', 'p__br_tmp6', 'p__br_tmp5']
state_var ['last_ttl']
redundant outputs []
     | merged inputs:  ['p_seen00', 'p_ttl']
		| merged state vars:  {'last_ttl'}
		| merged stateless vars:  ['p_seen00', 'p_ttl']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 | b:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 | state_pkt_fields of component a:  ['p_last_ttl00', 'p_last_ttl02']
merge component: component is ----  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 ********************** adding statements from component  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);  with *************************
[<dependencyGraph.Statement object at 0x7fb64052f130>]
resultant component: 
p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs ['p_seen01', 'p__br_tmp6']
state_var ['seen']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 node outputs:  ['ttl_change']
 node inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs []
redundant outputs []
state_var ['ttl_change']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 * recursive_merge: node ::  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 node outputs:  ['p_last_ttl00', 'last_ttl']
 node inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 exclude_read_write_flanks: successor inputs:  {'p_seen00', 'p_ttl', 'p_last_ttl00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_last_ttl00']
  - recursive_merge: looking at preds of  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
     |  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
adj_inputs ['last_ttl', 'p_seen00', 'p_ttl', 'p_seen00', 'p_ttl', 'p_last_ttl00', 'ttl_change', 'p__br_tmp5', 'p_seen00']
redundant outputs []
state_var ['seen']
adj_inputs ['p_seen00', 'p_ttl', 'p_last_ttl00']
redundant outputs []
state_var ['last_ttl']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
 * recursive_merge: node ::  p_id0 = p_rdata;
 node outputs:  ['p_id0']
 node inputs:  ['p_rdata']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_id0 = p_rdata;
 * recursive_merge: node ::  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 node outputs:  ['p_seen00', 'seen']
 node inputs:  ['seen']
 exclude_read_write_flanks: successor inputs:  {'p_ttl', 'p_last_ttl00', 'p_seen00', 'ttl_change', 'last_ttl', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_seen00']
 * recursive_merge: finished processing  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
 * recursive_merge: finished processing  p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p_id0'}
{'p_id0'}
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
u:  p_seen00 = seen; p__br_tmp6 = p_seen00==0; p_seen01 = p__br_tmp6 ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp6 = p_seen00==0; p_ttl_change00 = ttl_change; p_ttl_change01 = p__br_tmp5 ? (1+p_ttl_change00) : (p_ttl_change00); p_ttl_change02 = p__br_tmp6 ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp6 = p_seen00==0; p_last_ttl00 = last_ttl; p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl); p_last_ttl01 = p__br_tmp5 ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = p__br_tmp6 ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp5 = (!(p_seen00==0))&&(p_last_ttl00!=p_ttl);
~~~~~~~~~~set_alu_inputs:  ['seen']
 ~~~| state var:  ['seen']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'seen', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_ttl', 'p_seen00', 'p_ttl']
 ~~~| state var:  ['last_ttl']
salu_inputs {'metadata_lo': 'p_seen00', 'metadata_hi': 'p_ttl', 'register_lo': 'last_ttl', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp5', 'p_seen00']
 ~~~| state var:  ['ttl_change']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 'p_seen00', 'register_lo': 'ttl_change', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p_id0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p_id0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p_id0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out/comp_6_stateless_p_id0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_id0 --------- 
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_id0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  1
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
>>>>>>>>>>ALU1 outputs ['p_seen00', 'seen']
 *** found stateful dependencies between  0  and  2
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xd91540e1
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fb64052fb20>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fb64052fdf0>, 0), (<alus.DominoGenericSALU object at 0x7fb640577520>, 1), (<alus.DominoGenericSALU object at 0x7fb64052fcd0>, 2)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) > 31)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + -1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) > 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) < 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) == 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1), (0, 2)], 'stateful_alus': [{'inputs': ['seen'], 'outputs': ['p_seen00', 'seen'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + 25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['last_ttl', 'p_seen00', 'p_ttl'], 'outputs': ['p_last_ttl00', 'last_ttl'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    if((pkt_1 - pkt_0) > 31)/*comp_1_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - 0) < 0)/*comp_1_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + -1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['ttl_change', 'p__br_tmp5', 'p_seen00'], 'outputs': ['ttl_change'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - 0) > 0)/*comp_2_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) < 0)/*comp_2_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) == 1)/*comp_2_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_rdata', 'operand2': '1', 'result': 'p_id0', 'immediate_operand': '2'}]}
Time taken: 5.326019048690796 s
preprocessor time:
