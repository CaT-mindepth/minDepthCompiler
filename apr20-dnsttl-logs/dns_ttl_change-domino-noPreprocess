running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_1. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_seen00==0&&1==1)&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_last_ttl00', 'p_ttl']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1;

lhs p__br_tmp30 rhs 1==1&&!(!(p_seen00==0&&1==1))&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_seen00==0&&1==1&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1;
RAW p_seen00 = seen; p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
RAW p_seen00 = seen; p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1;
RAW p_seen00 = seen; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
RAW p_seen00 = seen; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f51e555d820>, 'write': <dependencyGraph.Statement object at 0x7f51e555d1c0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f51e555d2e0>, 'write': <dependencyGraph.Statement object at 0x7f51e555d580>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f51e5522700>, 'write': <dependencyGraph.Statement object at 0x7f51e555d220>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f51e555d820>, 'write': <dependencyGraph.Statement object at 0x7f51e555d1c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f51e555d2e0>, 'write': <dependencyGraph.Statement object at 0x7f51e555d580>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f51e5522700>, 'write': <dependencyGraph.Statement object at 0x7f51e555d220>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  17
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
SCC 3
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1;
v p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 stmts len 1
p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1;
v p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 4
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f51e555df40>, <dependencyGraph.Codelet object at 0x7f51e555df70>, <dependencyGraph.Codelet object at 0x7f51e555de80>, <dependencyGraph.Codelet object at 0x7f51e550f160>, <dependencyGraph.Codelet object at 0x7f51e550f100>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
p_seen00 = seen;
p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1;
p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1;
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f51e555df40>, <dependencyGraph.Codelet object at 0x7f51e550f160>, <dependencyGraph.Codelet object at 0x7f51e555df70>}
total number of nodes created:  5
state vars {'ttl_change', 'seen', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp20'}
elements in v_outputs:  {'p__br_tmp20'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
2   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
 rhs_vars:  ['p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  5
output  p__br_tmp20    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
 -------------- v_outputs:  {'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1
2   p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1
3   p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
4   p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
5   seen = p_seen01
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  6
output  p__br_tmp40    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp30    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
finding node for codelet:  p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  9
---------------number of nodes in the graph:  9
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_1_out
Stored read, write flank variables
{'p_last_ttl02', 'p_last_ttl00', 'p_seen00', 'p_seen01', 'p_ttl_change02', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp40', 'p__br_tmp00', 'p_id0', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp10'}
{'p__br_tmp40', 'p__br_tmp00', 'p_id0', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp10'}
u:  p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1; p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp10 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1; p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1; p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0&&1==1)))&&1==1; p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp30 = 1==1&&!(!(p_seen00==0&&1==1))&&1==1;
u:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
Error: stateful update does not fit in the stateful ALU.
node:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40']
outputs:  ['p_ttl_change01', 'ttl_change', 'p_ttl_change02', 'p_ttl_change00']
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_2. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;

lhs p__br_tmp00 rhs !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_seen00==0&&1==1)&&1==1&&1==1
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_last_ttl00', 'p_ttl']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;

lhs p__br_tmp30 rhs !(1==1&&!(p_seen00==0&&1==1))&&1==1
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_seen00==0&&1==1&&1==1
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
RAW p_seen00 = seen; p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1;
RAW p_seen00 = seen; p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
RAW p_seen00 = seen; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
RAW p_seen00 = seen; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f992d5a6700>, 'write': <dependencyGraph.Statement object at 0x7f992d5e1220>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f992d5e1820>, 'write': <dependencyGraph.Statement object at 0x7f992d5e11c0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f992d5e12e0>, 'write': <dependencyGraph.Statement object at 0x7f992d5e1580>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f992d5a6700>, 'write': <dependencyGraph.Statement object at 0x7f992d5e1220>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f992d5e1820>, 'write': <dependencyGraph.Statement object at 0x7f992d5e11c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f992d5e12e0>, 'write': <dependencyGraph.Statement object at 0x7f992d5e1580>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  17
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1;
SCC 3
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
v p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 stmts len 1
p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
v p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 4
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f992d5e1f40>, <dependencyGraph.Codelet object at 0x7f992d5e1f70>, <dependencyGraph.Codelet object at 0x7f992d5e1e80>, <dependencyGraph.Codelet object at 0x7f992d593160>, <dependencyGraph.Codelet object at 0x7f992d593100>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1;
p_seen00 = seen;
p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f992d5e1f40>, <dependencyGraph.Codelet object at 0x7f992d593160>, <dependencyGraph.Codelet object at 0x7f992d5e1f70>}
total number of nodes created:  5
state vars {'last_ttl', 'ttl_change', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp20'}
elements in v_outputs:  {'p__br_tmp20'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
2   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
 rhs_vars:  ['p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  5
output  p__br_tmp20    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
 -------------- v_outputs:  {'p__br_tmp00', 'p__br_tmp40', 'p_seen00', 'p__br_tmp30'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp00', 'p__br_tmp40', 'p_seen00', 'p__br_tmp30'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1
2   p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1
3   p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
4   p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
5   seen = p_seen01
p_seen01  not in state vars
 statement:  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  6
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp40    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp30    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
finding node for codelet:  p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  9
---------------number of nodes in the graph:  9
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_2_out
Stored read, write flank variables
{'p_seen01', 'p_ttl_change02', 'p_seen00', 'p_last_ttl00', 'p_last_ttl02', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp10', 'p__br_tmp00', 'p_id0', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp40'}
{'p__br_tmp10', 'p__br_tmp00', 'p_id0', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp40'}
u:  p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp10 = !(p_seen00==0&&1==1)&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp30 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
u:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
Error: stateful update does not fit in the stateful ALU.
node:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40']
outputs:  ['p_ttl_change01', 'p_ttl_change02', 'ttl_change', 'p_ttl_change00']
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_3. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1);

lhs p__br_tmp00 rhs !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;

lhs p__br_tmp10 rhs !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(p_seen00==0&&1==1)&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1;

lhs p__br_tmp30 rhs 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1;

 is_read_flank: processing rhs_vars =  ['p_last_ttl00', 'p_ttl']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1;

lhs p__br_tmp40 rhs !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;

lhs p__br_tmp50 rhs !(1==1&&!(p_seen00==0&&1==1))&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1;

lhs p__br_tmp60 rhs 1==1&&1==1&&p_seen00==0&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p_seen00']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1;
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1);
RAW p_seen00 = seen; p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
RAW p_seen00 = seen; p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
RAW p_seen00 = seen; p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1;
RAW p_seen00 = seen; p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
RAW p_seen00 = seen; p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1;
RAW p_seen00 = seen; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01);
RAW p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01);
RAW p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00);
RAW p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01);
RAW p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00);
RAW p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01);
RAW p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00);
RAW p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01);
RAW p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f50d27092e0>, 'write': <dependencyGraph.Statement object at 0x7f50d2709130>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f50d2709820>, 'write': <dependencyGraph.Statement object at 0x7f50d2709310>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f50d26ce700>, 'write': <dependencyGraph.Statement object at 0x7f50d2709220>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f50d27092e0>, 'write': <dependencyGraph.Statement object at 0x7f50d2709130>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f50d2709820>, 'write': <dependencyGraph.Statement object at 0x7f50d2709310>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f50d26ce700>, 'write': <dependencyGraph.Statement object at 0x7f50d2709220>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  19
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1 stmts len 1
p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1 stmts len 1
p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
SCC 3
v p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
SCC 4
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) stmts len 1
p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1);
v p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 stmts len 1
p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1;
v p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 stmts len 1
p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
v p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 stmts len 1
p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1;
v p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 5
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f50d26b8070>, <dependencyGraph.Codelet object at 0x7f50d26b81f0>, <dependencyGraph.Codelet object at 0x7f50d2709fa0>, <dependencyGraph.Codelet object at 0x7f50d26b82b0>, <dependencyGraph.Codelet object at 0x7f50d26b8250>, <dependencyGraph.Codelet object at 0x7f50d26b8370>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
p_seen00 = seen;
p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1);
p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1;
p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1;
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f50d26b81f0>, <dependencyGraph.Codelet object at 0x7f50d26b8250>, <dependencyGraph.Codelet object at 0x7f50d26b8070>}
total number of nodes created:  6
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp30'}
elements in v_outputs:  {'p__br_tmp30'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1
2   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1
 rhs_vars:  ['p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  6
output  p__br_tmp30    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
 -------------- v_outputs:  {'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp60', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp60', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1)
2   p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1
3   p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1
4   p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1
5   p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00)
6   seen = p_seen01
p__br_tmp50  not in state vars
 statement:  p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1)
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp60  not in state vars
 statement:  p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  7
output  p__br_tmp50    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp40    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp60    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  7
finding node for codelet:  p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
finding node for codelet:  p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  9
---------------number of nodes in the graph:  9
finding node for codelet:  p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
finding node for codelet:  p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  11
---------------number of nodes in the graph:  11
number of SCC nodes post splitting:  11
total number of nodes created:  11
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_3_out
Stored read, write flank variables
{'p_ttl_change02', 'p_ttl_change00', 'p_last_ttl00', 'p_last_ttl02', 'p_seen01', 'p_seen00'}
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1) p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  11
number of nodes in comp_graph:  11
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp10', 'p_id0', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp60', 'p__br_tmp20'}
{'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp10', 'p_id0', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp60', 'p__br_tmp20'}
u:  p_last_ttl00 = last_ttl; p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1;
u:  p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1);
v:  p_last_ttl00 = last_ttl; p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1; p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp10 = !(!(1==1&&!(p_seen00==0&&1==1)))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1; p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp20 = 1==1&&!(p_seen00==0&&1==1)&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1; p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1; p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1; p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1);
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1); p__br_tmp40 = !(!(!(1==1&&!(p_seen00==0&&1==1))))&&1==1; p__br_tmp50 = !(1==1&&!(p_seen00==0&&1==1))&&1==1; p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp60 = 1==1&&1==1&&p_seen00==0&&1==1;
u:  p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
Error: stateful update does not fit in the stateful ALU.
node:  p_last_ttl00 = last_ttl; p__br_tmp30 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
inputs:  ['last_ttl', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p_ttl']
outputs:  ['last_ttl', 'p_last_ttl01', 'p__br_tmp30', 'p_last_ttl00', 'p_last_ttl02']
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_4. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_seen00==0)&&1==1&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_last_ttl00', 'p_ttl']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&!(!(p_seen00==0))&&1==1&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_seen00==0&&1==1&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1;
RAW p_seen00 = seen; p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1;
RAW p_seen00 = seen; p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1;
RAW p_seen00 = seen; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
RAW p_seen00 = seen; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fc80ee77820>, 'write': <dependencyGraph.Statement object at 0x7fc80ee771c0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fc80ee772e0>, 'write': <dependencyGraph.Statement object at 0x7fc80ee77580>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fc80ee3c700>, 'write': <dependencyGraph.Statement object at 0x7fc80ee77220>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fc80ee77820>, 'write': <dependencyGraph.Statement object at 0x7fc80ee771c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fc80ee772e0>, 'write': <dependencyGraph.Statement object at 0x7fc80ee77580>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fc80ee3c700>, 'write': <dependencyGraph.Statement object at 0x7fc80ee77220>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  17
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1;
SCC 3
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1;
v p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1;
v p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 4
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc80ee77f40>, <dependencyGraph.Codelet object at 0x7fc80ee77f70>, <dependencyGraph.Codelet object at 0x7fc80ee77e80>, <dependencyGraph.Codelet object at 0x7fc80ee29160>, <dependencyGraph.Codelet object at 0x7fc80ee29100>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1;
p_seen00 = seen;
p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1;
p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1;
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc80ee77f40>, <dependencyGraph.Codelet object at 0x7fc80ee29160>, <dependencyGraph.Codelet object at 0x7fc80ee77f70>}
total number of nodes created:  5
state vars {'ttl_change', 'seen', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp20'}
elements in v_outputs:  {'p__br_tmp20'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
2   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
 rhs_vars:  ['p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  5
output  p__br_tmp20    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
 -------------- v_outputs:  {'p__br_tmp40', 'p__br_tmp00', 'p_seen00', 'p__br_tmp30'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp40', 'p__br_tmp00', 'p_seen00', 'p__br_tmp30'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1
2   p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1
3   p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
4   p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
5   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
 state vars:  ['seen']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  6
output  p__br_tmp40    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp30    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
finding node for codelet:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  9
---------------number of nodes in the graph:  9
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_4_out
Stored read, write flank variables
{'p_last_ttl02', 'p_seen00', 'p_ttl_change02', 'p_seen01', 'p_last_ttl00', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1 p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp10', 'p__br_tmp00', 'p_id0', 'p__br_tmp20', 'p__br_tmp40', 'p__br_tmp30'}
{'p__br_tmp10', 'p__br_tmp00', 'p_id0', 'p__br_tmp20', 'p__br_tmp40', 'p__br_tmp30'}
u:  p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1; p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1; p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1; p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(!(!(p_seen00==0))&&1==1)&&1==1; p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1&&1==1;
u:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
Error: stateful update does not fit in the stateful ALU.
node:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40']
outputs:  ['p_ttl_change02', 'p_ttl_change01', 'p_ttl_change00', 'ttl_change']
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_5. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1);

lhs p__br_tmp00 rhs !(!(!(1==1&&p_seen00==0))&&1==1&&1==1)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1);

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(1==1&&p_seen00==0)&&1==1&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_last_ttl00', 'p_ttl']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1;

lhs p__br_tmp30 rhs !(!(1==1&&p_seen00==0))&&1==1&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_seen00==0&&1==1&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1);
RAW p_seen00 = seen; p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1;
RAW p_seen00 = seen; p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1;
RAW p_seen00 = seen; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
RAW p_seen00 = seen; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1); p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1); p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1); p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7fcc553672e0>, 'write': <dependencyGraph.Statement object at 0x7fcc55367580>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fcc55367820>, 'write': <dependencyGraph.Statement object at 0x7fcc553671c0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fcc5532c700>, 'write': <dependencyGraph.Statement object at 0x7fcc55367220>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fcc553672e0>, 'write': <dependencyGraph.Statement object at 0x7fcc55367580>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fcc55367820>, 'write': <dependencyGraph.Statement object at 0x7fcc553671c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fcc5532c700>, 'write': <dependencyGraph.Statement object at 0x7fcc55367220>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  17
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1;
SCC 3
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) stmts len 1
p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1);
v p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 stmts len 1
p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1;
v p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 4
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fcc55367f40>, <dependencyGraph.Codelet object at 0x7fcc55367f70>, <dependencyGraph.Codelet object at 0x7fcc55367e80>, <dependencyGraph.Codelet object at 0x7fcc55319160>, <dependencyGraph.Codelet object at 0x7fcc55319100>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1;
p_seen00 = seen;
p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1);
p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1;
p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fcc55367f40>, <dependencyGraph.Codelet object at 0x7fcc55319160>, <dependencyGraph.Codelet object at 0x7fcc55367f70>}
total number of nodes created:  5
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp20'}
elements in v_outputs:  {'p__br_tmp20'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
2   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
 rhs_vars:  ['p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  5
output  p__br_tmp20    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
 -------------- v_outputs:  {'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp00', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp00', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1)
2   p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1
3   p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
4   p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
5   seen = p_seen01
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
 state vars:  ['seen']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1)
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  6
output  p__br_tmp30    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp40    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
finding node for codelet:  p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  9
---------------number of nodes in the graph:  9
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_5_out
Stored read, write flank variables
{'p_last_ttl02', 'p_ttl_change02', 'p_seen01', 'p_last_ttl00', 'p_seen00', 'p_ttl_change00'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1) p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp40', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp10', 'p_id0'}
{'p__br_tmp40', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp10', 'p_id0'}
u:  p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1);
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1); p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp10 = !(1==1&&p_seen00==0)&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1); p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1); p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1); p__br_tmp30 = !(!(1==1&&p_seen00==0))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = !(!(!(1==1&&p_seen00==0))&&1==1&&1==1);
u:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
Error: stateful update does not fit in the stateful ALU.
node:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40']
outputs:  ['ttl_change', 'p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_6. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1;

lhs p__br_tmp00 rhs !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1;

lhs p__br_tmp10 rhs !(!(!(!(!(p_seen00==0)))))&&1==1
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1;

lhs p__br_tmp20 rhs !(!(!(p_seen00==0)))&&1==1
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp30 = !(p_seen00==0)&&1==1;

lhs p__br_tmp30 rhs !(p_seen00==0)&&1==1
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp30 = !(p_seen00==0)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1;

lhs p__br_tmp40 rhs p_last_ttl00!=p_ttl&&1==1
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1;

 is_read_flank: processing rhs_vars =  ['p_last_ttl00', 'p_ttl']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1;

lhs p__br_tmp50 rhs !(!(!(!(!(!(p_seen00==0))))))&&1==1
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1;

lhs p__br_tmp60 rhs !(!(!(!(p_seen00==0))))&&1==1
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp70 = !(!(p_seen00==0))&&1==1;

lhs p__br_tmp70 rhs !(!(p_seen00==0))&&1==1
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp70 = !(!(p_seen00==0))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp80 = p_seen00==0&&1==1;

lhs p__br_tmp80 rhs p_seen00==0&&1==1
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p__br_tmp80 = p_seen00==0&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp80', 'p_seen00']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp80', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp80', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'seen', 'ttl_change'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1;
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1;
RAW p_seen00 = seen; p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1;
RAW p_seen00 = seen; p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1;
RAW p_seen00 = seen; p__br_tmp30 = !(p_seen00==0)&&1==1;
RAW p_seen00 = seen; p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1;
RAW p_seen00 = seen; p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1;
RAW p_seen00 = seen; p__br_tmp70 = !(!(p_seen00==0))&&1==1;
RAW p_seen00 = seen; p__br_tmp80 = p_seen00==0&&1==1;
RAW p_seen00 = seen; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);
RAW p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp30 = !(p_seen00==0)&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp30 = !(p_seen00==0)&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);
RAW p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);
RAW p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);
RAW p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);
RAW p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);
RAW p__br_tmp70 = !(!(p_seen00==0))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);
RAW p__br_tmp70 = !(!(p_seen00==0))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp70 = !(!(p_seen00==0))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);
RAW p__br_tmp80 = p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);
RAW p__br_tmp80 = p_seen00==0&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp80 = p_seen00==0&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);
RAW p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f6bf2119700>, 'write': <dependencyGraph.Statement object at 0x7f6bf2154490>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f6bf21542e0>, 'write': <dependencyGraph.Statement object at 0x7f6bf2154100>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f6bf2154820>, 'write': <dependencyGraph.Statement object at 0x7f6bf2154340>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f6bf2119700>, 'write': <dependencyGraph.Statement object at 0x7f6bf2154490>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f6bf21542e0>, 'write': <dependencyGraph.Statement object at 0x7f6bf2154100>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f6bf2154820>, 'write': <dependencyGraph.Statement object at 0x7f6bf2154340>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
total number of nodes created:  21
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1 stmts len 1
p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1 stmts len 1
p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1;
SCC 3
v p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1 stmts len 1
p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1;
SCC 4
v p__br_tmp30 = !(p_seen00==0)&&1==1 stmts len 1
p__br_tmp30 = !(p_seen00==0)&&1==1;
SCC 5
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1;
v p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 stmts len 1
p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1;
v p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 stmts len 1
p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1;
v p__br_tmp70 = !(!(p_seen00==0))&&1==1 stmts len 1
p__br_tmp70 = !(!(p_seen00==0))&&1==1;
v p__br_tmp80 = p_seen00==0&&1==1 stmts len 1
p__br_tmp80 = p_seen00==0&&1==1;
v p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 6
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6bf2108190>, <dependencyGraph.Codelet object at 0x7f6bf2108310>, <dependencyGraph.Codelet object at 0x7f6bf21082b0>, <dependencyGraph.Codelet object at 0x7f6bf21083d0>, <dependencyGraph.Codelet object at 0x7f6bf2108460>, <dependencyGraph.Codelet object at 0x7f6bf2108370>, <dependencyGraph.Codelet object at 0x7f6bf2108400>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1;
p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1;
p__br_tmp30 = !(p_seen00==0)&&1==1;
p_seen00 = seen;
p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1;
p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1;
p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1;
p__br_tmp70 = !(!(p_seen00==0))&&1==1;
p__br_tmp80 = p_seen00==0&&1==1;
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6bf2108190>, <dependencyGraph.Codelet object at 0x7f6bf2108370>, <dependencyGraph.Codelet object at 0x7f6bf2108310>}
total number of nodes created:  7
state vars {'last_ttl', 'seen', 'ttl_change'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp40'}
elements in v_outputs:  {'p__br_tmp40'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1
2   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp80', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1
 rhs_vars:  ['p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  7
output  p__br_tmp40    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  7
finding node for codelet:  p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
 -------------- v_outputs:  {'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp80', 'p__br_tmp60', 'p__br_tmp00', 'p_seen00'}
p_seen00  is read flank
elements in v_outputs:  {'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp80', 'p__br_tmp60', 'p__br_tmp00', 'p_seen00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1
2   p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1
3   p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1
4   p__br_tmp70 = !(!(p_seen00==0))&&1==1
5   p__br_tmp80 = p_seen00==0&&1==1
6   p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00)
7   seen = p_seen01
p__br_tmp50  not in state vars
 statement:  p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp80', 'p_seen00']
 state vars:  ['seen']
p__br_tmp70  not in state vars
 statement:  p__br_tmp70 = !(!(p_seen00==0))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp80  not in state vars
 statement:  p__br_tmp80 = p_seen00==0&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp60  not in state vars
 statement:  p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  8
output  p__br_tmp50    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp70    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp80    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp60    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  8
finding node for codelet:  p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  9
---------------number of nodes in the graph:  9
finding node for codelet:  p__br_tmp70 = !(!(p_seen00==0))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp70 = !(!(p_seen00==0))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
finding node for codelet:  p__br_tmp80 = p_seen00==0&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp80 = p_seen00==0&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  11
---------------number of nodes in the graph:  11
finding node for codelet:  p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  12
---------------number of nodes in the graph:  12
finding node for codelet:  p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  13
---------------number of nodes in the graph:  13
number of SCC nodes post splitting:  13
total number of nodes created:  13
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_6_out
Stored read, write flank variables
{'p_last_ttl00', 'p_seen01', 'p_ttl_change02', 'p_last_ttl02', 'p_ttl_change00', 'p_seen00'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1 p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1 p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1 p__br_tmp70 = !(!(p_seen00==0))&&1==1 p__br_tmp80 = p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  13
number of nodes in comp_graph:  13
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp50', 'p__br_tmp70', 'p_id0', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp10', 'p__br_tmp80', 'p__br_tmp60', 'p__br_tmp40', 'p__br_tmp00'}
{'p__br_tmp50', 'p__br_tmp70', 'p_id0', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp10', 'p__br_tmp80', 'p__br_tmp60', 'p__br_tmp40', 'p__br_tmp00'}
u:  p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp30 = !(p_seen00==0)&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = !(p_seen00==0)&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp70 = !(!(p_seen00==0))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp70 = !(!(p_seen00==0))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp80 = p_seen00==0&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp80 = p_seen00==0&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p__br_tmp70 = !(!(p_seen00==0))&&1==1; p__br_tmp80 = p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp10 = !(!(!(!(!(p_seen00==0)))))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p__br_tmp70 = !(!(p_seen00==0))&&1==1; p__br_tmp80 = p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp20 = !(!(!(p_seen00==0)))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p__br_tmp70 = !(!(p_seen00==0))&&1==1; p__br_tmp80 = p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp30 = !(p_seen00==0)&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p__br_tmp70 = !(!(p_seen00==0))&&1==1; p__br_tmp80 = p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p__br_tmp70 = !(!(p_seen00==0))&&1==1; p__br_tmp80 = p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp70 = !(!(p_seen00==0))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p__br_tmp70 = !(!(p_seen00==0))&&1==1; p__br_tmp80 = p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp80 = p_seen00==0&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p__br_tmp70 = !(!(p_seen00==0))&&1==1; p__br_tmp80 = p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1; p__br_tmp50 = !(!(!(!(!(!(p_seen00==0))))))&&1==1; p__br_tmp60 = !(!(!(!(p_seen00==0))))&&1==1; p__br_tmp70 = !(!(p_seen00==0))&&1==1; p__br_tmp80 = p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = !(!(!(!(!(!(!(p_seen00==0)))))))&&1==1;
u:  p_last_ttl00 = last_ttl; p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp40 = p_last_ttl00!=p_ttl&&1==1;
Error: stateful update does not fit in the stateful ALU.
node:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp80']
outputs:  ['p_ttl_change01', 'p_ttl_change02', 'ttl_change', 'p_ttl_change00']
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_7. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1));

lhs p__br_tmp00 rhs !(!(!(!(p_seen00==0&&1==1))&&1==1))
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1));

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1));

lhs p__br_tmp10 rhs 1==1&&!(!(p_seen00==0&&1==1))
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1));

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp20 = 1==1&&1==1&&p_seen00==0;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_seen00==0
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_seen00==0;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_seen00']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl_change00']
p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1);

lhs p__br_tmp30 rhs !(!(!(p_seen01==0&&1==1))&&1==1)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_seen01']
p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1);

lhs p__br_tmp40 rhs 1==1&&!(p_seen01==0&&1==1)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1);

 is_read_flank: processing rhs_vars =  ['p_seen01']
p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl;

lhs p__br_tmp50 rhs 1==1&&1==1&&p_last_ttl01!=p_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl;

 is_read_flank: processing rhs_vars =  ['p_last_ttl01', 'p_ttl']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p_ttl_change01', 'p_ttl_change01']
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
finding dependencies
RAW p_seen00 = seen; p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1));
RAW p_seen00 = seen; p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1));
RAW p_seen00 = seen; p__br_tmp20 = 1==1&&1==1&&p_seen00==0;
RAW p_seen00 = seen; p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00);
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00);
RAW p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00);
RAW p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01);
RAW p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)); p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00);
RAW p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)); p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)); p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00);
RAW p__br_tmp20 = 1==1&&1==1&&p_seen00==0; p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00);
RAW p__br_tmp20 = 1==1&&1==1&&p_seen00==0; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp20 = 1==1&&1==1&&p_seen00==0; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00);
RAW p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00); p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1);
RAW p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00); p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1);
RAW p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl;
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01);
RAW p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01);
RAW p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01);
RAW p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01);
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f7b5fd4c700>, 'write': <dependencyGraph.Statement object at 0x7f7b5fd875b0>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f7b5fd872e0>, 'write': <dependencyGraph.Statement object at 0x7f7b5fd87310>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f7b5fd87820>, 'write': <dependencyGraph.Statement object at 0x7f7b5fd87580>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f7b5fd4c700>, 'write': <dependencyGraph.Statement object at 0x7f7b5fd875b0>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f7b5fd872e0>, 'write': <dependencyGraph.Statement object at 0x7f7b5fd87310>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f7b5fd87820>, 'write': <dependencyGraph.Statement object at 0x7f7b5fd87580>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  18
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
v p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl stmts len 1
p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl;
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1) stmts len 1
p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1);
SCC 3
v p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1) stmts len 1
p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1);
SCC 4
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) stmts len 1
p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1));
v p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) stmts len 1
p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1));
v p__br_tmp20 = 1==1&&1==1&&p_seen00==0 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_seen00==0;
v p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 5
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7b5fd87f10>, <dependencyGraph.Codelet object at 0x7f7b5fd87430>, <dependencyGraph.Codelet object at 0x7f7b5fd39160>, <dependencyGraph.Codelet object at 0x7f7b5fd391c0>, <dependencyGraph.Codelet object at 0x7f7b5fd39250>, <dependencyGraph.Codelet object at 0x7f7b5fd39100>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl;
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1);
p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1);
p_seen00 = seen;
p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1));
p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1));
p__br_tmp20 = 1==1&&1==1&&p_seen00==0;
p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7b5fd87f10>, <dependencyGraph.Codelet object at 0x7f7b5fd87430>, <dependencyGraph.Codelet object at 0x7f7b5fd39250>}
total number of nodes created:  6
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp50'}
elements in v_outputs:  {'p__br_tmp50'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
2   p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp50  not in state vars
 statement:  p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl
 rhs_vars:  ['p_last_ttl01', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  6
output  p__br_tmp50    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  6
finding node for codelet:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
 -------------- v_outputs:  {'p_seen01', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20'}
p_seen01  is write flank
elements in v_outputs:  {'p_seen01', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1))
2   p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1))
3   p__br_tmp20 = 1==1&&1==1&&p_seen00==0
4   p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00)
5   seen = p_seen01
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_seen00']
 state vars:  ['seen']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1))
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1))
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  8
output  p_seen01    read_flanks:  []   write_flanks:  ['p_seen01']
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp10    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp20    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00', 'p_seen01'}
   - createing a node for flank  p_seen01
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  9
finding node for codelet:  p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1))
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1))
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
finding node for codelet:  p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1))
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1))
find_codelet for stmt :  None
-----------number of nodes in the graph:  11
---------------number of nodes in the graph:  11
finding node for codelet:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp20 = 1==1&&1==1&&p_seen00==0
find_codelet for stmt :  None
-----------number of nodes in the graph:  12
---------------number of nodes in the graph:  12
number of SCC nodes post splitting:  12
total number of nodes created:  12
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_7_out
Stored read, write flank variables
{'p_last_ttl00', 'p_ttl_change02', 'p_seen00', 'p_ttl_change00', 'p_seen01', 'p_last_ttl02'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_3 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_seen00==0 p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  12
number of nodes in comp_graph:  12
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp20', 'p__br_tmp40', 'p__br_tmp10', 'p__br_tmp50', 'p__br_tmp00', 'p_id0', 'p__br_tmp30'}
{'p__br_tmp20', 'p__br_tmp40', 'p__br_tmp10', 'p__br_tmp50', 'p__br_tmp00', 'p_id0', 'p__br_tmp30'}
u:  p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1);
v:  p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1);
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1);
v:  p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1));
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1));
v:  p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1));
v:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
u:  p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1));
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1));
v:  p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1));
v:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
u:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0;
v:  p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0;
v:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
u:  p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_seen00==0; p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1));
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_seen00==0; p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1));
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_seen00==0; p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_seen00==0; p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp30 = !(!(!(p_seen01==0&&1==1))&&1==1);
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(!(p_seen00==0&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_seen00==0&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_seen00==0; p_seen01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp40 = 1==1&&!(p_seen01==0&&1==1);
u:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
v:  p__br_tmp50 = 1==1&&1==1&&p_last_ttl01!=p_ttl;
Error: stateful update does not fit in the stateful ALU.
node:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (0) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_ttl_change01+1) : (p_ttl_change01); ttl_change = p_ttl_change02;
inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50']
outputs:  ['p_ttl_change00', 'p_ttl_change01', 'ttl_change', 'p_ttl_change02']
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_8. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)));

lhs p__br_tmp00 rhs 1==1&&!(1==1&&!(!(p_seen00==0)))
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)));

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_seen00==0)&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_last_ttl00!=p_ttl&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1;

 is_read_flank: processing rhs_vars =  ['p_last_ttl00', 'p_ttl']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1;

lhs p__br_tmp30 rhs 1==1&&!(!(p_seen00==0))&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp40 = 1==1&&p_seen00==0&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_seen00==0&&1==1
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_seen00==0&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01)
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'seen', 'ttl_change', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1;
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)));
RAW p_seen00 = seen; p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1;
RAW p_seen00 = seen; p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1;
RAW p_seen00 = seen; p__br_tmp40 = 1==1&&p_seen00==0&&1==1;
RAW p_seen00 = seen; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))); p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))); p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))); p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp40 = 1==1&&p_seen00==0&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'seen': {'read': <dependencyGraph.Statement object at 0x7f3beaaf62e0>, 'write': <dependencyGraph.Statement object at 0x7f3beaaf6580>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f3beaaf6820>, 'write': <dependencyGraph.Statement object at 0x7f3beaaf61c0>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f3beaabc700>, 'write': <dependencyGraph.Statement object at 0x7f3beaaf6a60>}}
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f3beaaf62e0>, 'write': <dependencyGraph.Statement object at 0x7f3beaaf6580>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f3beaaf6820>, 'write': <dependencyGraph.Statement object at 0x7f3beaaf61c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f3beaabc700>, 'write': <dependencyGraph.Statement object at 0x7f3beaaf6a60>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  17
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1;
SCC 3
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) stmts len 1
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)));
v p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 stmts len 1
p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1;
v p__br_tmp40 = 1==1&&p_seen00==0&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_seen00==0&&1==1;
v p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 4
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3beaaf6f40>, <dependencyGraph.Codelet object at 0x7f3beaaf6f70>, <dependencyGraph.Codelet object at 0x7f3beaaf6e80>, <dependencyGraph.Codelet object at 0x7f3beaaa9160>, <dependencyGraph.Codelet object at 0x7f3beaaa9100>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1;
p_seen00 = seen;
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)));
p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1;
p__br_tmp40 = 1==1&&p_seen00==0&&1==1;
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3beaaf6f40>, <dependencyGraph.Codelet object at 0x7f3beaaa9160>, <dependencyGraph.Codelet object at 0x7f3beaaf6f70>}
total number of nodes created:  5
state vars {'seen', 'ttl_change', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp20'}
elements in v_outputs:  {'p__br_tmp20'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1
2   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1
 rhs_vars:  ['p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  5
output  p__br_tmp20    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)))
2   p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1
3   p__br_tmp40 = 1==1&&p_seen00==0&&1==1
4   p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
5   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)))
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
 state vars:  ['seen']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  6
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp30    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp40    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)))
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)))
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
finding node for codelet:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp40 = 1==1&&p_seen00==0&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  9
---------------number of nodes in the graph:  9
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_8_out
Stored read, write flank variables
{'p_last_ttl00', 'p_ttl_change00', 'p_seen00', 'p_seen01', 'p_ttl_change02', 'p_last_ttl02'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))) p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1 p__br_tmp40 = 1==1&&p_seen00==0&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp30', 'p__br_tmp00', 'p_id0', 'p__br_tmp40'}
{'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp30', 'p__br_tmp00', 'p_id0', 'p__br_tmp40'}
u:  p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)));
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)));
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))); p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp10 = 1==1&&!(p_seen00==0)&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))); p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0)));
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))); p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_seen00==0))); p__br_tmp30 = 1==1&&!(!(p_seen00==0))&&1==1; p__br_tmp40 = 1==1&&p_seen00==0&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp40 = 1==1&&p_seen00==0&&1==1;
u:  p_last_ttl00 = last_ttl; p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp20 = 1==1&&p_last_ttl00!=p_ttl&&1==1;
Error: stateful update does not fit in the stateful ALU.
node:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40']
outputs:  ['p_ttl_change01', 'ttl_change', 'p_ttl_change02', 'p_ttl_change00']
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_9. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_last_ttl00', 'p_ttl']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_seen00==0&&1==1&&1==1
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p_seen00']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01)
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'last_ttl', 'ttl_change', 'seen'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1;
RAW p_seen00 = seen; p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1;
RAW p_seen00 = seen; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00);
RAW p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00);
RAW p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01);
RAW p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01);
RAW p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00);
RAW p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01);
RAW p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'last_ttl': {'read': <dependencyGraph.Statement object at 0x7fbacbbc1700>, 'write': <dependencyGraph.Statement object at 0x7fbacbbfc400>}, 'ttl_change': {'read': <dependencyGraph.Statement object at 0x7fbacbbfc820>, 'write': <dependencyGraph.Statement object at 0x7fbacbbfc370>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7fbacbbfc2e0>, 'write': <dependencyGraph.Statement object at 0x7fbacbbfc190>}}
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7fbacbbc1700>, 'write': <dependencyGraph.Statement object at 0x7fbacbbfc400>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7fbacbbfc820>, 'write': <dependencyGraph.Statement object at 0x7fbacbbfc370>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7fbacbbfc2e0>, 'write': <dependencyGraph.Statement object at 0x7fbacbbfc190>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
total number of nodes created:  15
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1;
v p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1;
v p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 3
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fbacbbfce20>, <dependencyGraph.Codelet object at 0x7fbacbbfcfa0>, <dependencyGraph.Codelet object at 0x7fbacbbfcf40>, <dependencyGraph.Codelet object at 0x7fbacbbfcf70>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p_seen00 = seen;
p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1;
p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1;
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fbacbbfce20>, <dependencyGraph.Codelet object at 0x7fbacbbfcf40>, <dependencyGraph.Codelet object at 0x7fbacbbfcfa0>}
total number of nodes created:  4
state vars {'last_ttl', 'ttl_change', 'seen'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp10'}
elements in v_outputs:  {'p__br_tmp10'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
2   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
 rhs_vars:  ['p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  4
output  p__br_tmp10    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1 p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
 -------------- v_outputs:  {'p__br_tmp20', 'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp20', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1
2   p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1
3   p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00)
4   seen = p_seen01
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p_seen00']
 state vars:  ['seen']
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  5
output  p__br_tmp20    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1 p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1 p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
number of SCC nodes post splitting:  7
total number of nodes created:  7
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_9_out
Stored read, write flank variables
{'p_ttl_change00', 'p_seen01', 'p_last_ttl00', 'p_last_ttl02', 'p_seen00', 'p_ttl_change02'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1 p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_last_ttl00 = last_ttl p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1 p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1 p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  7
number of nodes in comp_graph:  7
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp20', 'p__br_tmp10', 'p_id0', 'p__br_tmp00'}
{'p__br_tmp20', 'p__br_tmp10', 'p_id0', 'p__br_tmp00'}
u:  p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1; p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1; p__br_tmp20 = 1==1&&1==1&&p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = 1==1&&!(p_seen00==0&&1==1)&&1==1&&1==1;
u:  p_last_ttl00 = last_ttl; p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp10 = 1==1&&1==1&&p_last_ttl00!=p_ttl&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 ~~~| state var:  ['ttl_change']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
 problematic inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 problematic state vars:  ['ttl_change']
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change, program name: dns_ttl_change_equivalent_10. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_last_ttl00 = last_ttl;

lhs p_last_ttl00 rhs last_ttl
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl00 = last_ttl;

 is_read_flank: processing rhs_vars =  ['last_ttl']
read flank
p_ttl_change00 = ttl_change;

lhs p_ttl_change00 rhs ttl_change
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change00 = ttl_change;

 is_read_flank: processing rhs_vars =  ['ttl_change']
read flank
p_seen00 = seen;

lhs p_seen00 rhs seen
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen00 = seen;

 is_read_flank: processing rhs_vars =  ['seen']
read flank
p_id0 = p_rdata;

lhs p_id0 rhs p_rdata
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_id0 = p_rdata;

 is_read_flank: processing rhs_vars =  ['p_rdata']
p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1;

lhs p__br_tmp00 rhs !(!(!(p_seen00==0)&&1==1))&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_seen00==0)&&1==1&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1;

lhs p__br_tmp20 rhs p_last_ttl00!=p_ttl&&1==1&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_last_ttl00', 'p_ttl']
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

lhs p_last_ttl01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

lhs p_ttl_change01 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl_change00', 'p_ttl_change00']
p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1;

lhs p__br_tmp30 rhs !(!(p_seen00==0)&&1==1)&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p__br_tmp40 = p_seen00==0&&1==1&&1==1;

lhs p__br_tmp40 rhs p_seen00==0&&1==1&&1==1
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p__br_tmp40 = p_seen00==0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_seen00']
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

lhs p_seen01 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

lhs p_last_ttl02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

lhs p_ttl_change02 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01)
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl_change01']
last_ttl = p_last_ttl02;

lhs last_ttl rhs p_last_ttl02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  last_ttl = p_last_ttl02;

 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
write flank
ttl_change = p_ttl_change02;

lhs ttl_change rhs p_ttl_change02
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  ttl_change = p_ttl_change02;

 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
write flank
seen = p_seen01;

lhs seen rhs p_seen01
state_vars {'ttl_change', 'seen', 'last_ttl'}
read/write flanks: processing line  seen = p_seen01;

 is_read_flank: processing rhs_vars =  ['p_seen01']
write flank
finding dependencies
RAW p_last_ttl00 = last_ttl; p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1;
RAW p_last_ttl00 = last_ttl; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_seen00 = seen; p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1;
RAW p_seen00 = seen; p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1;
RAW p_seen00 = seen; p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1;
RAW p_seen00 = seen; p__br_tmp40 = p_seen00==0&&1==1&&1==1;
RAW p_seen00 = seen; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
RAW p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
RAW p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p__br_tmp40 = p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
RAW p__br_tmp40 = p_seen00==0&&1==1&&1==1; p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
RAW p__br_tmp40 = p_seen00==0&&1==1&&1==1; p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
RAW p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
RAW p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
RAW p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
read_write_flanks {'ttl_change': {'read': <dependencyGraph.Statement object at 0x7f16e17f5820>, 'write': <dependencyGraph.Statement object at 0x7f16e17f51c0>}, 'seen': {'read': <dependencyGraph.Statement object at 0x7f16e17f52e0>, 'write': <dependencyGraph.Statement object at 0x7f16e17f5580>}, 'last_ttl': {'read': <dependencyGraph.Statement object at 0x7f16e17ba700>, 'write': <dependencyGraph.Statement object at 0x7f16e17f5a60>}}
var:  ttl_change
{'read': <dependencyGraph.Statement object at 0x7f16e17f5820>, 'write': <dependencyGraph.Statement object at 0x7f16e17f51c0>}
state_var  ttl_change
read_flank p_ttl_change00 = ttl_change
write_flank ttl_change = p_ttl_change02
var:  seen
{'read': <dependencyGraph.Statement object at 0x7f16e17f52e0>, 'write': <dependencyGraph.Statement object at 0x7f16e17f5580>}
state_var  seen
read_flank p_seen00 = seen
write_flank seen = p_seen01
var:  last_ttl
{'read': <dependencyGraph.Statement object at 0x7f16e17ba700>, 'write': <dependencyGraph.Statement object at 0x7f16e17f5a60>}
state_var  last_ttl
read_flank p_last_ttl00 = last_ttl
write_flank last_ttl = p_last_ttl02
total number of nodes created:  17
SCC 0
v p_ttl_change00 = ttl_change stmts len 1
p_ttl_change00 = ttl_change;
v p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) stmts len 1
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
v p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) stmts len 1
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
v ttl_change = p_ttl_change02 stmts len 1
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
SCC 1
v p_last_ttl00 = last_ttl stmts len 1
p_last_ttl00 = last_ttl;
v p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1 stmts len 1
p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1;
v p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) stmts len 1
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
v p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) stmts len 1
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
v last_ttl = p_last_ttl02 stmts len 1
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
SCC 2
v p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1;
SCC 3
v p_seen00 = seen stmts len 1
p_seen00 = seen;
v p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1;
v p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 stmts len 1
p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1;
v p__br_tmp40 = p_seen00==0&&1==1&&1==1 stmts len 1
p__br_tmp40 = p_seen00==0&&1==1&&1==1;
v p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) stmts len 1
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
v seen = p_seen01 stmts len 1
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
SCC 4
v p_id0 = p_rdata stmts len 1
p_id0 = p_rdata;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f16e17f5f40>, <dependencyGraph.Codelet object at 0x7f16e17f5f70>, <dependencyGraph.Codelet object at 0x7f16e17f5e80>, <dependencyGraph.Codelet object at 0x7f16e17a7160>, <dependencyGraph.Codelet object at 0x7f16e17a7100>]
p_ttl_change00 = ttl_change;
p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00);
p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01);
ttl_change = p_ttl_change02;
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
stateful
p_last_ttl00 = last_ttl;
p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1;
p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00);
p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01);
last_ttl = p_last_ttl02;
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
stateful
p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1;
p_seen00 = seen;
p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1;
p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1;
p__br_tmp40 = p_seen00==0&&1==1&&1==1;
p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00);
seen = p_seen01;
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
stateful
p_id0 = p_rdata;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f16e17f5f40>, <dependencyGraph.Codelet object at 0x7f16e17a7160>, <dependencyGraph.Codelet object at 0x7f16e17f5f70>}
total number of nodes created:  5
state vars {'ttl_change', 'seen', 'last_ttl'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp20'}
elements in v_outputs:  {'p__br_tmp20'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['last_ttl']
all fills found. they are:  set()
codelet statements in order: 
0   p_last_ttl00 = last_ttl
1   p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1
2   p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
3   p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
4   last_ttl = p_last_ttl02
p_last_ttl01  not in state vars
 statement:  p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_ttl', 'p_last_ttl00']
 state vars:  ['last_ttl']
p_last_ttl00  not in state vars
 statement:  p_last_ttl00 = last_ttl
 rhs_vars:  ['last_ttl']
 state vars:  ['last_ttl']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1
 rhs_vars:  ['p_last_ttl00', 'p_ttl']
 state vars:  ['last_ttl']
p_last_ttl02  not in state vars
 statement:  p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_ttl', 'p_last_ttl01']
 state vars:  ['last_ttl']
size of SCC graph pre-duplicate:  5
output  p__br_tmp20    read_flanks:  ['p_last_ttl00']   write_flanks:  []
flanks:  {'p_last_ttl00'}
   - createing a node for flank  p_last_ttl00
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 p__br_tmp40 = p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
 -------------- v_outputs:  {'p_seen00', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp40'}
p_seen00  is read flank
elements in v_outputs:  {'p_seen00', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp40'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['seen']
all fills found. they are:  set()
codelet statements in order: 
0   p_seen00 = seen
1   p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1
2   p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1
3   p__br_tmp40 = p_seen00==0&&1==1&&1==1
4   p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
5   seen = p_seen01
p_seen00  not in state vars
 statement:  p_seen00 = seen
 rhs_vars:  ['seen']
 state vars:  ['seen']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = p_seen00==0&&1==1&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
p_seen01  not in state vars
 statement:  p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_seen00']
 state vars:  ['seen']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1
 rhs_vars:  ['p_seen00']
 state vars:  ['seen']
size of SCC graph pre-duplicate:  6
output  p_seen00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp30    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_seen00']   write_flanks:  []
output  p__br_tmp40    read_flanks:  ['p_seen00']   write_flanks:  []
flanks:  {'p_seen00'}
   - createing a node for flank  p_seen00
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 p__br_tmp40 = p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 p__br_tmp40 = p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
finding node for codelet:  p__br_tmp40 = p_seen00==0&&1==1&&1==1
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 p__br_tmp40 = p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
adding stmt :  p__br_tmp40 = p_seen00==0&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  9
---------------number of nodes in the graph:  9
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/dns_ttl_change/dns_ttl_change_equivalent_10_out
Stored read, write flank variables
{'p_seen00', 'p_ttl_change00', 'p_ttl_change02', 'p_last_ttl00', 'p_seen01', 'p_last_ttl02'}
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
-------------------------------------- stateful codelet vars :  ['ttl_change'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['ttl_change']
codelet  p_ttl_change00 = ttl_change p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00) p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01) ttl_change = p_ttl_change02  is stateful
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
-------------------------------------- stateful codelet vars :  ['seen'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['seen']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 p__br_tmp40 = p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
-------------------------------------- stateful codelet vars :  ['last_ttl'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['last_ttl']
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 p__br_tmp40 = p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_last_ttl00 = last_ttl p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1 p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00) p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01) last_ttl = p_last_ttl02  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 p__br_tmp40 = p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 p__br_tmp40 = p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
codelet  p_seen00 = seen p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1 p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1 p__br_tmp40 = p_seen00==0&&1==1&&1==1 p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00) seen = p_seen01  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 is_read_flank: processing rhs_vars =  ['ttl_change']
 is_read_flank: processing rhs_vars =  ['p_ttl_change02']
 is_read_flank: processing rhs_vars =  ['last_ttl']
 is_read_flank: processing rhs_vars =  ['p_last_ttl02']
 is_read_flank: processing rhs_vars =  ['seen']
 is_read_flank: processing rhs_vars =  ['p_seen01']
Principal Outputs:  {'p__br_tmp10', 'p_id0', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp20', 'p__br_tmp30'}
{'p__br_tmp10', 'p_id0', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp20', 'p__br_tmp30'}
u:  p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p__br_tmp40 = p_seen00==0&&1==1&&1==1;
v:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
u:  p__br_tmp40 = p_seen00==0&&1==1&&1==1;
v:  p_last_ttl00 = last_ttl; p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1; p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1; p__br_tmp40 = p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp10 = !(p_seen00==0)&&1==1&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1; p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1; p__br_tmp40 = p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1; p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1; p__br_tmp40 = p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1;
u:  p_seen00 = seen; p__br_tmp00 = !(!(!(p_seen00==0)&&1==1))&&1==1; p__br_tmp30 = !(!(p_seen00==0)&&1==1)&&1==1; p__br_tmp40 = p_seen00==0&&1==1&&1==1; p_seen01 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (1) : (p_seen00); seen = p_seen01;
v:  p__br_tmp40 = p_seen00==0&&1==1&&1==1;
u:  p_last_ttl00 = last_ttl; p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1; p_last_ttl01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl) : (p_last_ttl00); p_last_ttl02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_ttl) : (p_last_ttl01); last_ttl = p_last_ttl02;
v:  p__br_tmp20 = p_last_ttl00!=p_ttl&&1==1&&1==1;
Error: stateful update does not fit in the stateful ALU.
node:  p_ttl_change00 = ttl_change; p_ttl_change01 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_ttl_change00+1) : (p_ttl_change00); p_ttl_change02 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (0) : (p_ttl_change01); ttl_change = p_ttl_change02;
inputs:  ['ttl_change', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40']
outputs:  ['ttl_change', 'p_ttl_change00', 'p_ttl_change02', 'p_ttl_change01']
preprocessor time:
