running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_1_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f4cb96e8640>, 'write': <dependencyGraph.Statement object at 0x7f4cb9723130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f4cb96e8640>, 'write': <dependencyGraph.Statement object at 0x7f4cb9723130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
v p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;
v p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4cb9723b50>, <dependencyGraph.Codelet object at 0x7f4cb9723be0>, <dependencyGraph.Codelet object at 0x7f4cb9723ca0>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4cb9723ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p_state_001', 'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
2   p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
5   p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1
6   p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
9   state_0 = p_state_002
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
finding node for codelet:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
find_codelet for stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1
finding node for codelet:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
find_codelet for stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
finding node for codelet:  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;', 'p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);', 'p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;', 'p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 node outputs:  ['p_pkt_11']
 node inputs:  ['p_pkt_10', 'p_state_001', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2']
redundant outputs ['p__br_tmp00', 'p__br_tmp5', 'p__br_tmp10', 'p_state_001', 'p__br_tmp30', 'p__br_tmp20', 'p_state_002']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0', 'p__br_tmp4', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp00', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_pkt_2', 'p_pkt_1', 'p_state_000', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'p__br_tmp4', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,3,5,9,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2), (0, 3), (0, 5), (0, 9), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 257 rows, 184 columns and 600 nonzeros
Model fingerprint: 0x561b98c3
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 19 rows and 0 columns
Presolve removed 0 rows and 40 columns
Presolve time: 0.01s
Presolved: 276 rows, 144 columns, 653 nonzeros
Variable types: 0 continuous, 144 integer (129 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 0
T0_A_7 0
T0_A_8 2
T0_A_9 1
T0_A_10 0
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  0.0
action:  6
num stages:  4
stage:  0.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  0.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  0.0
 > get_alu_stage: table  0 , alu_id =  10 :  0.0
alu  10  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7f4cb96de790>, 0), (<alus.DominoALU object at 0x7f4cb96de4f0>, 1), (<alus.DominoALU object at 0x7f4cb96de820>, 2), (<alus.DominoALU object at 0x7f4cb96de460>, 3), (<alus.DominoALU object at 0x7f4cb96debe0>, 4), (<alus.DominoALU object at 0x7f4cb96dec40>, 5), (<alus.DominoALU object at 0x7f4cb96dec70>, 6), (<alus.DominoALU object at 0x7f4cb96de370>, 7), (<alus.DominoALU object at 0x7f4cb96deca0>, 8), (<alus.DominoALU object at 0x7f4cb96de430>, 9), (<alus.DominoALU object at 0x7f4cb96deb50>, 10), (<alus.DominoALU object at 0x7f4cb96ded60>, 11), (<alus.DominoALU object at 0x7f4cb96ded90>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f4cb96de7f0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 3), (0, 5), (0, 9), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'p__br_tmp4', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) != 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 2, 'opcode': 5, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '4'}, {'id': 3, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 4, 'opcode': 19, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_2', 'immediate_operand': '7'}, {'id': 6, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '4'}, {'id': 8, 'opcode': 15, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '7'}, {'id': 9, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '1'}, {'id': 10, 'opcode': 7, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_6', 'immediate_operand': '0'}, {'id': 11, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '31'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '0'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '7'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 3), (0, 5), (0, 9), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'p__br_tmp4', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) != 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 2, 'opcode': 5, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '4'}, {'id': 3, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 4, 'opcode': 19, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_2', 'immediate_operand': '7'}, {'id': 6, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '4'}, {'id': 8, 'opcode': 15, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '7'}, {'id': 9, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '1'}, {'id': 10, 'opcode': 7, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_6', 'immediate_operand': '0'}, {'id': 11, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '31'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '0'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '7'}]}
Time taken: 31.834019422531128 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_2_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;

lhs p__br_tmp00 rhs !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;

lhs p__br_tmp10 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;

lhs p__br_tmp20 rhs !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001', 'p_state_001']
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1c33787640>, 'write': <dependencyGraph.Statement object at 0x7f1c337c2130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1c33787640>, 'write': <dependencyGraph.Statement object at 0x7f1c337c2130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
v p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 stmts len 1
p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
v p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1c337c2b50>, <dependencyGraph.Codelet object at 0x7f1c337c2be0>, <dependencyGraph.Codelet object at 0x7f1c337c2ca0>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1c337c2ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
2   p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
5   p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
6   p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
9   state_0 = p_state_002
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
find_codelet for stmt :  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
finding node for codelet:  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
finding node for codelet:  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
find_codelet for stmt :  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
finding node for codelet:  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;', 'p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);', 'p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;', 'p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 node outputs:  ['p_pkt_11']
 node inputs:  ['p_pkt_10', 'p__br_tmp5', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p__br_tmp5', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_state_000', 'p_pkt_2', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p__br_tmp5', 'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_2', 'p_pkt_0']
redundant outputs ['p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp5', 'p_state_001', 'p_state_002', 'p__br_tmp30']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_1', 'p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p__br_tmp5', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp00', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_1', 'p__br_tmp4', 'p_pkt_2', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_2', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_2', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['state_0', 'p__br_tmp4', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_pkt_2', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = !((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp20 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
final_output:  _out_s20_1
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s20_1
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  10
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  10
 *** found stateless dependency between ALU  9  and ALU  10
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,3,5,7,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
10,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
10,
+---> dependencies of ALU  9 : 
10,
+---> dependencies of ALU  10 : 

# alus: =  11
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  10
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  10
 * gen_dependency_list: dependency between  9  and  10
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 11}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2), (0, 3), (0, 5), (0, 7), (1, 4), (2, 4), (3, 4), (4, 10), (5, 8), (6, 8), (7, 8), (8, 10), (9, 10)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 205 rows, 145 columns and 472 nonzeros
Model fingerprint: 0xe39da6bb
Model has 132 general constraints
Variable types: 0 continuous, 145 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 218 rows, 114 columns, 516 nonzeros
Variable types: 0 continuous, 114 integer (102 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 0
T0_A_7 1
T0_A_8 2
T0_A_9 0
T0_A_10 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  0.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  0.0
action:  9
num stages:  4
stage:  3.0
action:  10
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  0.0
 > get_alu_stage: table  0 , alu_id =  9 :  0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  10 :  3.0
 > get_alu_stage: table  0 , alu_id =  10 :  3.0
alu  10  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  10  ;  [(<alus.DominoALU object at 0x7f1c3377e910>, 0), (<alus.DominoALU object at 0x7f1c3377e250>, 1), (<alus.DominoALU object at 0x7f1c3377e9a0>, 2), (<alus.DominoALU object at 0x7f1c3377e6d0>, 3), (<alus.DominoALU object at 0x7f1c3377ebe0>, 4), (<alus.DominoALU object at 0x7f1c3377ec40>, 5), (<alus.DominoALU object at 0x7f1c3377ec70>, 6), (<alus.DominoALU object at 0x7f1c3377e4c0>, 7), (<alus.DominoALU object at 0x7f1c3377eca0>, 8), (<alus.DominoALU object at 0x7f1c3377e580>, 9)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f1c3377e460>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  10
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  10
 * gen_dependency_list: dependency between  9  and  10
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 3), (0, 5), (0, 7), (1, 4), (2, 4), (3, 4), (4, 10), (5, 8), (6, 8), (7, 8), (8, 10), (9, 10)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['state_0', 'p__br_tmp4', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) == 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 6, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 2, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '1'}, {'id': 7, 'opcode': 4, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_4', 'immediate_operand': '1'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '0'}, {'id': 9, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 1, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s12_5', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 3), (0, 5), (0, 7), (1, 4), (2, 4), (3, 4), (4, 10), (5, 8), (6, 8), (7, 8), (8, 10), (9, 10)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['state_0', 'p__br_tmp4', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) == 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 6, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 2, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '1'}, {'id': 7, 'opcode': 4, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_4', 'immediate_operand': '1'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '0'}, {'id': 9, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 1, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s12_5', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
Time taken: 28.677703857421875 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_3_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);

lhs p__br_tmp00 rhs !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;

lhs p__br_tmp10 rhs !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;

lhs p__br_tmp20 rhs 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp6 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;

lhs p__br_tmp30 rhs !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001', 'p_state_001']
p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;

lhs p__br_tmp40 rhs !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001', 'p_state_001']
p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;

lhs p__br_tmp50 rhs 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);

lhs p__br_tmp7 rhs 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50']
p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp7 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_001', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f90f10e3640>, 'write': <dependencyGraph.Statement object at 0x7f90f111f3a0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f90f10e3640>, 'write': <dependencyGraph.Statement object at 0x7f90f111f3a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  14
SCC 0
v p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) stmts len 1
p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
v p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 stmts len 1
p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
v p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;
v p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 stmts len 1
p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;
v p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 stmts len 1
p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
v p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 stmts len 1
p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
v p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) stmts len 1
p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
v p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f90f111fdf0>, <dependencyGraph.Codelet object at 0x7f90f111fe80>, <dependencyGraph.Codelet object at 0x7f90f111fd00>]
p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;
p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;
p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f90f111fd00>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp7', 'p__br_tmp6'}
elements in v_outputs:  {'p_state_001', 'p__br_tmp7', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
2   p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
3   p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
4   p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
5   p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
6   p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1
7   p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
8   p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
9   p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
10   p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001)
11   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp50  not in state vars
 statement:  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp7', 'p_state_001', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp7    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
finding node for codelet:  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
find_codelet for stmt :  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
finding node for codelet:  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
find_codelet for stmt :  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
finding node for codelet:  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
find_codelet for stmt :  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
finding node for codelet:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
find_codelet for stmt :  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
finding node for codelet:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
finding node for codelet:  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
find_codelet for stmt :  None
-----------number of nodes in the graph:  12
---------------number of nodes in the graph:  12
finding node for codelet:  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
find_codelet for stmt :  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1)
finding node for codelet:  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
find_codelet for stmt :  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1
finding node for codelet:  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
find_codelet for stmt :  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1
finding node for codelet:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
find_codelet for stmt :  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
-----------number of nodes in the graph:  12
---------------number of nodes in the graph:  12
number of SCC nodes post splitting:  12
total number of nodes created:  12
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  12
number of nodes in comp_graph:  12
 * recursive_merge strategy: nodes ordered  ['p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);', 'p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);', 'p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;', 'p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;', 'p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;', 'p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);', 'p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);', 'p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);', 'p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;', 'p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;', 'p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
 node outputs:  ['p_pkt_11']
 node inputs:  ['p_state_001', 'p__br_tmp7', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
     |  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
     |  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
     |  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
 * recursive_merge: node ::  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
 node outputs:  ['p__br_tmp7']
 node inputs:  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp30', 'p__br_tmp50']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p__br_tmp7', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
 * recursive_merge: node ::  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
 node outputs:  ['p__br_tmp50']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp30', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
     |  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
 * recursive_merge: node ::  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp30', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
     |  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp30', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;
     |  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p__br_tmp6', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p__br_tmp7', 'p_pkt_10', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp6', 'p_pkt_2']
redundant outputs ['p__br_tmp20', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp10', 'p_state_002', 'p_state_001', 'p__br_tmp30', 'p__br_tmp7']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_1', 'p_pkt_0', 'p__br_tmp6']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p__br_tmp7', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
     |  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p_pkt_1', 'p_pkt_2', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp6', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;
 * recursive_merge: node ::  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp6', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp10', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp6', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'state_0', 'p__br_tmp6']
 node inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp6', 'p_pkt_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;
u:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
u:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
u:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
v:  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v:  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
v:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp00 = !(!(!(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1))))&&1==1);
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
u:  p__br_tmp10 = !(!(1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)))&&1==1;
v:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp20 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1)&&1==1)&&1==1;
v:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp30 = !(!(!(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))))&&1==1;
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
u:  p__br_tmp40 = !(1==1&&!((p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1))&&1==1;
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
u:  p__br_tmp50 = 1==1&&1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_11_bnd_3.sk.out
['comp_12']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12', 2: 'comp_12', 3: 'comp_12', 4: 'comp_12', 5: 'comp_12', 6: 'comp_12', 7: 'comp_12', 8: 'comp_12', 9: 'comp_12', 10: 'comp_12', 11: 'comp_12', 12: 'comp_12', 13: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,9,10,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 256 rows, 184 columns and 598 nonzeros
Model fingerprint: 0x8b8d09f1
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 23 rows and 0 columns
Presolve removed 0 rows and 38 columns
Presolve time: 0.01s
Presolved: 279 rows, 146 columns, 661 nonzeros
Variable types: 0 continuous, 146 integer (131 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 0
T0_A_2 1
T0_A_3 1
T0_A_4 2
T0_A_5 0
T0_A_6 0
T0_A_7 0
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  0.0
action:  5
num stages:  4
stage:  0.0
action:  6
num stages:  4
stage:  0.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  0.0
 > get_alu_stage: table  0 , alu_id =  5 :  0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7f90f10d9790>, 0), (<alus.DominoALU object at 0x7f90f10d9580>, 1), (<alus.DominoALU object at 0x7f90f10d9850>, 2), (<alus.DominoALU object at 0x7f90f10d9be0>, 3), (<alus.DominoALU object at 0x7f90f10d9e50>, 4), (<alus.DominoALU object at 0x7f90f10d9f70>, 5), (<alus.DominoALU object at 0x7f90f10d98b0>, 6), (<alus.DominoALU object at 0x7f90f10d97f0>, 7), (<alus.DominoALU object at 0x7f90f10d9dc0>, 8), (<alus.DominoALU object at 0x7f90f10d9fa0>, 9), (<alus.DominoALU object at 0x7f90f10d9ee0>, 10), (<alus.DominoALU object at 0x7f90f10d9f10>, 11), (<alus.DominoALU object at 0x7f90f10d9880>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f90f10d98e0>, 0)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 2), (0, 3), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) == 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) == 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 13, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 2, 'opcode': 8, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 4, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '24'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_2', 'immediate_operand': '16'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '16'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '3'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '3'}, {'id': 9, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '19'}, {'id': 10, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_6', 'immediate_operand': '0'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_7', 'immediate_operand': '26'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '0'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 2), (0, 3), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) == 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) == 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 13, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 2, 'opcode': 8, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 4, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '24'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_2', 'immediate_operand': '16'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '16'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '3'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '3'}, {'id': 9, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '19'}, {'id': 10, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_6', 'immediate_operand': '0'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_7', 'immediate_operand': '26'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '0'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
Time taken: 22.070030212402344 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_4_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff160dca640>, 'write': <dependencyGraph.Statement object at 0x7ff160e05130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff160dca640>, 'write': <dependencyGraph.Statement object at 0x7ff160e05130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
v p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
v p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff160e05b50>, <dependencyGraph.Codelet object at 0x7ff160e05be0>, <dependencyGraph.Codelet object at 0x7ff160e05ca0>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff160e05ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
2   p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
5   p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
6   p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
9   state_0 = p_state_002
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
finding node for codelet:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1
finding node for codelet:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;', 'p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);', 'p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;', 'p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 node outputs:  ['p_pkt_11']
 node inputs:  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_state_001', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p_pkt_2', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp5', 'p_state_001', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_pkt_2', 'p__br_tmp4']
redundant outputs ['p__br_tmp20', 'p__br_tmp00', 'p__br_tmp5', 'p_state_001', 'p_state_002', 'p__br_tmp10', 'p__br_tmp30']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0', 'p__br_tmp4', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_state_001', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp10', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000', 'p_pkt_2', 'p__br_tmp4', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_pkt_2', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_pkt_2', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'p__br_tmp4', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p_pkt_2', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = 1==1&&!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1)&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp20 = 1==1&&!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,3,5,6,9,10,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 258 rows, 184 columns and 602 nonzeros
Model fingerprint: 0xf151438a
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 41 columns
Presolve time: 0.01s
Presolved: 275 rows, 143 columns, 650 nonzeros
Variable types: 0 continuous, 143 integer (128 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 0
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 0
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  0.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7ff160dc1910>, 0), (<alus.DominoALU object at 0x7ff160dc1250>, 1), (<alus.DominoALU object at 0x7ff160dc19a0>, 2), (<alus.DominoALU object at 0x7ff160dc16d0>, 3), (<alus.DominoALU object at 0x7ff160dc1be0>, 4), (<alus.DominoALU object at 0x7ff160dc1c40>, 5), (<alus.DominoALU object at 0x7ff160dc1c70>, 6), (<alus.DominoALU object at 0x7ff160dc14c0>, 7), (<alus.DominoALU object at 0x7ff160dc1ca0>, 8), (<alus.DominoALU object at 0x7ff160dc14f0>, 9), (<alus.DominoALU object at 0x7ff160dc1b50>, 10), (<alus.DominoALU object at 0x7ff160dc1d60>, 11), (<alus.DominoALU object at 0x7ff160dc1d90>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7ff160dc1460>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'p__br_tmp4', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) != 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 4)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = 5 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 2, 'opcode': 5, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 3, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '14'}, {'id': 5, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '3'}, {'id': 6, 'opcode': 15, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '4'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '3'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '31'}, {'id': 9, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_5', 'immediate_operand': '17'}, {'id': 10, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '3'}, {'id': 11, 'opcode': 14, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_7', 'immediate_operand': '27'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '15'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'p__br_tmp4', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) != 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 4)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = 5 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 2, 'opcode': 5, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 3, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '14'}, {'id': 5, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '3'}, {'id': 6, 'opcode': 15, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '4'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '3'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '31'}, {'id': 9, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_5', 'immediate_operand': '17'}, {'id': 10, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '3'}, {'id': 11, 'opcode': 14, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_7', 'immediate_operand': '27'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '15'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '31'}]}
Time taken: 24.466994762420654 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_5_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);

lhs p__br_tmp00 rhs !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;

lhs p__br_tmp10 rhs !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;

lhs p__br_tmp20 rhs !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ffa44c0a640>, 'write': <dependencyGraph.Statement object at 0x7ffa44c45130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ffa44c0a640>, 'write': <dependencyGraph.Statement object at 0x7ffa44c45130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) stmts len 1
p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
v p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 stmts len 1
p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
v p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ffa44c45b50>, <dependencyGraph.Codelet object at 0x7ffa44c45be0>, <dependencyGraph.Codelet object at 0x7ffa44c45ca0>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ffa44c45ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p_state_001', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p_state_001', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
2   p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
5   p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
6   p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
9   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
find_codelet for stmt :  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
finding node for codelet:  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
find_codelet for stmt :  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1)
finding node for codelet:  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
finding node for codelet:  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1) p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1 p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;', 'p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);', 'p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;', 'p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 node outputs:  ['p_pkt_11']
 node inputs:  ['p_pkt_10', 'p_state_001', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
redundant outputs ['p__br_tmp30', 'p__br_tmp5', 'p_state_002', 'p__br_tmp20', 'p_state_001', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp00', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_2', 'p_state_000', 'p_pkt_1', 'p__br_tmp4', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'state_0', 'p__br_tmp4']
 node inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1); p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1; p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = !(!(!(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000)))&&1==1&&1==1);
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = !(1==1&&(p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp20 = !(!(1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&(p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,5,6,7,9,10,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 259 rows, 184 columns and 604 nonzeros
Model fingerprint: 0xebc3a99b
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 15 rows and 0 columns
Presolve removed 0 rows and 42 columns
Presolve time: 0.01s
Presolved: 274 rows, 142 columns, 647 nonzeros
Variable types: 0 continuous, 142 integer (127 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 0
T0_A_2 1
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 1
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7ffa44c01790>, 0), (<alus.DominoALU object at 0x7ffa44c01490>, 1), (<alus.DominoALU object at 0x7ffa44c01820>, 2), (<alus.DominoALU object at 0x7ffa44c01190>, 3), (<alus.DominoALU object at 0x7ffa44c01be0>, 4), (<alus.DominoALU object at 0x7ffa44c01c40>, 5), (<alus.DominoALU object at 0x7ffa44c01c70>, 6), (<alus.DominoALU object at 0x7ffa44c012e0>, 7), (<alus.DominoALU object at 0x7ffa44c01ca0>, 8), (<alus.DominoALU object at 0x7ffa44c013d0>, 9), (<alus.DominoALU object at 0x7ffa44c01b50>, 10), (<alus.DominoALU object at 0x7ffa44c01d60>, 11), (<alus.DominoALU object at 0x7ffa44c01d90>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7ffa44c017f0>, 0)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 2), (0, 3), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) != 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - 0) == 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 24, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '16'}, {'id': 2, 'opcode': 7, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_0', 'immediate_operand': '4'}, {'id': 3, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '17'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '0'}, {'id': 5, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '2'}, {'id': 7, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '25'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '1'}, {'id': 9, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '28'}, {'id': 10, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_6', 'immediate_operand': '15'}, {'id': 11, 'opcode': 1, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_7', 'immediate_operand': '2'}, {'id': 12, 'opcode': 1, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '3'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 2), (0, 3), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) != 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_0 - 0) == 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 24, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '16'}, {'id': 2, 'opcode': 7, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_0', 'immediate_operand': '4'}, {'id': 3, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '17'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '0'}, {'id': 5, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '2'}, {'id': 7, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '25'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '1'}, {'id': 9, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '28'}, {'id': 10, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_6', 'immediate_operand': '15'}, {'id': 11, 'opcode': 1, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_7', 'immediate_operand': '2'}, {'id': 12, 'opcode': 1, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '3'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
Time taken: 42.74045991897583 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_6_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;

lhs p__br_tmp00 rhs !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;

lhs p__br_tmp10 rhs !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;

lhs p__br_tmp20 rhs !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;

lhs p__br_tmp30 rhs !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp8 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp8 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;

lhs p__br_tmp40 rhs !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;

lhs p__br_tmp50 rhs !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;

lhs p__br_tmp60 rhs !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;

lhs p__br_tmp70 rhs (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);

lhs p__br_tmp9 rhs 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70']
p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp9 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_001', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fda5292e640>, 'write': <dependencyGraph.Statement object at 0x7fda52969220>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fda5292e640>, 'write': <dependencyGraph.Statement object at 0x7fda52969220>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  16
SCC 0
v p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
v p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 stmts len 1
p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;
v p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 stmts len 1
p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;
v p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 stmts len 1
p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;
v p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 stmts len 1
p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;
v p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 stmts len 1
p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;
v p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 stmts len 1
p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;
v p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 stmts len 1
p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
v p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) stmts len 1
p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
v p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fda52969f10>, <dependencyGraph.Codelet object at 0x7fda52969fa0>, <dependencyGraph.Codelet object at 0x7fda52969fd0>]
p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;
p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;
p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;
p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;
p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;
p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;
p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fda52969fd0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp9', 'p_state_001', 'p__br_tmp8'}
elements in v_outputs:  {'p__br_tmp9', 'p_state_001', 'p__br_tmp8'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
2   p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
3   p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
4   p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
5   p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
6   p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
7   p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1
8   p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1
9   p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1
10   p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
11   p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
12   p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001)
13   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp9', 'p_state_001', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70']
 state vars:  ['state_0']
p__br_tmp70  not in state vars
 statement:  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp50  not in state vars
 statement:  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp60  not in state vars
 statement:  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp9    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp8    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
find_codelet for stmt :  None
-----------number of nodes in the graph:  14
---------------number of nodes in the graph:  14
finding node for codelet:  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
find_codelet for stmt :  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
finding node for codelet:  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
find_codelet for stmt :  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
finding node for codelet:  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
find_codelet for stmt :  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
finding node for codelet:  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
find_codelet for stmt :  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
finding node for codelet:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
finding node for codelet:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
-----------number of nodes in the graph:  14
---------------number of nodes in the graph:  14
finding node for codelet:  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
find_codelet for stmt :  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1
finding node for codelet:  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
find_codelet for stmt :  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1
finding node for codelet:  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
find_codelet for stmt :  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1
finding node for codelet:  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
find_codelet for stmt :  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1
finding node for codelet:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
-----------number of nodes in the graph:  14
---------------number of nodes in the graph:  14
number of SCC nodes post splitting:  14
total number of nodes created:  14
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1 p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1 p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1 p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1 p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1 p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1 p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  14
number of nodes in comp_graph:  14
 * recursive_merge strategy: nodes ordered  ['p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);', 'p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);', 'p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;', 'p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;', 'p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;', 'p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;', 'p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);', 'p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);', 'p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;', 'p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;', 'p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;', 'p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
 node outputs:  ['p_pkt_11']
 node inputs:  ['p__br_tmp9', 'p_state_001', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
     |  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
     |  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
     |  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
 * recursive_merge: node ::  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
 node outputs:  ['p__br_tmp9']
 node inputs:  ['p__br_tmp70', 'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp60', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp9', 'p_state_001', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
 * recursive_merge: node ::  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
 node outputs:  ['p__br_tmp70']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp70', 'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp60', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
     |  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
 * recursive_merge: node ::  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;
 node outputs:  ['p__br_tmp60']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp70', 'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp60', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;
     |  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;
 * recursive_merge: node ::  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;
 node outputs:  ['p__br_tmp50']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp70', 'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp60', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;
     |  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;
 * recursive_merge: node ::  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp70', 'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp60', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;
     |  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp9', 'p_state_001', 'p_pkt_0', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_pkt_2']
redundant outputs ['p_state_002', 'p__br_tmp9', 'p__br_tmp70', 'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp60', 'p__br_tmp00', 'p_state_001']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0', 'p__br_tmp8', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp9', 'p_state_001', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
     |  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp8']
 node inputs:  ['p__br_tmp10', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp8', 'p_pkt_2', 'p_pkt_1', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;
 * recursive_merge: node ::  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp70', 'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp60', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp8', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp8', 'p_pkt_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1; p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1; p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1; p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1; p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1; p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1; p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
v:  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;
u:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;
u:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;
u:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
u:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
v:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp00 = !(!(!(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp10 = !(!(!(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))))&&1==1;
v:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp20 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))))&&1==1;
v:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1;
v:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp40 = !(!(!(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp50 = !(!(!(!((p_state_001>1)&&(p_pkt_0<p_state_001)))))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp60 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001)))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp70 = (p_state_001>1)&&(p_pkt_0<p_state_001)&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_11_bnd_3.sk.out
['comp_14']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14', 2: 'comp_14', 3: 'comp_14', 4: 'comp_14', 5: 'comp_14', 6: 'comp_14', 7: 'comp_14', 8: 'comp_14', 9: 'comp_14', 10: 'comp_14', 11: 'comp_14', 12: 'comp_14', 13: 'comp_14'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,6,9,10,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 257 rows, 184 columns and 600 nonzeros
Model fingerprint: 0x726ffad0
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 19 rows and 0 columns
Presolve removed 0 rows and 40 columns
Presolve time: 0.01s
Presolved: 276 rows, 144 columns, 653 nonzeros
Variable types: 0 continuous, 144 integer (129 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 0
T0_A_2 0
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 0
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  0.0
action:  1
num stages:  4
stage:  0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  0.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7fda52922e80>, 0), (<alus.DominoALU object at 0x7fda52969ca0>, 1), (<alus.DominoALU object at 0x7fda528af2b0>, 2), (<alus.DominoALU object at 0x7fda528af1f0>, 3), (<alus.DominoALU object at 0x7fda528af160>, 4), (<alus.DominoALU object at 0x7fda528af370>, 5), (<alus.DominoALU object at 0x7fda528af3d0>, 6), (<alus.DominoALU object at 0x7fda528af400>, 7), (<alus.DominoALU object at 0x7fda528af430>, 8), (<alus.DominoALU object at 0x7fda528af460>, 9), (<alus.DominoALU object at 0x7fda528af490>, 10), (<alus.DominoALU object at 0x7fda528af4c0>, 11), (<alus.DominoALU object at 0x7fda528af4f0>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fda52969cd0>, 0)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp8', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) == 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 24, 'operand0': '1', 'operand1': 'p_pkt_2', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 2, 'opcode': 3, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '30'}, {'id': 3, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '30'}, {'id': 5, 'opcode': 19, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 7, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': '1', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '13'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '2'}, {'id': 9, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '23'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '13'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_7', 'immediate_operand': '1'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '2'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp8', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) == 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 24, 'operand0': '1', 'operand1': 'p_pkt_2', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 2, 'opcode': 3, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '30'}, {'id': 3, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '30'}, {'id': 5, 'opcode': 19, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 7, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': '1', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '13'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '2'}, {'id': 9, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '23'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '13'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_7', 'immediate_operand': '1'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '2'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '29'}]}
Time taken: 26.802061796188354 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_7_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));

lhs p__br_tmp00 rhs !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));

 is_read_flank: processing rhs_vars =  ['p_pkt_2', 'p_state_000', 'p_state_000']
p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));

lhs p__br_tmp10 rhs 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));

 is_read_flank: processing rhs_vars =  ['p_pkt_2', 'p_state_000', 'p_state_000']
p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);

lhs p__br_tmp20 rhs 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_2', 'p_state_000']
p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp5 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp5 ? (p_state_000) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000', 'p_pkt_0']
p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000', 'p_pkt_1', 'p_state_000']
p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);

lhs p__br_tmp30 rhs !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_2', 'p_state_001', 'p_state_001']
p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);

lhs p__br_tmp40 rhs 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_2', 'p_state_001', 'p_state_001']
p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);

lhs p__br_tmp6 rhs 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40']
p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp6 ? (p_pkt_2) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_2', 'p_pkt_00']
p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_2', 'p_pkt_1', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));
RAW p_state_000 = state_0; p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);
RAW p_state_000 = state_0; p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
RAW p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
RAW p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0); p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
RAW p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);
RAW p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);
RAW p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001);
RAW p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
RAW p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
RAW p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
RAW p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fc5890e1640>, 'write': <dependencyGraph.Statement object at 0x7fc58911c4f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc5890e1640>, 'write': <dependencyGraph.Statement object at 0x7fc58911c4f0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) stmts len 1
p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
v p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) stmts len 1
p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));
v p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) stmts len 1
p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);
v p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
v p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) stmts len 1
p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);
v p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) stmts len 1
p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);
v p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) stmts len 1
p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
v p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc58911cd60>, <dependencyGraph.Codelet object at 0x7fc58911cdf0>, <dependencyGraph.Codelet object at 0x7fc58911cca0>]
p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));
p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);
p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);
p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);
p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc58911cca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp6', 'p__br_tmp5', 'p_state_000'}
p_state_000  is read flank
elements in v_outputs:  {'p__br_tmp6', 'p__br_tmp5', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1))
2   p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))
3   p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000)
4   p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
5   p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000)
6   p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1)
7   p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1)
8   p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
9   p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001)
10   state_0 = p_state_002
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1))
 rhs_vars:  ['p_pkt_2', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_2', 'p_pkt_1', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000)
 rhs_vars:  ['p__br_tmp5', 'p_state_000', 'p_pkt_1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1)
 rhs_vars:  ['p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))
 rhs_vars:  ['p_pkt_2', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000)
 rhs_vars:  ['p_state_000', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1)
 rhs_vars:  ['p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp6    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1))
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1))
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
find_codelet for stmt :  None
-----------number of nodes in the graph:  11
---------------number of nodes in the graph:  11
finding node for codelet:  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1))
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1))
find_codelet for stmt :  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1))
finding node for codelet:  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))
find_codelet for stmt :  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))
finding node for codelet:  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000)
find_codelet for stmt :  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000)
finding node for codelet:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
find_codelet for stmt :  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
-----------number of nodes in the graph:  11
---------------number of nodes in the graph:  11
number of SCC nodes post splitting:  11
total number of nodes created:  11
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)) p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000) p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000) p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1) p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  11
number of nodes in comp_graph:  11
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);', 'p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);', 'p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);', 'p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);', 'p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);', 'p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);', 'p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);', 'p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);', 'p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));', 'p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp6', 'p_pkt_00', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
     |  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_pkt_00', 'p_pkt_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
     |  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
     |  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
     |  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
 * recursive_merge: node ::  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_state_001', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);
     |  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);
 * recursive_merge: node ::  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);
     |  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);
 * recursive_merge: node ::  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp5', 'p_pkt_1', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
     |  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p__br_tmp5', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p__br_tmp5', 'p_pkt_1', 'p_state_000']
redundant outputs ['p__br_tmp00', 'p_state_002', 'p_state_001', 'p__br_tmp40', 'p__br_tmp6', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp5', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_pkt_00', 'p_pkt_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p__br_tmp5', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p__br_tmp5', 'p_pkt_1', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
     |  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp5', 'p_pkt_1', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_2', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p__br_tmp5', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p__br_tmp5', 'p_pkt_1', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_pkt_2', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p__br_tmp5', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p__br_tmp5', 'p_pkt_1', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_2', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p__br_tmp5', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p_pkt_2', 'p_state_000', 'p__br_tmp5', 'p_pkt_1', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp5', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_1', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_2', 'p_pkt_0', 'p_pkt_1', 'p__br_tmp5', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1)); p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000); p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1); p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_pkt_2+p_pkt_1) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
u:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
v:  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
u:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v:  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
u:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v:  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
u:  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
v:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp00 = !(!(!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1))&&1==1));
v:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
u:  p__br_tmp10 = 1==1&&!(!((p_pkt_2<p_state_000)&&(p_state_000>1)&&1==1));
v:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp20 = 1==1&&1==1&&(p_state_000>1)&&(p_pkt_2<p_state_000);
v:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
v:  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);
u:  p_state_001 = p__br_tmp5 ? (p_state_000+p_pkt_1) : (p_state_000);
v:  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);
u:  p__br_tmp30 = !(!(!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1))&&1==1);
v:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
u:  p__br_tmp40 = 1==1&&!((p_pkt_2<p_state_001)&&(p_state_001>1)&&1==1);
v:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_1', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_3.sk.out
['comp_11']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11', 2: 'comp_11', 3: 'comp_11', 4: 'comp_11', 5: 'comp_11', 6: 'comp_11', 7: 'comp_11', 8: 'comp_11', 9: 'comp_11', 10: 'comp_11', 11: 'comp_11', 12: 'comp_11', 13: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,3,5,6,9,10,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 257 rows, 184 columns and 600 nonzeros
Model fingerprint: 0x35700a48
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 19 rows and 0 columns
Presolve removed 0 rows and 40 columns
Presolve time: 0.01s
Presolved: 276 rows, 144 columns, 653 nonzeros
Variable types: 0 continuous, 144 integer (129 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 0
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 0
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 0
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  0.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  0.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
alu  11  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7fc5890d76a0>, 0), (<alus.DominoALU object at 0x7fc5890d7b50>, 1), (<alus.DominoALU object at 0x7fc5890d79a0>, 2), (<alus.DominoALU object at 0x7fc5890d7bb0>, 3), (<alus.DominoALU object at 0x7fc5890d7df0>, 4), (<alus.DominoALU object at 0x7fc5890d7e50>, 5), (<alus.DominoALU object at 0x7fc5890d7e80>, 6), (<alus.DominoALU object at 0x7fc5890d7eb0>, 7), (<alus.DominoALU object at 0x7fc5890d7ee0>, 8), (<alus.DominoALU object at 0x7fc5890d7f10>, 9), (<alus.DominoALU object at 0x7fc5890d7f40>, 10), (<alus.DominoALU object at 0x7fc5890d7f70>, 11), (<alus.DominoALU object at 0x7fc5890d7fa0>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fc5890d7a60>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_1', 'p_pkt_2'], 'outputs': ['p__br_tmp5', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 12, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 2, 'opcode': 9, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 3, 'opcode': 3, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 4, 'opcode': 19, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '30'}, {'id': 5, 'opcode': 3, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_2', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 19, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_4', 'immediate_operand': '1'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '5'}, {'id': 9, 'opcode': 3, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_2', 'result': '_out_s12_6', 'immediate_operand': '31'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '31'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '3'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_01', 'immediate_operand': '16'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_1', 'p_pkt_2'], 'outputs': ['p__br_tmp5', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 12, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 2, 'opcode': 9, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 3, 'opcode': 3, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 4, 'opcode': 19, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '30'}, {'id': 5, 'opcode': 3, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_2', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 19, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_4', 'immediate_operand': '1'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '5'}, {'id': 9, 'opcode': 3, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_2', 'result': '_out_s12_6', 'immediate_operand': '31'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '31'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '3'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_01', 'immediate_operand': '16'}]}
Time taken: 12.24323582649231 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_8_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));

lhs p__br_tmp00 rhs 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;

lhs p__br_tmp10 rhs 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001', 'p_state_001']
p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;

lhs p__br_tmp30 rhs 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fa5cf18e640>, 'write': <dependencyGraph.Statement object at 0x7fa5cf1c9130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa5cf18e640>, 'write': <dependencyGraph.Statement object at 0x7fa5cf1c9130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) stmts len 1
p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
v p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;
v p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 stmts len 1
p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa5cf1c9b50>, <dependencyGraph.Codelet object at 0x7fa5cf1c9be0>, <dependencyGraph.Codelet object at 0x7fa5cf1c9ca0>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;
p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa5cf1c9ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
2   p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
5   p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1
6   p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
9   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
finding node for codelet:  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
find_codelet for stmt :  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
finding node for codelet:  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))))
finding node for codelet:  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
find_codelet for stmt :  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))) p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1 p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;', 'p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);', 'p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;', 'p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 node outputs:  ['p_pkt_11']
 node inputs:  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_pkt_0', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_2']
redundant outputs ['p__br_tmp30', 'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00', 'p_state_002', 'p_state_001', 'p__br_tmp5']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0', 'p__br_tmp4', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp10', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_pkt_1', 'p_pkt_2', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp4', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp4', 'p_state_000', 'p_pkt_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1)))); p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1; p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = 1==1&&!(1==1&&!(!((p_pkt_0<p_state_000)&&(p_state_000>1))));
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = 1==1&&!((p_pkt_0<p_state_000)&&(p_state_000>1))&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp20 = 1==1&&!(!((p_pkt_0<p_state_001)&&(p_state_001>1)))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,5,7,9,10,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2), (0, 5), (0, 7), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 258 rows, 184 columns and 602 nonzeros
Model fingerprint: 0xaf9fef7f
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 41 columns
Presolve time: 0.01s
Presolved: 275 rows, 143 columns, 650 nonzeros
Variable types: 0 continuous, 143 integer (128 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 0
T0_A_4 2
T0_A_5 1
T0_A_6 0
T0_A_7 1
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  0.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  0.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7fa5cf184910>, 0), (<alus.DominoALU object at 0x7fa5cf184250>, 1), (<alus.DominoALU object at 0x7fa5cf1849a0>, 2), (<alus.DominoALU object at 0x7fa5cf1846d0>, 3), (<alus.DominoALU object at 0x7fa5cf184be0>, 4), (<alus.DominoALU object at 0x7fa5cf184c40>, 5), (<alus.DominoALU object at 0x7fa5cf184c70>, 6), (<alus.DominoALU object at 0x7fa5cf184ca0>, 7), (<alus.DominoALU object at 0x7fa5cf184cd0>, 8), (<alus.DominoALU object at 0x7fa5cf184d00>, 9), (<alus.DominoALU object at 0x7fa5cf184d30>, 10), (<alus.DominoALU object at 0x7fa5cf184d60>, 11), (<alus.DominoALU object at 0x7fa5cf184d90>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fa5cf184460>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 5), (0, 7), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) == 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 2, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 3, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 4, 'opcode': 22, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '30'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_2', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '3'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '17'}, {'id': 9, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '5'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '3'}, {'id': 11, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_7', 'immediate_operand': '0'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '1'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '4'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 5), (0, 7), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) == 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 2, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 3, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 4, 'opcode': 22, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '30'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_2', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '3'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '17'}, {'id': 9, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '5'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '3'}, {'id': 11, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_7', 'immediate_operand': '0'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '1'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '4'}]}
Time taken: 15.729741334915161 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_9_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp2 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001', 'p_state_001']
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp3 rhs 1&&!(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp3 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_001', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fdeaebdd640>, 'write': <dependencyGraph.Statement object at 0x7fdeaec184c0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fdeaebdd640>, 'write': <dependencyGraph.Statement object at 0x7fdeaec184c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  10
SCC 0
v p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
v p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
v p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdeaec18b20>, <dependencyGraph.Codelet object at 0x7fdeaec180a0>, <dependencyGraph.Codelet object at 0x7fdeaec18a30>]
p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdeaec18a30>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp2', 'p_state_001', 'p__br_tmp3'}
elements in v_outputs:  {'p__br_tmp2', 'p_state_001', 'p__br_tmp3'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
4   p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
5   p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10)
6   p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001)
7   state_0 = p_state_002
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp3', 'p_state_001', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp2    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp3    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
finding node for codelet:  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
find_codelet for stmt :  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
finding node for codelet:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
find_codelet for stmt :  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
finding node for codelet:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
finding node for codelet:  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);', 'p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;', 'p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);', 'p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
 node outputs:  ['p_pkt_11']
 node inputs:  ['p_state_001', 'p_pkt_10', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
     |  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
     |  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
     |  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
 * recursive_merge: node ::  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp3']
 node inputs:  ['p__br_tmp00', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_10', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
     |  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp2', 'p_pkt_2', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_001', 'p_pkt_10', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p_state_000', 'p__br_tmp2', 'p_pkt_2', 'p_pkt_0', 'p_state_000']
redundant outputs ['p__br_tmp10', 'p_state_002', 'p__br_tmp00', 'p_state_001', 'p__br_tmp3']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p__br_tmp2', 'p_pkt_1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_10', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp2', 'p_state_000', 'p_pkt_2', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p_state_000', 'p__br_tmp2', 'p_pkt_2', 'p_pkt_0', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp2', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_2', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
u:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp2 = 1&&(p__br_tmp00);
v:  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp2 = 1&&(p__br_tmp00);
v:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&!((p_state_000>1)&&(p_pkt_0<p_state_000)&&1==1)&&1==1&&1==1;
v:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp10 = 1==1&&1==1&&(p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
v:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_11_bnd_3.sk.out
['comp_8']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8', 2: 'comp_8', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8', 7: 'comp_8', 8: 'comp_8', 9: 'comp_8', 10: 'comp_8', 11: 'comp_8', 12: 'comp_8', 13: 'comp_8'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,3,5,9,10,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 3), (0, 5), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 257 rows, 184 columns and 600 nonzeros
Model fingerprint: 0x95a153ba
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 19 rows and 0 columns
Presolve removed 0 rows and 40 columns
Presolve time: 0.01s
Presolved: 276 rows, 144 columns, 653 nonzeros
Variable types: 0 continuous, 144 integer (129 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 0
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 0
T0_A_7 0
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  0.0
action:  6
num stages:  4
stage:  0.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7fdeaebd1430>, 0), (<alus.DominoALU object at 0x7fdeaebd1100>, 1), (<alus.DominoALU object at 0x7fdeaebd1460>, 2), (<alus.DominoALU object at 0x7fdeaebd1160>, 3), (<alus.DominoALU object at 0x7fdeaebd18b0>, 4), (<alus.DominoALU object at 0x7fdeaebd1910>, 5), (<alus.DominoALU object at 0x7fdeaebd1940>, 6), (<alus.DominoALU object at 0x7fdeaebd1970>, 7), (<alus.DominoALU object at 0x7fdeaebd19a0>, 8), (<alus.DominoALU object at 0x7fdeaebd19d0>, 9), (<alus.DominoALU object at 0x7fdeaebd1a00>, 10), (<alus.DominoALU object at 0x7fdeaebd1a30>, 11), (<alus.DominoALU object at 0x7fdeaebd1a60>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fdeaebd1490>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp2', 'p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) != 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 2, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '30'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 6, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 9, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_3', 'immediate_operand': '0'}, {'id': 7, 'opcode': 3, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '29'}, {'id': 8, 'opcode': 12, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '3'}, {'id': 9, 'opcode': 8, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': '1', 'result': '_out_s12_6', 'immediate_operand': '22'}, {'id': 11, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_7', 'immediate_operand': '10'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '8'}, {'id': 13, 'opcode': 3, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp2', 'p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) != 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 2, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '30'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 6, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 9, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_3', 'immediate_operand': '0'}, {'id': 7, 'opcode': 3, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '29'}, {'id': 8, 'opcode': 12, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '3'}, {'id': 9, 'opcode': 8, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': '1', 'result': '_out_s12_6', 'immediate_operand': '22'}, {'id': 11, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_7', 'immediate_operand': '10'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '8'}, {'id': 13, 'opcode': 3, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
Time taken: 43.70501518249512 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_10_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;

lhs p__br_tmp00 rhs !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;

lhs p__br_tmp10 rhs !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;

lhs p__br_tmp20 rhs !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_pkt_0', 'p_state_001']
p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;

lhs p__br_tmp30 rhs (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f9d2271c640>, 'write': <dependencyGraph.Statement object at 0x7f9d22757130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f9d2271c640>, 'write': <dependencyGraph.Statement object at 0x7f9d22757130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 stmts len 1
p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
v p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 stmts len 1
p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 stmts len 1
p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;
v p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 stmts len 1
p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9d22757b50>, <dependencyGraph.Codelet object at 0x7f9d22757be0>, <dependencyGraph.Codelet object at 0x7f9d22757ca0>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;
p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9d22757ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p_state_001', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p_state_001', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
2   p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
5   p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1
6   p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
9   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1
 rhs_vars:  ['p_state_001', 'p_pkt_0', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
 rhs_vars:  ['p_state_000', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
find_codelet for stmt :  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
finding node for codelet:  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
find_codelet for stmt :  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1
finding node for codelet:  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
finding node for codelet:  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1 p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1 p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;', 'p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);', 'p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;', 'p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 node outputs:  ['p_pkt_11']
 node inputs:  ['p_pkt_10', 'p_state_001', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2']
redundant outputs ['p__br_tmp10', 'p__br_tmp20', 'p__br_tmp5', 'p__br_tmp00', 'p_state_001', 'p_state_002', 'p__br_tmp30']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_1', 'p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_001', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp10', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'state_0', 'p__br_tmp4']
 node inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp4', 'p_pkt_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1; p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1; p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (p_state_001+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = !(!(!((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = !((p_state_000>1)&&(p_pkt_0<p_state_000))&&1==1&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp20 = !(!((p_state_001>1)&&(p_pkt_0<p_state_001))&&1==1)&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = (p_pkt_0<p_state_001)&&(p_state_001>1)&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_11_bnd_3.sk.out
['comp_10']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10', 2: 'comp_10', 3: 'comp_10', 4: 'comp_10', 5: 'comp_10', 6: 'comp_10', 7: 'comp_10', 8: 'comp_10', 9: 'comp_10', 10: 'comp_10', 11: 'comp_10', 12: 'comp_10', 13: 'comp_10'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,3,5,6,7,9,10,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 258 rows, 184 columns and 602 nonzeros
Model fingerprint: 0x76f88132
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 41 columns
Presolve time: 0.01s
Presolved: 275 rows, 143 columns, 650 nonzeros
Variable types: 0 continuous, 143 integer (128 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 0
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 1
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 0
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  0.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
alu  11  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7f9d22712790>, 0), (<alus.DominoALU object at 0x7f9d22712490>, 1), (<alus.DominoALU object at 0x7f9d22712820>, 2), (<alus.DominoALU object at 0x7f9d22712190>, 3), (<alus.DominoALU object at 0x7f9d22712be0>, 4), (<alus.DominoALU object at 0x7f9d22712c40>, 5), (<alus.DominoALU object at 0x7f9d22712c70>, 6), (<alus.DominoALU object at 0x7f9d22712ca0>, 7), (<alus.DominoALU object at 0x7f9d22712cd0>, 8), (<alus.DominoALU object at 0x7f9d22712d00>, 9), (<alus.DominoALU object at 0x7f9d22712d30>, 10), (<alus.DominoALU object at 0x7f9d22712d60>, 11), (<alus.DominoALU object at 0x7f9d22712d90>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f9d227127f0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + -25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 5, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 2, 'opcode': 19, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 12, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 4, 'opcode': 5, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '2'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_2', 'immediate_operand': '10'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_4', 'immediate_operand': '5'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '0'}, {'id': 9, 'opcode': 5, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '1'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '0'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '25'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '6'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '16'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + -25;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 5, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 2, 'opcode': 19, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 12, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 4, 'opcode': 5, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '2'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_2', 'immediate_operand': '10'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_4', 'immediate_operand': '5'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '0'}, {'id': 9, 'opcode': 5, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '1'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '0'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '25'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '6'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '16'}]}
Time taken: 34.42977714538574 s
preprocessor time:
