running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_1_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_000==1&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&p_state_001==2&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_state_102==1000&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f82c181f640>, 'write': <dependencyGraph.Statement object at 0x7f82c185a6a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f82c185a790>, 'write': <dependencyGraph.Statement object at 0x7f82c185a220>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f82c181f640>, 'write': <dependencyGraph.Statement object at 0x7f82c185a6a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f82c185a790>, 'write': <dependencyGraph.Statement object at 0x7f82c185a220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
total number of nodes created:  16
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f82c185af10>, <dependencyGraph.Codelet object at 0x7f82c185ad60>, <dependencyGraph.Codelet object at 0x7f82c185afd0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f82c185af10>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002', 'p_state_102', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp3', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_101', 'p__br_tmp6', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp4', 'p_state_001', 'p_state_102', 'p_state_002', 'state_0', 'p_state_000', 'p_state_100', 'p__br_tmp20', 'state_1', 'p__br_tmp5']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f82c1811370>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f82c18114f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p_state_101', 'p__br_tmp6', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp4', 'p_state_001', 'p_state_102', 'p_state_002', 'state_0', 'p_state_000', 'p_state_100', 'p__br_tmp20', 'state_1', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_2);\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + 2;\n', '      state_1 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 1)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 2;\n', '        state_1 = state_1_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + pkt_1;\n', '        state_1 = state_1_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p_state_101', 'p__br_tmp6', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp4', 'p_state_001', 'p_state_102', 'p_state_002', 'state_0', 'p_state_000', 'p_state_100', 'p__br_tmp20', 'state_1', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_2);\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + 2;\n', '      state_1 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 1)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 2;\n', '        state_1 = state_1_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + pkt_1;\n', '        state_1 = state_1_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '2'}]}
Time taken: 1.3025951385498047 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_2_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_000==1&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&p_state_001==2&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_state_102==1000&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fd251882790>, 'write': <dependencyGraph.Statement object at 0x7fd251882220>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fd251847640>, 'write': <dependencyGraph.Statement object at 0x7fd2518826a0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fd251882790>, 'write': <dependencyGraph.Statement object at 0x7fd251882220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd251847640>, 'write': <dependencyGraph.Statement object at 0x7fd2518826a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  16
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd251882f10>, <dependencyGraph.Codelet object at 0x7fd251882d60>, <dependencyGraph.Codelet object at 0x7fd251882fd0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd251882f10>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_102', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp3', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_100', 'p_state_000', 'p__br_tmp4', 'p__br_tmp00', 'p_state_101', 'state_1', 'p__br_tmp10', 'p__br_tmp6', 'p__br_tmp5', 'p__br_tmp20', 'p_state_002', 'state_0', 'p_state_102', 'p_state_001']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fd25183a370>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fd25183a4f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p_state_100', 'p_state_000', 'p__br_tmp4', 'p__br_tmp00', 'p_state_101', 'state_1', 'p__br_tmp10', 'p__br_tmp6', 'p__br_tmp5', 'p__br_tmp20', 'p_state_002', 'state_0', 'p_state_102', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 6 + pkt_2;\n', '      state_1 = state_1_1 + 39;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + pkt_2;\n', '        state_1 = state_1_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1 + 2;\n', '        state_1 = 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p_state_100', 'p_state_000', 'p__br_tmp4', 'p__br_tmp00', 'p_state_101', 'state_1', 'p__br_tmp10', 'p__br_tmp6', 'p__br_tmp5', 'p__br_tmp20', 'p_state_002', 'state_0', 'p_state_102', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 6 + pkt_2;\n', '      state_1 = state_1_1 + 39;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + pkt_2;\n', '        state_1 = state_1_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1 + 2;\n', '        state_1 = 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
Time taken: 1.2344143390655518 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_3_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_state_000==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1;

lhs p__br_tmp10 rhs 1==1&&1==1&&p_state_001==2&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_state_102==1000&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f7a4e621790>, 'write': <dependencyGraph.Statement object at 0x7f7a4e621220>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f7a4e5e6640>, 'write': <dependencyGraph.Statement object at 0x7f7a4e6216a0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f7a4e621790>, 'write': <dependencyGraph.Statement object at 0x7f7a4e621220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7a4e5e6640>, 'write': <dependencyGraph.Statement object at 0x7f7a4e6216a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  16
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1 stmts len 1
p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7a4e621f10>, <dependencyGraph.Codelet object at 0x7f7a4e621d60>, <dependencyGraph.Codelet object at 0x7f7a4e621fd0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7a4e621f10>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_102', 'p_state_100', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp5', 'state_1', 'p__br_tmp4', 'p_state_102', 'p_state_001', 'p__br_tmp20', 'p__br_tmp6', 'p_state_000', 'p_state_101', 'p_state_100', 'p__br_tmp00', 'p__br_tmp10', 'p_state_002', 'state_0']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f7a4e5d8370>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f7a4e5d84f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p__br_tmp5', 'state_1', 'p__br_tmp4', 'p_state_102', 'p_state_001', 'p__br_tmp20', 'p__br_tmp6', 'p_state_000', 'p_state_101', 'p_state_100', 'p__br_tmp00', 'p__br_tmp10', 'p_state_002', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_1_1 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2 + pkt_1;\n', '      state_1 = state_1_1 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '      state_1 = state_1_1 + (pkt_1 + 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (pkt_1 + 1);\n', '        state_1 = state_1_1 + -2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + (1 + pkt_2);\n', '        state_1 = 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p__br_tmp5', 'state_1', 'p__br_tmp4', 'p_state_102', 'p_state_001', 'p__br_tmp20', 'p__br_tmp6', 'p_state_000', 'p_state_101', 'p_state_100', 'p__br_tmp00', 'p__br_tmp10', 'p_state_002', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_1_1 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2 + pkt_1;\n', '      state_1 = state_1_1 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2;\n', '      state_1 = state_1_1 + (pkt_1 + 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (pkt_1 + 1);\n', '        state_1 = state_1_1 + -2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + (1 + pkt_2);\n', '        state_1 = 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
Time taken: 1.2409014701843262 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_4_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_000==1&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&p_state_001==2&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_state_102==1000&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f0fd1355640>, 'write': <dependencyGraph.Statement object at 0x7f0fd13906a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f0fd1390790>, 'write': <dependencyGraph.Statement object at 0x7f0fd1390220>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0fd1355640>, 'write': <dependencyGraph.Statement object at 0x7f0fd13906a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f0fd1390790>, 'write': <dependencyGraph.Statement object at 0x7f0fd1390220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
total number of nodes created:  16
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0fd1390f10>, <dependencyGraph.Codelet object at 0x7f0fd1390d60>, <dependencyGraph.Codelet object at 0x7f0fd1390fd0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0fd1390f10>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_102', 'p_state_002', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['state_0', 'p__br_tmp00', 'p_state_000', 'p__br_tmp20', 'p__br_tmp5', 'p_state_100', 'p__br_tmp10', 'p_state_002', 'p__br_tmp6', 'p_state_101', 'p__br_tmp4', 'p_state_102', 'p_state_001', 'state_1']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f0fd1348370>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f0fd13484f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['state_0', 'p__br_tmp00', 'p_state_000', 'p__br_tmp20', 'p__br_tmp5', 'p_state_100', 'p__br_tmp10', 'p_state_002', 'p__br_tmp6', 'p_state_101', 'p__br_tmp4', 'p_state_102', 'p_state_001', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) != 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '      state_1 = state_1_1 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '      state_1 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) != 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) > 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (pkt_1 + pkt_1);\n', '        state_1 = pkt_1 - 0;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + (pkt_1 + pkt_2);\n', '        state_1 = state_1_1 + 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['state_0', 'p__br_tmp00', 'p_state_000', 'p__br_tmp20', 'p__br_tmp5', 'p_state_100', 'p__br_tmp10', 'p_state_002', 'p__br_tmp6', 'p_state_101', 'p__br_tmp4', 'p_state_102', 'p_state_001', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) != 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '      state_1 = state_1_1 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 1;\n', '      state_1 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) != 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) > 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (pkt_1 + pkt_1);\n', '        state_1 = pkt_1 - 0;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + (pkt_1 + pkt_2);\n', '        state_1 = state_1_1 + 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '0'}]}
Time taken: 1.224743127822876 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_5_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_000==1&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&p_state_001==2&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_state_102==1000&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fa464824640>, 'write': <dependencyGraph.Statement object at 0x7fa46485f6a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fa46485f790>, 'write': <dependencyGraph.Statement object at 0x7fa46485f220>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa464824640>, 'write': <dependencyGraph.Statement object at 0x7fa46485f6a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa46485f790>, 'write': <dependencyGraph.Statement object at 0x7fa46485f220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
total number of nodes created:  16
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa46485ff10>, <dependencyGraph.Codelet object at 0x7fa46485fd60>, <dependencyGraph.Codelet object at 0x7fa46485ffd0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa46485ff10>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_102', 'p_state_000', 'p_state_100', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp3', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['state_0', 'p_state_102', 'p__br_tmp5', 'p__br_tmp00', 'p_state_101', 'p__br_tmp20', 'p__br_tmp4', 'p_state_000', 'p_state_001', 'state_1', 'p_state_002', 'p_state_100', 'p__br_tmp10', 'p__br_tmp6']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fa464816370>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fa4648164f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['state_0', 'p_state_102', 'p__br_tmp5', 'p__br_tmp00', 'p_state_101', 'p__br_tmp20', 'p__br_tmp4', 'p_state_000', 'p_state_001', 'state_1', 'p_state_002', 'p_state_100', 'p__br_tmp10', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_2);\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2 + pkt_1;\n', '      state_1 = pkt_1 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) != 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0;\n', '        state_1 = state_1_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + 24;\n', '        state_1 = state_1_1 + 52;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['state_0', 'p_state_102', 'p__br_tmp5', 'p__br_tmp00', 'p_state_101', 'p__br_tmp20', 'p__br_tmp4', 'p_state_000', 'p_state_001', 'state_1', 'p_state_002', 'p_state_100', 'p__br_tmp10', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + pkt_2);\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 2 + pkt_1;\n', '      state_1 = pkt_1 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) != 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0;\n', '        state_1 = state_1_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + 24;\n', '        state_1 = state_1_1 + 52;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
Time taken: 1.2428407669067383 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_6_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = p_state_000==1&&1==1;

lhs p__br_tmp00 rhs p_state_000==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = p_state_000==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = p_state_001==2&&1==1;

lhs p__br_tmp10 rhs p_state_001==2&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = p_state_001==2&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = p_state_102==1000&&1==1;

lhs p__br_tmp20 rhs p_state_102==1000&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = p_state_102==1000&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = p_state_000==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = p_state_001==2&&1==1;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = p_state_001==2&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = p_state_102==1000&&1==1;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = p_state_102==1000&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f9b472a8790>, 'write': <dependencyGraph.Statement object at 0x7f9b472a8220>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f9b4726c640>, 'write': <dependencyGraph.Statement object at 0x7f9b472a84f0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f9b472a8790>, 'write': <dependencyGraph.Statement object at 0x7f9b472a8220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f9b4726c640>, 'write': <dependencyGraph.Statement object at 0x7f9b472a84f0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  16
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = p_state_000==1&&1==1 stmts len 1
p__br_tmp00 = p_state_000==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = p_state_001==2&&1==1 stmts len 1
p__br_tmp10 = p_state_001==2&&1==1;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = p_state_102==1000&&1==1 stmts len 1
p__br_tmp20 = p_state_102==1000&&1==1;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9b472a8f10>, <dependencyGraph.Codelet object at 0x7f9b472a8d60>, <dependencyGraph.Codelet object at 0x7f9b472a8460>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp00 = p_state_000==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = p_state_001==2&&1==1;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = p_state_102==1000&&1==1;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9b472a8f10>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_002', 'p_state_102', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp00 = p_state_000==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = p_state_001==2&&1==1 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = p_state_102==1000&&1==1 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = p_state_102==1000&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = p_state_102==1000&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp4', 'state_1', 'p__br_tmp5', 'state_0', 'p__br_tmp00', 'p_state_102', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp6', 'p_state_002', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = p_state_102==1000&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f9b47260370>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f9b472604f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p__br_tmp4', 'state_1', 'p__br_tmp5', 'state_0', 'p__br_tmp00', 'p_state_102', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp6', 'p_state_002', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '      state_1 = state_1_1 + -1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2 + 2;\n', '      state_1 = state_1_1 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 0;\n', '        state_1 = state_1_1 + (pkt_1 - 0);\n', '      }\n', '      else\n', '      {\n', '        state_0 = 2 + pkt_2;\n', '        state_1 = 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p__br_tmp4', 'state_1', 'p__br_tmp5', 'state_0', 'p__br_tmp00', 'p_state_102', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp6', 'p_state_002', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2;\n', '      state_1 = state_1_1 + -1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2 + 2;\n', '      state_1 = state_1_1 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 0;\n', '        state_1 = state_1_1 + (pkt_1 - 0);\n', '      }\n', '      else\n', '      {\n', '        state_0 = 2 + pkt_2;\n', '        state_1 = 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
Time taken: 1.331322193145752 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_7_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&1==1&&p_state_000==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_state_000==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_state_000==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = 1==1&&1==1&&p_state_001==2;

lhs p__br_tmp10 rhs 1==1&&1==1&&p_state_001==2
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&1==1&&p_state_001==2;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = 1==1&&1==1&&p_state_102==1000;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_state_102==1000
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_state_102==1000;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_000==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==2;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = 1==1&&1==1&&p_state_001==2; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = 1==1&&1==1&&p_state_001==2; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = 1==1&&1==1&&p_state_102==1000; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f582316a640>, 'write': <dependencyGraph.Statement object at 0x7f58231a55e0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f58231a5790>, 'write': <dependencyGraph.Statement object at 0x7f58231a5220>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f582316a640>, 'write': <dependencyGraph.Statement object at 0x7f58231a55e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f58231a5790>, 'write': <dependencyGraph.Statement object at 0x7f58231a5220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
total number of nodes created:  16
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&1==1&&p_state_000==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_state_000==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = 1==1&&1==1&&p_state_001==2 stmts len 1
p__br_tmp10 = 1==1&&1==1&&p_state_001==2;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = 1==1&&1==1&&p_state_102==1000 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_state_102==1000;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f58231a5f10>, <dependencyGraph.Codelet object at 0x7f58231a5d60>, <dependencyGraph.Codelet object at 0x7f58231a5460>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&1==1&&p_state_000==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = 1==1&&1==1&&p_state_001==2;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = 1==1&&1==1&&p_state_102==1000;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f58231a5f10>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_102', 'p_state_100', 'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp00 = 1==1&&1==1&&p_state_000==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = 1==1&&1==1&&p_state_001==2 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = 1==1&&1==1&&p_state_102==1000 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&1==1&&p_state_001==2; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&1==1&&p_state_001==2; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_100', 'p__br_tmp6', 'p_state_001', 'p__br_tmp20', 'state_1', 'state_0', 'p__br_tmp10', 'p_state_101', 'p_state_002', 'p_state_102', 'p__br_tmp00', 'p__br_tmp5', 'p_state_000', 'p__br_tmp4']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&1==1&&p_state_001==2; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f582315c580>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f582315c4f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p_state_100', 'p__br_tmp6', 'p_state_001', 'p__br_tmp20', 'state_1', 'state_0', 'p__br_tmp10', 'p_state_101', 'p_state_002', 'p_state_102', 'p__br_tmp00', 'p__br_tmp5', 'p_state_000', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + -31;\n', '      state_1 = state_1_1 + 42;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_2;\n', '      state_1 = state_1_1 + (pkt_2 + 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) > 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (1 + pkt_2);\n', '        state_1 = 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = state_1_1 + (pkt_2 + pkt_1);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p_state_100', 'p__br_tmp6', 'p_state_001', 'p__br_tmp20', 'state_1', 'state_0', 'p__br_tmp10', 'p_state_101', 'p_state_002', 'p_state_102', 'p__br_tmp00', 'p__br_tmp5', 'p_state_000', 'p__br_tmp4'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + -31;\n', '      state_1 = state_1_1 + 42;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_2;\n', '      state_1 = state_1_1 + (pkt_2 + 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) > 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (1 + pkt_2);\n', '        state_1 = 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = state_1_1 + (pkt_2 + pkt_1);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '2'}]}
Time taken: 1.251847267150879 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_8_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_state_000==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_000==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_000==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = 1==1&&p_state_001==2&&1==1;

lhs p__br_tmp10 rhs 1==1&&p_state_001==2&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&p_state_001==2&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_state_102==1000&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_state_102==1000&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_000==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = 1==1&&p_state_001==2&&1==1;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = 1==1&&p_state_001==2&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = 1==1&&p_state_102==1000&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fb927bda790>, 'write': <dependencyGraph.Statement object at 0x7fb927bda220>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fb927b9f640>, 'write': <dependencyGraph.Statement object at 0x7fb927bda5e0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb927bda790>, 'write': <dependencyGraph.Statement object at 0x7fb927bda220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb927b9f640>, 'write': <dependencyGraph.Statement object at 0x7fb927bda5e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  16
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_state_000==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_000==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = 1==1&&p_state_001==2&&1==1 stmts len 1
p__br_tmp10 = 1==1&&p_state_001==2&&1==1;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = 1==1&&p_state_102==1000&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb927bdaf10>, <dependencyGraph.Codelet object at 0x7fb927bdad60>, <dependencyGraph.Codelet object at 0x7fb927bda460>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_state_000==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = 1==1&&p_state_001==2&&1==1;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = 1==1&&p_state_102==1000&&1==1;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb927bdaf10>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_102', 'p_state_100', 'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp00 = 1==1&&p_state_000==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = 1==1&&p_state_001==2&&1==1 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = 1==1&&p_state_102==1000&&1==1 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp5', 'state_0', 'p_state_102', 'p_state_001', 'p__br_tmp20', 'p__br_tmp00', 'state_1', 'p__br_tmp6', 'p__br_tmp4', 'p_state_100', 'p_state_101', 'p_state_002', 'p_state_000', 'p__br_tmp10']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_000==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&p_state_001==2&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&p_state_102==1000&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fb927b91580>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fb927b914f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p__br_tmp5', 'state_0', 'p_state_102', 'p_state_001', 'p__br_tmp20', 'p__br_tmp00', 'state_1', 'p__br_tmp6', 'p__br_tmp4', 'p_state_100', 'p_state_101', 'p_state_002', 'p_state_000', 'p__br_tmp10'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) != 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) != 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_2;\n', '      state_1 = state_1_1 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 2 + pkt_1;\n', '        state_1 = 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + pkt_1;\n', '        state_1 = 2 + pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p__br_tmp5', 'state_0', 'p_state_102', 'p_state_001', 'p__br_tmp20', 'p__br_tmp00', 'state_1', 'p__br_tmp6', 'p__br_tmp4', 'p_state_100', 'p_state_101', 'p_state_002', 'p_state_000', 'p__br_tmp10'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) != 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) != 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_2;\n', '      state_1 = state_1_1 + 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) < 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 2 + pkt_1;\n', '        state_1 = 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + pkt_1;\n', '        state_1 = 2 + pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '2'}]}
Time taken: 1.2271177768707275 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_9_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_state_000==1&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&1==1&&p_state_001==2&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_state_102==1000&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7efe63b42640>, 'write': <dependencyGraph.Statement object at 0x7efe63b7d9d0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7efe63b7d790>, 'write': <dependencyGraph.Statement object at 0x7efe63b7d220>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7efe63b42640>, 'write': <dependencyGraph.Statement object at 0x7efe63b7d9d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7efe63b7d790>, 'write': <dependencyGraph.Statement object at 0x7efe63b7d220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
total number of nodes created:  16
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7efe63b7df10>, <dependencyGraph.Codelet object at 0x7efe63b7deb0>, <dependencyGraph.Codelet object at 0x7efe63b7d460>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7efe63b7df10>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_102', 'p_state_002', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_101', 'p__br_tmp6', 'p_state_001', 'p__br_tmp4', 'p__br_tmp10', 'p_state_102', 'p__br_tmp00', 'p_state_100', 'state_0', 'p__br_tmp20', 'p__br_tmp5', 'state_1', 'p_state_000', 'p_state_002']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = 1==1&&1==1&&p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = 1==1&&1==1&&p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7efe63b34370>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7efe63b344f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p_state_101', 'p__br_tmp6', 'p_state_001', 'p__br_tmp4', 'p__br_tmp10', 'p_state_102', 'p__br_tmp00', 'p_state_100', 'state_0', 'p__br_tmp20', 'p__br_tmp5', 'state_1', 'p_state_000', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) > 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2 + pkt_2;\n', '      state_1 = state_1_1 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_1) < 31)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 2;\n', '        state_1 = pkt_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + pkt_1;\n', '        state_1 = state_1_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['p_state_101', 'p__br_tmp6', 'p_state_001', 'p__br_tmp4', 'p__br_tmp10', 'p_state_102', 'p__br_tmp00', 'p_state_100', 'state_0', 'p__br_tmp20', 'p__br_tmp5', 'state_1', 'p_state_000', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) > 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 3)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 2 + pkt_2;\n', '      state_1 = state_1_1 + 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_1) < 31)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 2;\n', '        state_1 = pkt_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + pkt_1;\n', '        state_1 = state_1_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '30'}]}
Time taken: 1.2921199798583984 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection, program name: spam_detection_equivalent_10_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp3 ? (p_pkt_0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0', 'p_pkt_0']
p__br_tmp00 = p_state_000==1&&1==1&&1==1;

lhs p__br_tmp00 rhs p_state_000==1&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = p_state_000==1&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000']
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp4 ? (0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp4 ? (0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_100']
p__br_tmp10 = p_state_001==2&&1==1&&1==1;

lhs p__br_tmp10 rhs p_state_001==2&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = p_state_001==2&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&(p__br_tmp10);

lhs p__br_tmp5 rhs 1&&(p__br_tmp10)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10']
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

lhs p_state_102 rhs p__br_tmp5 ? (p_state_101+1) : (p_state_101)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_101', 'p_state_101']
p__br_tmp20 = p_state_102==1000&&1==1&&1==1;

lhs p__br_tmp20 rhs p_state_102==1000&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = p_state_102==1000&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_102']
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp10', 'p__br_tmp20']
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_102;

lhs state_1 rhs p_state_102
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_102;

 is_read_flank: processing rhs_vars =  ['p_state_102']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = p_state_000==1&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p__br_tmp3 = 1; p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
RAW p__br_tmp00 = p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
RAW p__br_tmp4 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p__br_tmp10 = p_state_001==2&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p__br_tmp10 = p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10);
RAW p__br_tmp10 = p_state_001==2&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = p_state_102==1000&&1==1&&1==1;
RAW p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); state_1 = p_state_102;
RAW p__br_tmp20 = p_state_102==1000&&1==1&&1==1; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f10dde1c640>, 'write': <dependencyGraph.Statement object at 0x7f10dde575e0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f10dde57790>, 'write': <dependencyGraph.Statement object at 0x7f10dde57220>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f10dde1c640>, 'write': <dependencyGraph.Statement object at 0x7f10dde575e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f10dde57790>, 'write': <dependencyGraph.Statement object at 0x7f10dde57220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_102
total number of nodes created:  16
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = p_state_000==1&&1==1&&1==1 stmts len 1
p__br_tmp00 = p_state_000==1&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp4 ? (2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
v p_state_101 = p__br_tmp4 ? (0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
v p__br_tmp10 = p_state_001==2&&1==1&&1==1 stmts len 1
p__br_tmp10 = p_state_001==2&&1==1&&1==1;
v p__br_tmp5 = 1&&(p__br_tmp10) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp10);
v p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) stmts len 1
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
v p__br_tmp20 = p_state_102==1000&&1==1&&1==1 stmts len 1
p__br_tmp20 = p_state_102==1000&&1==1&&1==1;
v state_1 = p_state_102 stmts len 1
state_1 = p_state_102;
v p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_002 = p__br_tmp6 ? (3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
SCC 2
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f10dde57f10>, <dependencyGraph.Codelet object at 0x7f10dde57d60>, <dependencyGraph.Codelet object at 0x7f10dde57460>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp00 = p_state_000==1&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp4 ? (2) : (p_state_000);
p_state_101 = p__br_tmp4 ? (0) : (p_state_100);
p__br_tmp10 = p_state_001==2&&1==1&&1==1;
p__br_tmp5 = 1&&(p__br_tmp10);
p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101);
p__br_tmp20 = p_state_102==1000&&1==1&&1==1;
state_1 = p_state_102;
p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20);
p_state_002 = p__br_tmp6 ? (3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f10dde57f10>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_102', 'p_state_002', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp00 = p_state_000==1&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp4 ? (2) : (p_state_000) p_state_101 = p__br_tmp4 ? (0) : (p_state_100) p__br_tmp10 = p_state_001==2&&1==1&&1==1 p__br_tmp5 = 1&&(p__br_tmp10) p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101) p__br_tmp20 = p_state_102==1000&&1==1&&1==1 state_1 = p_state_102 p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20) p_state_002 = p__br_tmp6 ? (3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);', 'p__br_tmp3 = 1;', 'p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp3', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
     |  p__br_tmp3 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['state_1', 'p_state_000', 'p_state_101', 'p_state_002', 'p__br_tmp4', 'p_state_001', 'p_state_102', 'p__br_tmp20', 'p__br_tmp10', 'state_0', 'p__br_tmp00', 'p_state_100', 'p__br_tmp5', 'p__br_tmp6']
 node inputs:  ['state_0', 'state_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = p_state_000==1&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp4 ? (2) : (p_state_000); p_state_101 = p__br_tmp4 ? (0) : (p_state_100); p__br_tmp10 = p_state_001==2&&1==1&&1==1; p__br_tmp5 = 1&&(p__br_tmp10); p_state_102 = p__br_tmp5 ? (p_state_101+1) : (p_state_101); p__br_tmp20 = p_state_102==1000&&1==1&&1==1; state_1 = p_state_102; p__br_tmp6 = 1&&(p__br_tmp10)&&(p__br_tmp20); p_state_002 = p__br_tmp6 ? (3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_102']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p__br_tmp3 = 1;
v:  p_pkt_00 = p__br_tmp3 ? (p_pkt_0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/spam_detection/spam_detection_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_00 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_00_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f10dde0e580>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f10dde0e4f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['state_1', 'p_state_000', 'p_state_101', 'p_state_002', 'p__br_tmp4', 'p_state_001', 'p_state_102', 'p__br_tmp20', 'p__br_tmp10', 'state_0', 'p__br_tmp00', 'p_state_100', 'p__br_tmp5', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) != 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + 1);\n', '      state_1 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1 + 2;\n', '        state_1 = 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + (pkt_2 + pkt_1);\n', '        state_1 = state_1_1 + (1 + pkt_2);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1'], 'outputs': ['state_1', 'p_state_000', 'p_state_101', 'p_state_002', 'p__br_tmp4', 'p_state_001', 'p_state_102', 'p__br_tmp20', 'p__br_tmp10', 'state_0', 'p__br_tmp00', 'p_state_100', 'p__br_tmp5', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_1) - pkt_1) != 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 + 1);\n', '      state_1 = 1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_1) - pkt_1) == 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1 + 2;\n', '        state_1 = 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + (pkt_2 + pkt_1);\n', '        state_1 = state_1_1 + (1 + pkt_2);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_00', 'immediate_operand': '2'}]}
Time taken: 1.303584098815918 s
preprocessor time:
