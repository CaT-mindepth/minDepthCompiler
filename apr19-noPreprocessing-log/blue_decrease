running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_1_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f157ea77790>, 'write': <dependencyGraph.Statement object at 0x7f157ea774c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f157ea3c640>, 'write': <dependencyGraph.Statement object at 0x7f157ea778b0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f157ea77790>, 'write': <dependencyGraph.Statement object at 0x7f157ea774c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f157ea3c640>, 'write': <dependencyGraph.Statement object at 0x7f157ea778b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f157ea77a30>, <dependencyGraph.Codelet object at 0x7f157ea77b20>, <dependencyGraph.Codelet object at 0x7f157ea77a00>, <dependencyGraph.Codelet object at 0x7f157ea77ac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f157ea77b20>, <dependencyGraph.Codelet object at 0x7f157ea77a30>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p__br_tmp00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f157ea77dc0>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp2', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f157ea77dc0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp2', 'p_state_001']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'state_0', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f157ea77e50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_0', 'p_pkt_10']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f157ea77e50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p__br_tmp2', 'p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0', 'p_pkt_1', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_pkt_10', 'state_1', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_pkt_1', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f157ea77e50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f157ea36a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f157ea36a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f157ea779d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f157ea36a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f157ea779d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f157ea36a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f157ea779d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f157ea36a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f157ea779d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xe66b0105
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f157ea36580>, 0), (<alus.DominoALU object at 0x7f157ea36af0>, 1), (<alus.DominoALU object at 0x7f157ea36f70>, 2), (<alus.DominoALU object at 0x7f157ea36b80>, 3), (<alus.DominoALU object at 0x7f157ea36d00>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f157ea36a90>, 0), (<alus.DominoGenericSALU object at 0x7f157ea779d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 + pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 4, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '13'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_1', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '5'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 + pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 4, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '13'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_1', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '5'}]}
Time taken: 35.31910586357117 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_2_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2b20e6d640>, 'write': <dependencyGraph.Statement object at 0x7f2b20ea88b0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f2b20ea8790>, 'write': <dependencyGraph.Statement object at 0x7f2b20ea84c0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2b20e6d640>, 'write': <dependencyGraph.Statement object at 0x7f2b20ea88b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2b20ea8790>, 'write': <dependencyGraph.Statement object at 0x7f2b20ea84c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2b20ea8a30>, <dependencyGraph.Codelet object at 0x7f2b20ea8b20>, <dependencyGraph.Codelet object at 0x7f2b20ea8a00>, <dependencyGraph.Codelet object at 0x7f2b20ea8ac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2b20ea8b20>, <dependencyGraph.Codelet object at 0x7f2b20ea8a30>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p__br_tmp00', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f2b20ea8dc0>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp2', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f2b20ea8dc0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp2', 'p_state_000']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f2b20ea8e50>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp2', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_0', 'p_pkt_10']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f2b20ea8e50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p__br_tmp2', 'p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['state_1', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_1', 'p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_pkt_10', 'p_state_100', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_1', 'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f2b20ea8e50>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp2', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp00', 'p_pkt_10'}
{'p__br_tmp00', 'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2b20e66a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2b20ea89d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2b20e66a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2b20ea89d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2b20e66a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2b20ea89d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2b20e66a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2b20ea89d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output p__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2b20e66a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x845778cc
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f2b20e66a00>, 0), (<alus.DominoALU object at 0x7f2b20e66a60>, 1), (<alus.DominoALU object at 0x7f2b20e66cd0>, 2), (<alus.DominoALU object at 0x7f2b20e66250>, 3), (<alus.DominoALU object at 0x7f2b20e668e0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f2b20e66a90>, 0), (<alus.DominoGenericSALU object at 0x7f2b20ea89d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '9'}, {'id': 4, 'opcode': 24, 'operand0': 'p_state_100', 'operand1': 'p_pkt_1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '5'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '31'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '9'}, {'id': 4, 'opcode': 24, 'operand0': 'p_state_100', 'operand1': 'p_pkt_1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '5'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '31'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 58.75227928161621 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_3_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f154110a790>, 'write': <dependencyGraph.Statement object at 0x7f154110a4c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f15410cf640>, 'write': <dependencyGraph.Statement object at 0x7f154110a8b0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f154110a790>, 'write': <dependencyGraph.Statement object at 0x7f154110a4c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f15410cf640>, 'write': <dependencyGraph.Statement object at 0x7f154110a8b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f154110aa30>, <dependencyGraph.Codelet object at 0x7f154110ab20>, <dependencyGraph.Codelet object at 0x7f154110aa00>, <dependencyGraph.Codelet object at 0x7f154110aac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f154110ab20>, <dependencyGraph.Codelet object at 0x7f154110aa30>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p__br_tmp00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f154110adc0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f154110adc0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_state_100', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f154110ae50>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_001', 'p_state_000', 'p__br_tmp2']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'state_0', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp00', 'p_state_101', 'p__br_tmp2']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f154110ae50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p_state_101', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0', 'p__br_tmp1', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_pkt_0', 'state_1', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f154110ae50>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_001', 'p_state_000', 'p__br_tmp2']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f15410c8a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f15410c8a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f154110a9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f15410c8a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f154110a9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f15410c8a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f154110a9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f15410c8a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f154110a9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xe66b0105
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f15410c8580>, 0), (<alus.DominoALU object at 0x7f15410c8af0>, 1), (<alus.DominoALU object at 0x7f15410c8f70>, 2), (<alus.DominoALU object at 0x7f15410c8b80>, 3), (<alus.DominoALU object at 0x7f15410c8d00>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f15410c8a90>, 0), (<alus.DominoGenericSALU object at 0x7f154110a9d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '13'}, {'id': 4, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 9, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '13'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '13'}, {'id': 4, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 9, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '13'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '0'}]}
Time taken: 12.914730787277222 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_4_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff75de26640>, 'write': <dependencyGraph.Statement object at 0x7ff75de618b0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7ff75de61790>, 'write': <dependencyGraph.Statement object at 0x7ff75de614c0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff75de26640>, 'write': <dependencyGraph.Statement object at 0x7ff75de618b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7ff75de61790>, 'write': <dependencyGraph.Statement object at 0x7ff75de614c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff75de61a30>, <dependencyGraph.Codelet object at 0x7ff75de61b20>, <dependencyGraph.Codelet object at 0x7ff75de61a00>, <dependencyGraph.Codelet object at 0x7ff75de61ac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff75de61b20>, <dependencyGraph.Codelet object at 0x7ff75de61a30>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p__br_tmp00', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7ff75de61dc0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7ff75de61dc0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p_state_001']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'state_0', 'p_pkt_10']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7ff75de61e50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p_state_001', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs ['p_state_101', 'p__br_tmp2', 'p__br_tmp00']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_0', 'p_pkt_10']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7ff75de61e50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p_state_101', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['state_1', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0', 'p__br_tmp1', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_0', 'p_pkt_10', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7ff75de61e50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p_state_001', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp00', 'p_pkt_10'}
{'p__br_tmp00', 'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff75de1fa90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff75de619d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff75de1fa90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff75de619d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff75de1fa90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff75de619d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff75de1fa90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff75de619d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output p__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff75de1fa90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x6f1cec5a
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 2
T0_A_3 2
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7ff75de1fa00>, 0), (<alus.DominoALU object at 0x7ff75de1fa60>, 1), (<alus.DominoALU object at 0x7ff75de1fcd0>, 2), (<alus.DominoALU object at 0x7ff75de1f250>, 3), (<alus.DominoALU object at 0x7ff75de1f8e0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7ff75de1fa90>, 0), (<alus.DominoGenericSALU object at 0x7ff75de619d0>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - pkt_1);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '7'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - pkt_1);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '7'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 10.101248502731323 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_5_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f51652e3790>, 'write': <dependencyGraph.Statement object at 0x7f51652e34c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f51652a8640>, 'write': <dependencyGraph.Statement object at 0x7f51652e38b0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f51652e3790>, 'write': <dependencyGraph.Statement object at 0x7f51652e34c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f51652a8640>, 'write': <dependencyGraph.Statement object at 0x7f51652e38b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f51652e3a30>, <dependencyGraph.Codelet object at 0x7f51652e3b20>, <dependencyGraph.Codelet object at 0x7f51652e3a00>, <dependencyGraph.Codelet object at 0x7f51652e3ac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f51652e3b20>, <dependencyGraph.Codelet object at 0x7f51652e3a30>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p__br_tmp00', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f51652e3dc0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f51652e3dc0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p_state_001']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'p_pkt_10', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f51652e3e50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs ['p__br_tmp2', 'p_state_101', 'p__br_tmp00']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f51652e3e50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p__br_tmp2', 'p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['state_1', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p__br_tmp1', 'p_pkt_1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100', 'state_1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f51652e3e50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp00', 'p_pkt_10'}
{'p__br_tmp00', 'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f51652a1a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f51652e39d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f51652a1a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f51652e39d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f51652a1a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f51652e39d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f51652a1a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f51652e39d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output p__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f51652a1a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x5c145f89
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 2
T0_A_3 -0
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f51652a1a00>, 0), (<alus.DominoALU object at 0x7f51652a1a60>, 1), (<alus.DominoALU object at 0x7f51652a1cd0>, 2), (<alus.DominoALU object at 0x7f51652a1250>, 3), (<alus.DominoALU object at 0x7f51652a18e0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f51652a1a90>, 0), (<alus.DominoGenericSALU object at 0x7f51652e39d0>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - 3);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '8'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 4, 'opcode': 13, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '8'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '12'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - 3);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '8'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 4, 'opcode': 13, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '8'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '12'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 20.90963053703308 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_6_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = p_pkt_10>p_state_100&&1==1;

lhs p__br_tmp00 rhs p_pkt_10>p_state_100&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
RAW p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f7a59bdb790>, 'write': <dependencyGraph.Statement object at 0x7f7a59bdb4c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f7a59ba0640>, 'write': <dependencyGraph.Statement object at 0x7f7a59bdb8b0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f7a59bdb790>, 'write': <dependencyGraph.Statement object at 0x7f7a59bdb4c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7a59ba0640>, 'write': <dependencyGraph.Statement object at 0x7f7a59bdb8b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = p_pkt_10>p_state_100&&1==1 stmts len 1
p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7a59bdba30>, <dependencyGraph.Codelet object at 0x7f7a59bdbb20>, <dependencyGraph.Codelet object at 0x7f7a59bdba00>, <dependencyGraph.Codelet object at 0x7f7a59bdbac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7a59bdbb20>, <dependencyGraph.Codelet object at 0x7f7a59bdba30>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = p_pkt_10>p_state_100&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = p_pkt_10>p_state_100&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = p_pkt_10>p_state_100&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p__br_tmp00', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f7a59bdbdc0>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp2', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f7a59bdbdc0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp2', 'p_state_001']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_10>p_state_100&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'p_pkt_10', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f7a59bdbe50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f7a59bdbe50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p__br_tmp2', 'p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_1', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10', 'state_1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_1', 'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f7a59bdbe50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f7a59b98a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f7a59b98a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f7a59bdb9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f7a59b98a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f7a59bdb9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f7a59b98a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f7a59bdb9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f7a59b98a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f7a59bdb9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 133 rows, 93 columns and 296 nonzeros
Model fingerprint: 0xff667682
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 7 rows and 25 columns
Presolve time: 0.00s
Presolved: 126 rows, 68 columns, 298 nonzeros
Variable types: 0 continuous, 68 integer (60 binary)
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 4 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 -0
T0_A_5 -0
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f7a59b98580>, 0), (<alus.DominoALU object at 0x7f7a59b98af0>, 1), (<alus.DominoALU object at 0x7f7a59b98b80>, 2), (<alus.DominoALU object at 0x7f7a59b98f40>, 3), (<alus.DominoALU object at 0x7f7a59b98c40>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f7a59b98a90>, 0), (<alus.DominoGenericSALU object at 0x7f7a59bdb9d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - 3);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '14'}, {'id': 5, 'opcode': 9, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '14'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - 3);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '14'}, {'id': 5, 'opcode': 9, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '14'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '1'}]}
Time taken: 15.247148275375366 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_7_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f0b4f930790>, 'write': <dependencyGraph.Statement object at 0x7f0b4f9304c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f0b4f8f5640>, 'write': <dependencyGraph.Statement object at 0x7f0b4f9308b0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f0b4f930790>, 'write': <dependencyGraph.Statement object at 0x7f0b4f9304c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0b4f8f5640>, 'write': <dependencyGraph.Statement object at 0x7f0b4f9308b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0b4f930a30>, <dependencyGraph.Codelet object at 0x7f0b4f930b20>, <dependencyGraph.Codelet object at 0x7f0b4f930a00>, <dependencyGraph.Codelet object at 0x7f0b4f930ac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0b4f930b20>, <dependencyGraph.Codelet object at 0x7f0b4f930a30>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p__br_tmp00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f0b4f930dc0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f0b4f930dc0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_state_100', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f0b4f930e50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p__br_tmp00', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_0', 'p_pkt_10']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f0b4f930e50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p__br_tmp2', 'p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0', 'p__br_tmp1', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'state_1', 'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f0b4f930e50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p__br_tmp00', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0b4f8eda90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0b4f8eda90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0b4f9309d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0b4f8eda90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0b4f9309d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0b4f8eda90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0b4f9309d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0b4f8eda90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0b4f9309d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x82f3ee61
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 -0
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f0b4f8ed400>, 0), (<alus.DominoALU object at 0x7f0b4f8edaf0>, 1), (<alus.DominoALU object at 0x7f0b4f8edb80>, 2), (<alus.DominoALU object at 0x7f0b4f8edf40>, 3), (<alus.DominoALU object at 0x7f0b4f8edc40>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f0b4f8eda90>, 0), (<alus.DominoGenericSALU object at 0x7f0b4f9309d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '2'}]}
Time taken: 14.742541074752808 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_8_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f6dd86cb790>, 'write': <dependencyGraph.Statement object at 0x7f6dd86cb4c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f6dd8690640>, 'write': <dependencyGraph.Statement object at 0x7f6dd86cb8b0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6dd86cb790>, 'write': <dependencyGraph.Statement object at 0x7f6dd86cb4c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6dd8690640>, 'write': <dependencyGraph.Statement object at 0x7f6dd86cb8b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6dd86cba30>, <dependencyGraph.Codelet object at 0x7f6dd86cbb20>, <dependencyGraph.Codelet object at 0x7f6dd86cba00>, <dependencyGraph.Codelet object at 0x7f6dd86cbac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6dd86cbb20>, <dependencyGraph.Codelet object at 0x7f6dd86cba30>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p__br_tmp00', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f6dd86cbdc0>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp2', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f6dd86cbdc0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp2', 'p_state_000']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'p_pkt_10', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f6dd86cbe50>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs ['p_state_101', 'p__br_tmp00', 'p__br_tmp2']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_0', 'p_pkt_10']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f6dd86cbe50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p_state_101', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0', 'p__br_tmp1', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_0', 'p_pkt_10', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f6dd86cbe50>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp00', 'p_pkt_10'}
{'p__br_tmp00', 'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6dd8688a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f6dd86cb9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6dd8688a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f6dd86cb9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6dd8688a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f6dd86cb9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6dd8688a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f6dd86cb9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output p__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6dd8688a90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 133 rows, 93 columns and 296 nonzeros
Model fingerprint: 0xd3425809
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 7 rows and 25 columns
Presolve time: 0.01s
Presolved: 126 rows, 68 columns, 298 nonzeros
Variable types: 0 continuous, 68 integer (60 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 2
T0_A_3 -0
T0_A_4 -0
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f6dd8688a00>, 0), (<alus.DominoALU object at 0x7f6dd8688a60>, 1), (<alus.DominoALU object at 0x7f6dd8688cd0>, 2), (<alus.DominoALU object at 0x7f6dd8688250>, 3), (<alus.DominoALU object at 0x7f6dd86888e0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f6dd8688a90>, 0), (<alus.DominoGenericSALU object at 0x7f6dd86cb9d0>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 2, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '10'}, {'id': 3, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '8'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '13'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 2, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '10'}, {'id': 3, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '8'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '13'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 21.859861850738525 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_9_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f82081df790>, 'write': <dependencyGraph.Statement object at 0x7f82081df4c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f82081a4640>, 'write': <dependencyGraph.Statement object at 0x7f82081df8b0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f82081df790>, 'write': <dependencyGraph.Statement object at 0x7f82081df4c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f82081a4640>, 'write': <dependencyGraph.Statement object at 0x7f82081df8b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f82081dfa30>, <dependencyGraph.Codelet object at 0x7f82081dfb20>, <dependencyGraph.Codelet object at 0x7f82081dfa00>, <dependencyGraph.Codelet object at 0x7f82081dfac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f82081dfb20>, <dependencyGraph.Codelet object at 0x7f82081dfa30>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'p_state_001', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p__br_tmp00', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f82081dfdc0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f82081dfdc0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p_state_001']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'state_0', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f82081dfe50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p__br_tmp00', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f82081dfe50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p__br_tmp2', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_1', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10', 'state_1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p_pkt_1', 'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f82081dfe50>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_000', 'p__br_tmp00', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f820819da90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f820819da90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f82081df9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f820819da90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f82081df9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f820819da90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f82081df9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f820819da90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f82081df9d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xe66b0105
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f820819d580>, 0), (<alus.DominoALU object at 0x7f820819dee0>, 1), (<alus.DominoALU object at 0x7f820819da60>, 2), (<alus.DominoALU object at 0x7f820819ddc0>, 3), (<alus.DominoALU object at 0x7f820819dfd0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f820819da90>, 0), (<alus.DominoGenericSALU object at 0x7f82081df9d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 11, 'operand0': '1', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '13'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '11'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 11, 'operand0': '1', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '13'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '11'}]}
Time taken: 14.603537559509277 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_10_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_pkt_1']
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp1 = 1; p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
RAW p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1); p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f28996c1790>, 'write': <dependencyGraph.Statement object at 0x7f28996c14c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f2899686640>, 'write': <dependencyGraph.Statement object at 0x7f28996c18b0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f28996c1790>, 'write': <dependencyGraph.Statement object at 0x7f28996c14c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2899686640>, 'write': <dependencyGraph.Statement object at 0x7f28996c18b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f28996c1a30>, <dependencyGraph.Codelet object at 0x7f28996c1b20>, <dependencyGraph.Codelet object at 0x7f28996c1a00>, <dependencyGraph.Codelet object at 0x7f28996c1ac0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
p__br_tmp1 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f28996c1b20>, <dependencyGraph.Codelet object at 0x7f28996c1a30>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
4   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p__br_tmp2    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p__br_tmp00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f28996c1dc0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p__br_tmp00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f28996c1dc0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
		* new component :  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p__br_tmp00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'state_0', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f28996c1e50>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp00', 'p__br_tmp2', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'state_0', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp00', 'p__br_tmp2', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f28996c1e50>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p__br_tmp2', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['state_1', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
  - recursive_merge: looking at preds of  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p__br_tmp1', 'p_pkt_1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p_pkt_10', 'p_state_100', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
  - recursive_merge: looking at preds of  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
     |  p__br_tmp1 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
 * recursive_merge: node ::  p__br_tmp1 = 1;
 node outputs:  ['p__br_tmp1']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f28996c1e50>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp00', 'p__br_tmp2', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
v:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
u:  p__br_tmp1 = 1;
v:  p_pkt_10 = p__br_tmp1 ? (p_pkt_0-10) : (p_pkt_1);
u:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f289967ea90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f289967ea90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f28996c19d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f289967ea90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f28996c19d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f289967ea90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f28996c19d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f289967ea90>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f28996c19d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 133 rows, 93 columns and 296 nonzeros
Model fingerprint: 0x0ed82895
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 7 rows and 25 columns
Presolve time: 0.01s
Presolved: 126 rows, 68 columns, 298 nonzeros
Variable types: 0 continuous, 68 integer (60 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 -0
T0_A_4 2
T0_A_5 -0
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f289967e400>, 0), (<alus.DominoALU object at 0x7f289967eaf0>, 1), (<alus.DominoALU object at 0x7f289967eb80>, 2), (<alus.DominoALU object at 0x7f289967ecd0>, 3), (<alus.DominoALU object at 0x7f289967ef40>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f289967ea90>, 0), (<alus.DominoGenericSALU object at 0x7f28996c19d0>, 1)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '12'}, {'id': 4, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 9, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '22'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 4), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '12'}, {'id': 4, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_pkt_1', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 9, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '22'}]}
Time taken: 22.224676370620728 s
preprocessor time:
