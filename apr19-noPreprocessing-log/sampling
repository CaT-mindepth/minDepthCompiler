running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_1_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_state_000==29&&1==1)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!(p_state_001==29&&1==1))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_state_001==29&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fb657566640>, 'write': <dependencyGraph.Statement object at 0x7fb6575a19d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb657566640>, 'write': <dependencyGraph.Statement object at 0x7fb6575a19d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
v p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;
v p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb6575a1b50>, <dependencyGraph.Codelet object at 0x7fb6575a1be0>, <dependencyGraph.Codelet object at 0x7fb6575a1ca0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb6575a1ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1
2   p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
5   p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1
6   p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
9   state_0 = p_state_002
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1
finding node for codelet:  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1
find_codelet for stmt :  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;', 'p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;', 'p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp4']
redundant outputs ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp5', 'p__br_tmp30', 'p_state_002', 'p_state_001', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp00', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp4', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'p__br_tmp4', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29&&1==1)))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
u:  p__br_tmp20 = 1==1&&!(!(p_state_001==29&&1==1))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fb65755c520>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fb65755c790>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp4', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp4', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1171600818634033 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_2_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;

lhs p__br_tmp00 rhs !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_state_000==29&&1==1)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;

lhs p__br_tmp20 rhs !(1==1&&!(p_state_001==29&&1==1))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_state_001==29&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2eab4f8640>, 'write': <dependencyGraph.Statement object at 0x7f2eab5339d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2eab4f8640>, 'write': <dependencyGraph.Statement object at 0x7f2eab5339d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
v p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 stmts len 1
p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
v p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2eab533b50>, <dependencyGraph.Codelet object at 0x7f2eab533be0>, <dependencyGraph.Codelet object at 0x7f2eab533ca0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2eab533ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
2   p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
5   p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1
6   p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
9   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
finding node for codelet:  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
find_codelet for stmt :  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
finding node for codelet:  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;', 'p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;', 'p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000']
redundant outputs ['p_state_002', 'p__br_tmp10', 'p_state_001', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp5', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp10', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp4', 'state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = !(p_state_000==29&&1==1)&&1==1&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
u:  p__br_tmp20 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f2eab4ee430>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f2eab4ee790>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.10896635055542 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_3_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);

lhs p__br_tmp00 rhs !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;

lhs p__br_tmp10 rhs !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(p_state_000==29&&1==1)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp6 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0']
p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_000', 'p_state_000']
p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;

lhs p__br_tmp30 rhs !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;

lhs p__br_tmp40 rhs !(1==1&&!(p_state_001==29&&1==1))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;

lhs p__br_tmp50 rhs 1==1&&1==1&&p_state_001==29&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);

lhs p__br_tmp7 rhs 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50']
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp7 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_00']
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;
RAW p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
RAW p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;
RAW p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd948990640>, 'write': <dependencyGraph.Statement object at 0x7fd9489cc520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd948990640>, 'write': <dependencyGraph.Statement object at 0x7fd9489cc520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  14
SCC 0
v p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) stmts len 1
p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
v p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 stmts len 1
p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
v p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
v p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
v p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 stmts len 1
p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;
v p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 stmts len 1
p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
v p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 stmts len 1
p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;
v p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) stmts len 1
p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
v p_state_002 = p__br_tmp7 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd9489ccdf0>, <dependencyGraph.Codelet object at 0x7fd9489cce80>, <dependencyGraph.Codelet object at 0x7fd9489ccd00>]
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;
p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;
p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd9489ccd00>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp6', 'p__br_tmp7'}
elements in v_outputs:  {'p__br_tmp6', 'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1)
2   p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
3   p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1
4   p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
5   p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000)
6   p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1
7   p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1
8   p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1
9   p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
10   p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
11   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp50  not in state vars
 statement:  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50']
 state vars:  ['state_0']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp7', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp6    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp7    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
finding node for codelet:  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1)
find_codelet for stmt :  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1)
finding node for codelet:  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
find_codelet for stmt :  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1
finding node for codelet:  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1
find_codelet for stmt :  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1
finding node for codelet:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
find_codelet for stmt :  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
finding node for codelet:  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
find_codelet for stmt :  None
-----------number of nodes in the graph:  12
---------------number of nodes in the graph:  12
number of SCC nodes post splitting:  12
total number of nodes created:  12
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000) p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1 p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1 p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1 p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  12
number of nodes in comp_graph:  12
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);', 'p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);', 'p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;', 'p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;', 'p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;', 'p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);', 'p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);', 'p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);', 'p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;', 'p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;', 'p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp7']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
     |  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
 node outputs:  ['p__br_tmp7']
 node inputs:  ['p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp50']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp7'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
 * recursive_merge: node ::  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;
 node outputs:  ['p__br_tmp50']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;
     |  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;
 * recursive_merge: node ::  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
     |  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;
     |  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp6', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
     |  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp6', 'p_state_000']
redundant outputs ['p__br_tmp00', 'p__br_tmp50', 'p__br_tmp7', 'p__br_tmp40', 'p__br_tmp10', 'p_state_002', 'p_state_001', 'p__br_tmp30', 'p__br_tmp20']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp6', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp7'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
     |  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp6', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
 * recursive_merge: node ::  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp6', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp40', 'p__br_tmp10', 'p__br_tmp30', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp6', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'p__br_tmp6', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp6'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1; p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1; p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
u:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
v:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
u:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
u:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v:  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
u:  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
v:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp00 = !(!(!(!(1==1&&!(p_state_000==29&&1==1))))&&1==1);
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
u:  p__br_tmp10 = !(!(1==1&&!(p_state_000==29&&1==1)))&&1==1;
v:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp20 = 1==1&&!(p_state_000==29&&1==1)&&1==1;
v:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;
u:  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
u:  p_state_001 = p__br_tmp6 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;
u:  p__br_tmp30 = !(!(!(1==1&&!(p_state_001==29&&1==1))))&&1==1;
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
u:  p__br_tmp40 = !(1==1&&!(p_state_001==29&&1==1))&&1==1;
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
u:  p__br_tmp50 = 1==1&&1==1&&p_state_001==29&&1==1;
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_12_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_12_stateless_p_pkt_01_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_pkt_01_bnd_1.sk.out
['comp_12']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_12  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_12'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fd9489853a0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fd948985c10>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp6', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp6', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1233227252960205 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_4_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_state_000==29)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!(p_state_001==29))&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_state_001==29&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f4def7b0640>, 'write': <dependencyGraph.Statement object at 0x7f4def7eb9d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f4def7b0640>, 'write': <dependencyGraph.Statement object at 0x7f4def7eb9d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
v p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;
v p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4def7ebb50>, <dependencyGraph.Codelet object at 0x7f4def7ebbe0>, <dependencyGraph.Codelet object at 0x7f4def7ebca0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4def7ebca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1
2   p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
5   p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1
6   p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
9   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1
finding node for codelet:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;', 'p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;', 'p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp4']
redundant outputs ['p_state_002', 'p_state_001', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp5', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp10', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp4', 'state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = 1==1&&!(!(!(p_state_000==29))&&1==1)&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
u:  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f4def7a6430>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f4def7a6790>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0892326831817627 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_5_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);

lhs p__br_tmp00 rhs !(!(!(1==1&&p_state_000==29))&&1==1&&1==1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(1==1&&p_state_000==29)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;

lhs p__br_tmp20 rhs !(!(1==1&&p_state_001==29))&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_state_001==29&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f661d8e5640>, 'write': <dependencyGraph.Statement object at 0x7f661d9209d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f661d8e5640>, 'write': <dependencyGraph.Statement object at 0x7f661d9209d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) stmts len 1
p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
v p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 stmts len 1
p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;
v p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f661d920b50>, <dependencyGraph.Codelet object at 0x7f661d920be0>, <dependencyGraph.Codelet object at 0x7f661d920ca0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;
p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f661d920ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1)
2   p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
5   p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1
6   p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
9   state_0 = p_state_002
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
finding node for codelet:  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1)
find_codelet for stmt :  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1)
finding node for codelet:  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;', 'p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;', 'p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp4']
redundant outputs ['p__br_tmp30', 'p_state_001', 'p__br_tmp20', 'p_state_002', 'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp5']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp10', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp4']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['state_0', 'p__br_tmp4', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp4'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = !(!(!(1==1&&p_state_000==29))&&1==1&&1==1);
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = !(1==1&&p_state_000==29)&&1==1&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
u:  p__br_tmp20 = !(!(1==1&&p_state_001==29))&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f661d8db430>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f661d8db790>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p__br_tmp4', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p__br_tmp4', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.147050142288208 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_6_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;

lhs p__br_tmp00 rhs !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;

lhs p__br_tmp10 rhs !(!(!(!(!(p_state_000==29)))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;

lhs p__br_tmp20 rhs !(!(!(p_state_000==29)))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp30 = !(p_state_000==29)&&1==1;

lhs p__br_tmp30 rhs !(p_state_000==29)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = !(p_state_000==29)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp8 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp8 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0']
p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_state_000', 'p_state_000']
p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;

lhs p__br_tmp40 rhs !(!(!(!(!(!(p_state_001==29))))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;

lhs p__br_tmp50 rhs !(!(!(!(p_state_001==29))))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp60 = !(!(p_state_001==29))&&1==1;

lhs p__br_tmp60 rhs !(!(p_state_001==29))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp60 = !(!(p_state_001==29))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp70 = p_state_001==29&&1==1;

lhs p__br_tmp70 rhs p_state_001==29&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp70 = p_state_001==29&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);

lhs p__br_tmp9 rhs 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70']
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp9 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_00']
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp9 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp30 = !(p_state_000==29)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
RAW p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp60 = !(!(p_state_001==29))&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp70 = p_state_001==29&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f127cc4f640>, 'write': <dependencyGraph.Statement object at 0x7f127cc8a3a0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f127cc4f640>, 'write': <dependencyGraph.Statement object at 0x7f127cc8a3a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  16
SCC 0
v p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
v p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 stmts len 1
p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;
v p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 stmts len 1
p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;
v p__br_tmp30 = !(p_state_000==29)&&1==1 stmts len 1
p__br_tmp30 = !(p_state_000==29)&&1==1;
v p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
v p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 stmts len 1
p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;
v p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 stmts len 1
p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;
v p__br_tmp60 = !(!(p_state_001==29))&&1==1 stmts len 1
p__br_tmp60 = !(!(p_state_001==29))&&1==1;
v p__br_tmp70 = p_state_001==29&&1==1 stmts len 1
p__br_tmp70 = p_state_001==29&&1==1;
v p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) stmts len 1
p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
v p_state_002 = p__br_tmp9 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f127cc8af10>, <dependencyGraph.Codelet object at 0x7f127cc8afa0>, <dependencyGraph.Codelet object at 0x7f127cc8afd0>]
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;
p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;
p__br_tmp30 = !(p_state_000==29)&&1==1;
p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;
p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;
p__br_tmp60 = !(!(p_state_001==29))&&1==1;
p__br_tmp70 = p_state_001==29&&1==1;
p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f127cc8afd0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp9', 'p__br_tmp8'}
elements in v_outputs:  {'p__br_tmp9', 'p__br_tmp8'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1
2   p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1
3   p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1
4   p__br_tmp30 = !(p_state_000==29)&&1==1
5   p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
6   p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000)
7   p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1
8   p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1
9   p__br_tmp60 = !(!(p_state_001==29))&&1==1
10   p__br_tmp70 = p_state_001==29&&1==1
11   p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
12   p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
13   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp9', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp50  not in state vars
 statement:  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp60  not in state vars
 statement:  p__br_tmp60 = !(!(p_state_001==29))&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp70  not in state vars
 statement:  p__br_tmp70 = p_state_001==29&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(p_state_000==29)&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp9    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp8    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = !(p_state_000==29)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = !(p_state_000==29)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp60 = !(!(p_state_001==29))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp60 = !(!(p_state_001==29))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp70 = p_state_001==29&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp70 = p_state_001==29&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
find_codelet for stmt :  None
-----------number of nodes in the graph:  14
---------------number of nodes in the graph:  14
finding node for codelet:  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1
find_codelet for stmt :  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1
finding node for codelet:  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1
find_codelet for stmt :  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1
finding node for codelet:  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1
find_codelet for stmt :  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1
finding node for codelet:  p__br_tmp30 = !(p_state_000==29)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = !(p_state_000==29)&&1==1
find_codelet for stmt :  p__br_tmp30 = !(p_state_000==29)&&1==1
finding node for codelet:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
-----------number of nodes in the graph:  14
---------------number of nodes in the graph:  14
number of SCC nodes post splitting:  14
total number of nodes created:  14
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1 p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1 p__br_tmp30 = !(p_state_000==29)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000) p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1 p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1 p__br_tmp60 = !(!(p_state_001==29))&&1==1 p__br_tmp70 = p_state_001==29&&1==1 p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  14
number of nodes in comp_graph:  14
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);', 'p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);', 'p__br_tmp70 = p_state_001==29&&1==1;', 'p__br_tmp60 = !(!(p_state_001==29))&&1==1;', 'p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;', 'p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;', 'p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);', 'p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);', 'p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = !(p_state_000==29)&&1==1;', 'p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;', 'p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;', 'p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp9', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
     |  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
 node outputs:  ['p__br_tmp9']
 node inputs:  ['p__br_tmp50', 'p__br_tmp00', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp40']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp9', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp60 = !(!(p_state_001==29))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp70 = p_state_001==29&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
 * recursive_merge: node ::  p__br_tmp70 = p_state_001==29&&1==1;
 node outputs:  ['p__br_tmp70']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp50', 'p__br_tmp00', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp40'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp70 = p_state_001==29&&1==1;
     |  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp70 = p_state_001==29&&1==1;
 * recursive_merge: node ::  p__br_tmp60 = !(!(p_state_001==29))&&1==1;
 node outputs:  ['p__br_tmp60']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp50', 'p__br_tmp00', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp40'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp60 = !(!(p_state_001==29))&&1==1;
     |  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp60 = !(!(p_state_001==29))&&1==1;
 * recursive_merge: node ::  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;
 node outputs:  ['p__br_tmp50']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp50', 'p__br_tmp00', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp40'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;
     |  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;
 * recursive_merge: node ::  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp50', 'p__br_tmp00', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp40'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;
     |  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p__br_tmp8']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
     |  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp8']
redundant outputs ['p_state_002', 'p__br_tmp50', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp60', 'p_state_001', 'p__br_tmp10', 'p__br_tmp70', 'p__br_tmp9', 'p__br_tmp30', 'p__br_tmp40']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp8']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp9', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
     |  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp8']
 node inputs:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp8'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = !(p_state_000==29)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = !(p_state_000==29)&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = !(p_state_000==29)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp8']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = !(p_state_000==29)&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp8']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;
 * recursive_merge: node ::  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp8']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp50', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp60', 'p__br_tmp10', 'p__br_tmp70', 'p__br_tmp30', 'p__br_tmp40'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp8']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'p__br_tmp8', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp8'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp30 = !(p_state_000==29)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1; p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1; p__br_tmp30 = !(p_state_000==29)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1; p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1; p__br_tmp60 = !(!(p_state_001==29))&&1==1; p__br_tmp70 = p_state_001==29&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
u:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
v:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
u:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
u:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
u:  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
v:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp00 = !(!(!(!(!(!(!(p_state_000==29)))))))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp10 = !(!(!(!(!(p_state_000==29)))))&&1==1;
v:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp20 = !(!(!(p_state_000==29)))&&1==1;
v:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = !(p_state_000==29)&&1==1;
v:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;
u:  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;
u:  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp60 = !(!(p_state_001==29))&&1==1;
u:  p_state_001 = p__br_tmp8 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp70 = p_state_001==29&&1==1;
u:  p__br_tmp40 = !(!(!(!(!(!(p_state_001==29))))))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp50 = !(!(!(!(p_state_001==29))))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp60 = !(!(p_state_001==29))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp70 = p_state_001==29&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_14_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_14_stateless_p_pkt_01_bnd_1.sk.out
['comp_14']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_14 , type?  STATELESS
filename_to_compname: filename =  comp_14_stateless_p_pkt_01_bnd_1.sk.out
['comp_14']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_14  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_14'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f127cc8aca0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f127cc8acd0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp8', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp8', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1755657196044922 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_7_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));

lhs p__br_tmp00 rhs !(!(!(!(p_state_000==29&&1==1))&&1==1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));

lhs p__br_tmp10 rhs 1==1&&!(!(p_state_000==29&&1==1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp20 = 1==1&&1==1&&p_state_000==29;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_state_000==29
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_state_000==29;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp5 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp5 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (0) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000']
p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);

lhs p__br_tmp30 rhs !(!(!(p_state_001==29&&1==1))&&1==1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);

lhs p__br_tmp40 rhs 1==1&&!(p_state_001==29&&1==1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);

lhs p__br_tmp6 rhs 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40']
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp6 ? (0) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_00']
p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (p_state_001+1) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));
RAW p_state_000 = state_0; p__br_tmp20 = 1==1&&1==1&&p_state_000==29;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
RAW p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
RAW p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001);
RAW p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
RAW p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
RAW p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f9b8d91d640>, 'write': <dependencyGraph.Statement object at 0x7f9b8d9584f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f9b8d91d640>, 'write': <dependencyGraph.Statement object at 0x7f9b8d9584f0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) stmts len 1
p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
v p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) stmts len 1
p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));
v p__br_tmp20 = 1==1&&1==1&&p_state_000==29 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_state_000==29;
v p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_001 = p__br_tmp5 ? (0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
v p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) stmts len 1
p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);
v p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) stmts len 1
p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);
v p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) stmts len 1
p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
v p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9b8d958d60>, <dependencyGraph.Codelet object at 0x7f9b8d958df0>, <dependencyGraph.Codelet object at 0x7f9b8d958ca0>]
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));
p__br_tmp20 = 1==1&&1==1&&p_state_000==29;
p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);
p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);
p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9b8d958ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp6', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp6', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1))
2   p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1))
3   p__br_tmp20 = 1==1&&1==1&&p_state_000==29
4   p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
5   p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
6   p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1)
7   p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1)
8   p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
9   p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001)
10   state_0 = p_state_002
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1))
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1))
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1)
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1)
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001)
 rhs_vars:  ['p__br_tmp6', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
 rhs_vars:  ['p__br_tmp5', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&1==1&&p_state_000==29
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp6    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1))
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1))
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1))
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1))
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = 1==1&&1==1&&p_state_000==29
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&1==1&&p_state_000==29
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
find_codelet for stmt :  None
-----------number of nodes in the graph:  11
---------------number of nodes in the graph:  11
finding node for codelet:  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1))
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1))
find_codelet for stmt :  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1))
finding node for codelet:  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1))
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1))
find_codelet for stmt :  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1))
finding node for codelet:  p__br_tmp20 = 1==1&&1==1&&p_state_000==29
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&1==1&&p_state_000==29
find_codelet for stmt :  p__br_tmp20 = 1==1&&1==1&&p_state_000==29
finding node for codelet:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
find_codelet for stmt :  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
-----------number of nodes in the graph:  11
---------------number of nodes in the graph:  11
number of SCC nodes post splitting:  11
total number of nodes created:  11
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_state_000==29 p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  11
number of nodes in comp_graph:  11
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);', 'p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);', 'p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);', 'p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);', 'p_state_001 = p__br_tmp5 ? (0) : (p_state_000);', 'p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);', 'p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);', 'p__br_tmp20 = 1==1&&1==1&&p_state_000==29;', 'p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));', 'p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp6', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
     |  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
 node outputs:  ['p__br_tmp6']
 node inputs:  ['p__br_tmp30', 'p__br_tmp00', 'p__br_tmp40']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
     |  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
     |  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
     |  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
 * recursive_merge: node ::  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp40'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);
     |  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);
 * recursive_merge: node ::  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp40'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);
     |  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);
 * recursive_merge: node ::  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p_state_000', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
     |  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp5']
redundant outputs ['p__br_tmp10', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp6', 'p_state_002', 'p_state_001', 'p__br_tmp20']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp5', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp6', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
     |  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp10', 'p__br_tmp00', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp5', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp20 = 1==1&&1==1&&p_state_000==29;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&1==1&&p_state_000==29;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&1==1&&p_state_000==29;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp5']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&1==1&&p_state_000==29;
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp5']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p_state_000', 'p_state_000', 'p__br_tmp5']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp5', 'p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp20 = 1==1&&1==1&&p_state_000==29;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_state_000==29; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_002 = p__br_tmp6 ? (p_state_001+1) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
u:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
u:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
v:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
u:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
u:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
u:  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
v:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp00 = !(!(!(!(p_state_000==29&&1==1))&&1==1));
v:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
u:  p__br_tmp10 = 1==1&&!(!(p_state_000==29&&1==1));
v:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp20 = 1==1&&1==1&&p_state_000==29;
v:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
v:  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);
u:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
v:  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);
u:  p__br_tmp30 = !(!(!(p_state_001==29&&1==1))&&1==1);
v:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
u:  p__br_tmp40 = 1==1&&!(p_state_001==29&&1==1);
v:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_11_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_pkt_01_bnd_1.sk.out
['comp_11']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_11  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f9b8d9116a0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f9b8d911a60>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp5', 'p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp5', 'p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1819546222686768 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_8_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));

lhs p__br_tmp00 rhs 1==1&&!(1==1&&!(!(p_state_000==29)))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_state_000==29)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!(p_state_001==29))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp30 = 1==1&&p_state_001==29&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_state_001==29&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_state_001==29&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = 1==1&&p_state_001==29&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fa56d270640>, 'write': <dependencyGraph.Statement object at 0x7fa56d2ab340>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa56d270640>, 'write': <dependencyGraph.Statement object at 0x7fa56d2ab340>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) stmts len 1
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
v p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;
v p__br_tmp30 = 1==1&&p_state_001==29&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_state_001==29&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa56d2abb50>, <dependencyGraph.Codelet object at 0x7fa56d2abbe0>, <dependencyGraph.Codelet object at 0x7fa56d2abca0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;
p__br_tmp30 = 1==1&&p_state_001==29&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa56d2abca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)))
2   p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
5   p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1
6   p__br_tmp30 = 1==1&&p_state_001==29&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
9   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)))
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)))
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)))
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)))
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)))
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)))
finding node for codelet:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1
find_codelet for stmt :  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = 1==1&&p_state_001==29&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))) p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1 p__br_tmp30 = 1==1&&p_state_001==29&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&p_state_001==29&&1==1;', 'p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;', 'p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_state_001==29&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_state_001==29&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_state_001==29&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_state_001==29&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp30', 'p__br_tmp00', 'p_state_002', 'p__br_tmp5', 'p__br_tmp20', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp00', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['state_0', 'p__br_tmp4', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29))); p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1; p__br_tmp30 = 1==1&&p_state_001==29&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_state_000==29)));
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = 1==1&&!(p_state_000==29)&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1;
u:  p__br_tmp20 = 1==1&&!(!(p_state_001==29))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_state_001==29&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fa56d265520>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fa56d265790>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p__br_tmp4', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p__br_tmp4', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0761075019836426 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_9_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp2 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0']
p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&1==1&&p_state_001==29&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp3 rhs 1&&!(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp3 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_00']
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp3 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;
RAW p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fdef74db640>, 'write': <dependencyGraph.Statement object at 0x7fdef7516340>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fdef74db640>, 'write': <dependencyGraph.Statement object at 0x7fdef7516340>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  10
SCC 0
v p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
v p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;
v p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
v p_state_002 = p__br_tmp3 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdef7516b20>, <dependencyGraph.Codelet object at 0x7fdef75160a0>, <dependencyGraph.Codelet object at 0x7fdef7516a30>]
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdef7516a30>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp3', 'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp3', 'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000)
4   p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1
5   p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10)
6   p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
7   state_0 = p_state_002
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp3', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp3    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp2    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
finding node for codelet:  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1
find_codelet for stmt :  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1
finding node for codelet:  p__br_tmp2 = 1&&(p__br_tmp00)
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
find_codelet for stmt :  p__br_tmp2 = 1&&(p__br_tmp00)
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000) p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1 p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);', 'p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;', 'p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);', 'p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
     |  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp3']
 node inputs:  ['p__br_tmp00', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;
     |  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp2', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp2', 'p_state_000']
redundant outputs ['p__br_tmp00', 'p_state_002', 'p__br_tmp10', 'p__br_tmp3', 'p_state_001']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp2', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p__br_tmp2', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp2', 'state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
u:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
u:  p__br_tmp2 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
u:  p__br_tmp2 = 1&&(p__br_tmp00);
v:  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
u:  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&!(p_state_000==29&&1==1)&&1==1&&1==1;
v:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
u:  p_state_001 = p__br_tmp2 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;
u:  p__br_tmp10 = 1==1&&1==1&&p_state_001==29&&1==1&&1==1;
v:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_8_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_8_stateless_p_pkt_01_bnd_1.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p_pkt_01_bnd_1.sk.out
['comp_8']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_8'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fdef74cf3a0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fdef74cf490>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp2', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp2', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0236907005310059 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_10_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;

lhs p__br_tmp00 rhs !(!(!(p_state_000==29)&&1==1))&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_state_000==29)&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;

lhs p__br_tmp20 rhs !(!(p_state_001==29)&&1==1)&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp30 = p_state_001==29&&1==1&&1==1;

lhs p__br_tmp30 rhs p_state_001==29&&1==1&&1==1
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp30 = p_state_001==29&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp30 = p_state_001==29&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f98db328640>, 'write': <dependencyGraph.Statement object at 0x7f98db364340>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f98db328640>, 'write': <dependencyGraph.Statement object at 0x7f98db364340>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
v p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 stmts len 1
p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;
v p__br_tmp30 = p_state_001==29&&1==1&&1==1 stmts len 1
p__br_tmp30 = p_state_001==29&&1==1&&1==1;
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f98db364b50>, <dependencyGraph.Codelet object at 0x7f98db364be0>, <dependencyGraph.Codelet object at 0x7f98db364ca0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;
p__br_tmp30 = p_state_001==29&&1==1&&1==1;
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f98db364ca0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1
2   p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
5   p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1
6   p__br_tmp30 = p_state_001==29&&1==1&&1==1
7   p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
8   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
9   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = p_state_001==29&&1==1&&1==1
 rhs_vars:  ['p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1
find_codelet for stmt :  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1
finding node for codelet:  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1
find_codelet for stmt :  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1
finding node for codelet:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
find_codelet for stmt :  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp30 = p_state_001==29&&1==1&&1==1
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp30 = p_state_001==29&&1==1&&1==1
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
find_codelet for stmt :  None
-----------number of nodes in the graph:  10
---------------number of nodes in the graph:  10
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1 p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000) p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1 p__br_tmp30 = p_state_001==29&&1==1&&1==1 p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = p_state_001==29&&1==1&&1==1;', 'p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;', 'p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;', 'p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = p_state_001==29&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = p_state_001==29&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = p_state_001==29&&1==1&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = p_state_001==29&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;
     |  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;
 * recursive_merge: node ::  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 node outputs:  ['p_state_001']
 node inputs:  ['p__br_tmp4', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000']
redundant outputs ['p_state_001', 'p_state_002', 'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp5', 'p__br_tmp30']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 node outputs:  ['p__br_tmp4']
 node inputs:  ['p__br_tmp10', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
     |  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
 * recursive_merge: node ::  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_state_000', 'p_state_000', 'p__br_tmp4', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p__br_tmp4', 'state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp4', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1; p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000); p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1; p__br_tmp30 = p_state_001==29&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
u:  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p__br_tmp00 = !(!(!(p_state_000==29)&&1==1))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp10 = !(p_state_000==29)&&1==1&&1==1;
v:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;
u:  p_state_001 = p__br_tmp4 ? (p_state_000+1) : (p_state_000);
v:  p__br_tmp30 = p_state_001==29&&1==1&&1==1;
u:  p__br_tmp20 = !(!(p_state_001==29)&&1==1)&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = p_state_001==29&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_10_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_pkt_01_bnd_1.sk.out
['comp_10']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_10'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f98db31d520>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f98db31d790>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.114548921585083 s
preprocessor time:
