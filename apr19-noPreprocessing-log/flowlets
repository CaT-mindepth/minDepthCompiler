running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_1. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

lhs pkt__br_tmp00 rhs 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fdd46d0a640>, 'write': <dependencyGraph.Statement object at 0x7fdd46d458e0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7fdd46d45790>, 'write': <dependencyGraph.Statement object at 0x7fdd46d454c0>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fdd46d0a640>, 'write': <dependencyGraph.Statement object at 0x7fdd46d458e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fdd46d45790>, 'write': <dependencyGraph.Statement object at 0x7fdd46d454c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1 stmts len 1
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdd46d45b20>, <dependencyGraph.Codelet object at 0x7fdd46d45a90>, <dependencyGraph.Codelet object at 0x7fdd46d45b50>, <dependencyGraph.Codelet object at 0x7fdd46d45ac0>, <dependencyGraph.Codelet object at 0x7fdd46d45bb0>, <dependencyGraph.Codelet object at 0x7fdd46d45ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdd46d45a90>, <dependencyGraph.Codelet object at 0x7fdd46d45bb0>}
total number of nodes created:  6
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop00', 'pkt_last_time00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fdd46d45700>]
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['saved_hop', 'pkt_saved_hop01']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fdd46d45700>]
removing two old components
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['saved_hop', 'pkt_saved_hop01']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
redundant outputs []
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'saved_hop', 'pkt_last_time00', 'pkt_arrival']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_last_time00', 'pkt_arrival']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt_new_hop', 'pkt__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt__br_tmp2']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt__br_tmp2']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fdd46d452b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['pkt_last_time00', 'last_time']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_last_time00', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01', 'pkt_arrival', 'last_time'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdd46d45520>]
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01', 'pkt__br_tmp2']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt_last_time00', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_last_time00', 'pkt_arrival']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_last_time00', 'pkt_arrival']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp00'}
{'pkt_next_hop0', 'pkt__br_tmp00'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdd46d459d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdd46d459d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdd46d459d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdd46d459d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output pkt__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x9fc9e45f
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 4
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  2.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATELESS ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fdd46d027f0>, 0), (<alus.DominoALU object at 0x7fdd46d02910>, 1), (<alus.DominoALU object at 0x7fdd46d02880>, 2), (<alus.DominoALU object at 0x7fdd46d02c40>, 3), (<alus.DominoALU object at 0x7fdd46d02940>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fdd46d02790>, 0), (<alus.DominoGenericSALU object at 0x7fdd46d459d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time01', 'pkt_last_time00', 'last_time', 'pkt__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 4, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 13, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time01', 'pkt_last_time00', 'last_time', 'pkt__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 4, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 13, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '3'}]}
Time taken: 7.086016416549683 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_2. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

lhs pkt__br_tmp00 rhs 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fc8875e8640>, 'write': <dependencyGraph.Statement object at 0x7fc8876238e0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7fc887623790>, 'write': <dependencyGraph.Statement object at 0x7fc8876234c0>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fc8875e8640>, 'write': <dependencyGraph.Statement object at 0x7fc8876238e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fc887623790>, 'write': <dependencyGraph.Statement object at 0x7fc8876234c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1 stmts len 1
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc887623b20>, <dependencyGraph.Codelet object at 0x7fc887623a90>, <dependencyGraph.Codelet object at 0x7fc887623b50>, <dependencyGraph.Codelet object at 0x7fc887623ac0>, <dependencyGraph.Codelet object at 0x7fc887623bb0>, <dependencyGraph.Codelet object at 0x7fc887623ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc887623a90>, <dependencyGraph.Codelet object at 0x7fc887623bb0>}
total number of nodes created:  6
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out
Stored read, write flank variables
{'pkt_saved_hop00', 'pkt_last_time01', 'pkt_saved_hop01', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1', 'pkt_next_hop', 'pkt__br_tmp2']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1', 'pkt_next_hop', 'pkt__br_tmp2']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp00', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fc887623700>]
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['saved_hop', 'pkt_saved_hop01']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fc887623700>]
removing two old components
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['saved_hop', 'pkt_saved_hop01']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fc8876232b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'pkt_saved_hop01', 'pkt_arrival', 'pkt_next_hop', 'pkt__br_tmp2', 'last_time'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fc887623520>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt__br_tmp2', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt_last_time00', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp00', 'pkt_next_hop0'}
{'pkt__br_tmp00', 'pkt_next_hop0'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc8876239d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc8876239d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc8876239d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc8876239d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output pkt__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  6
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,
+---> dependencies of ALU  1 : 
6,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x70caa549
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 13 rows and 28 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 285 nonzeros
Variable types: 0 continuous, 65 integer (57 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 1
T0_A_3 1
T0_A_4 -0
T0_A_5 2
T0_A_6 4
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  4.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
alu  6  is of type  STATELESS ; scheduled to stage  4
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fc8875e0700>, 0), (<alus.DominoALU object at 0x7fc8875e0760>, 1), (<alus.DominoALU object at 0x7fc8875e09d0>, 2), (<alus.DominoALU object at 0x7fc8875e0370>, 3), (<alus.DominoALU object at 0x7fc8875e0670>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fc8875e0790>, 0), (<alus.DominoGenericSALU object at 0x7fc8876239d0>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt__br_tmp2', 'pkt_last_time01', 'pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '6'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '0'}, {'id': 6, 'opcode': 15, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_next_hop', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt__br_tmp2', 'pkt_last_time01', 'pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '6'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '0'}, {'id': 6, 'opcode': 15, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_next_hop', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
Time taken: 7.25501561164856 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_3. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;

lhs pkt__br_tmp00 rhs 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7feec71d5790>, 'write': <dependencyGraph.Statement object at 0x7feec71d54c0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7feec719a640>, 'write': <dependencyGraph.Statement object at 0x7feec71d58e0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7feec71d5790>, 'write': <dependencyGraph.Statement object at 0x7feec71d54c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7feec719a640>, 'write': <dependencyGraph.Statement object at 0x7feec71d58e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1 stmts len 1
pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7feec71d5b20>, <dependencyGraph.Codelet object at 0x7feec71d5a90>, <dependencyGraph.Codelet object at 0x7feec71d5b50>, <dependencyGraph.Codelet object at 0x7feec71d5ac0>, <dependencyGraph.Codelet object at 0x7feec71d5bb0>, <dependencyGraph.Codelet object at 0x7feec71d5ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7feec71d5a90>, <dependencyGraph.Codelet object at 0x7feec71d5bb0>}
total number of nodes created:  6
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1', 'pkt_next_hop', 'pkt__br_tmp2']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1', 'pkt_next_hop', 'pkt__br_tmp2']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp00', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7feec71d5700>]
adj_inputs ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['pkt_saved_hop01', 'saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7feec71d5700>]
removing two old components
adj_inputs ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['pkt_saved_hop01', 'saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'pkt_last_time00', 'pkt_arrival', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_last_time00', 'pkt_arrival']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'pkt__br_tmp00', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7feec71d52b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'pkt_next_hop', 'pkt_arrival', 'last_time', 'pkt_saved_hop01', 'pkt__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7feec71d5520>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt__br_tmp2', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_last_time00', 'pkt_arrival']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_last_time00', 'pkt_arrival']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp00', 'pkt_next_hop0'}
{'pkt__br_tmp00', 'pkt_next_hop0'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7feec71d59d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7feec71d59d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7feec71d59d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7feec71d59d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output pkt__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  6
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,4,
+---> dependencies of ALU  1 : 
6,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 4), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0xd70b6728
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 13 rows and 28 columns
Presolve time: 0.00s
Presolved: 121 rows, 65 columns, 285 nonzeros
Variable types: 0 continuous, 65 integer (57 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 1
T0_A_3 -0
T0_A_4 1
T0_A_5 2
T0_A_6 4
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  4.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
alu  6  is of type  STATELESS ; scheduled to stage  4
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7feec7192700>, 0), (<alus.DominoALU object at 0x7feec7192760>, 1), (<alus.DominoALU object at 0x7feec71929d0>, 2), (<alus.DominoALU object at 0x7feec7192370>, 3), (<alus.DominoALU object at 0x7feec7192670>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7feec7192790>, 0), (<alus.DominoGenericSALU object at 0x7feec71d59d0>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt__br_tmp2', 'pkt_last_time01', 'last_time', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '7'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '26'}, {'id': 6, 'opcode': 14, 'operand0': 'pkt_next_hop', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 4), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt__br_tmp2', 'pkt_last_time01', 'last_time', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '7'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '26'}, {'id': 6, 'opcode': 14, 'operand0': 'pkt_next_hop', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
Time taken: 17.48819088935852 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_4. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

lhs pkt__br_tmp00 rhs 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f8d31467790>, 'write': <dependencyGraph.Statement object at 0x7f8d314674c0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f8d3142c640>, 'write': <dependencyGraph.Statement object at 0x7f8d314678e0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f8d31467790>, 'write': <dependencyGraph.Statement object at 0x7f8d314674c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f8d3142c640>, 'write': <dependencyGraph.Statement object at 0x7f8d314678e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1 stmts len 1
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8d31467b20>, <dependencyGraph.Codelet object at 0x7f8d31467a90>, <dependencyGraph.Codelet object at 0x7f8d31467b50>, <dependencyGraph.Codelet object at 0x7f8d31467ac0>, <dependencyGraph.Codelet object at 0x7f8d31467bb0>, <dependencyGraph.Codelet object at 0x7f8d31467ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8d31467a90>, <dependencyGraph.Codelet object at 0x7f8d31467bb0>}
total number of nodes created:  6
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_last_time00', 'pkt_saved_hop00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01', 'pkt_next_hop', 'pkt__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01', 'pkt_next_hop', 'pkt__br_tmp2']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt__br_tmp1', 'pkt_new_hop', 'pkt_next_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt__br_tmp1', 'pkt_new_hop', 'pkt_next_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt_saved_hop01', 'pkt_next_hop', 'pkt__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt_saved_hop01', 'pkt_next_hop', 'pkt__br_tmp2']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt__br_tmp00', 'pkt_new_hop', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp00', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f8d31467700>]
adj_inputs ['pkt_saved_hop01', 'pkt_next_hop', 'pkt__br_tmp2']
redundant outputs ['pkt__br_tmp1', 'pkt_saved_hop00']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['pkt_saved_hop01', 'saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f8d31467700>]
removing two old components
adj_inputs ['pkt_saved_hop01', 'pkt_next_hop', 'pkt__br_tmp2']
redundant outputs ['pkt__br_tmp1', 'pkt_saved_hop00']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['pkt_saved_hop01', 'saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt_saved_hop01', 'pkt_next_hop', 'pkt__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
redundant outputs []
adj_inputs ['pkt_saved_hop01', 'pkt_next_hop', 'pkt__br_tmp2']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'pkt_arrival', 'saved_hop', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp00', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt__br_tmp2']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt__br_tmp2']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f8d314672b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_last_time00', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'pkt_saved_hop01', 'pkt_arrival', 'pkt__br_tmp2', 'last_time', 'pkt_next_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f8d31467520>]
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01', 'pkt__br_tmp2']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp00', 'pkt_next_hop0'}
{'pkt__br_tmp00', 'pkt_next_hop0'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f8d314679d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f8d314679d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f8d314679d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f8d314679d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output pkt__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  6
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,
+---> dependencies of ALU  1 : 
6,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 133 rows, 93 columns and 296 nonzeros
Model fingerprint: 0x2f15807f
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 122 rows, 66 columns, 288 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 1
T0_A_3 -0
T0_A_4 -0
T0_A_5 2
T0_A_6 4
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  4.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
alu  6  is of type  STATELESS ; scheduled to stage  4
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f8d31424700>, 0), (<alus.DominoALU object at 0x7f8d31424760>, 1), (<alus.DominoALU object at 0x7f8d314249d0>, 2), (<alus.DominoALU object at 0x7f8d31424370>, 3), (<alus.DominoALU object at 0x7f8d31424670>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f8d31424790>, 0), (<alus.DominoGenericSALU object at 0x7f8d314679d0>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00', 'pkt_last_time01', 'pkt__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '17'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': 'pkt_next_hop', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt_last_time00', 'pkt_last_time01', 'pkt__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '17'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': 'pkt_next_hop', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
Time taken: 7.465030193328857 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_5. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

lhs pkt__br_tmp00 rhs 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f6a8e1e8640>, 'write': <dependencyGraph.Statement object at 0x7f6a8e2238e0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f6a8e223790>, 'write': <dependencyGraph.Statement object at 0x7f6a8e2234c0>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f6a8e1e8640>, 'write': <dependencyGraph.Statement object at 0x7f6a8e2238e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f6a8e223790>, 'write': <dependencyGraph.Statement object at 0x7f6a8e2234c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1 stmts len 1
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6a8e223b20>, <dependencyGraph.Codelet object at 0x7f6a8e223a90>, <dependencyGraph.Codelet object at 0x7f6a8e223b50>, <dependencyGraph.Codelet object at 0x7f6a8e223ac0>, <dependencyGraph.Codelet object at 0x7f6a8e223bb0>, <dependencyGraph.Codelet object at 0x7f6a8e223ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6a8e223a90>, <dependencyGraph.Codelet object at 0x7f6a8e223bb0>}
total number of nodes created:  6
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out
Stored read, write flank variables
{'pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_last_time00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt_next_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt_next_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt__br_tmp00', 'pkt_new_hop', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp00', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f6a8e223700>]
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['saved_hop', 'pkt_saved_hop01']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f6a8e223700>]
removing two old components
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['saved_hop', 'pkt_saved_hop01']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp00', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f6a8e2232b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp00', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_last_time00', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'last_time', 'pkt_next_hop', 'pkt_saved_hop01', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f6a8e223520>]
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs ['pkt__br_tmp2', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp00'}
{'pkt_next_hop0', 'pkt__br_tmp00'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6a8e2239d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6a8e2239d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6a8e2239d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6a8e2239d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output pkt__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0xc9bbca38
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 13 rows and 28 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 285 nonzeros
Variable types: 0 continuous, 65 integer (57 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 4
T0_A_3 1
T0_A_4 1
T0_A_5 -0
T0_A_6 2
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  2.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATELESS ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f6a8e1e07f0>, 0), (<alus.DominoALU object at 0x7f6a8e1e0910>, 1), (<alus.DominoALU object at 0x7f6a8e1e0880>, 2), (<alus.DominoALU object at 0x7f6a8e1e0c40>, 3), (<alus.DominoALU object at 0x7f6a8e1e0940>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f6a8e1e0790>, 0), (<alus.DominoGenericSALU object at 0x7f6a8e2239d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt__br_tmp2', 'last_time', 'pkt_last_time00', 'pkt_last_time01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '18'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 5, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '5'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt__br_tmp2', 'last_time', 'pkt_last_time00', 'pkt_last_time01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '18'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 5, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '5'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '1'}]}
Time taken: 10.516014099121094 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_6. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;

lhs pkt__br_tmp00 rhs pkt_arrival-pkt_last_time00>5&&1==1
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f9586f4c640>, 'write': <dependencyGraph.Statement object at 0x7f9586f878e0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f9586f87790>, 'write': <dependencyGraph.Statement object at 0x7f9586f874c0>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f9586f4c640>, 'write': <dependencyGraph.Statement object at 0x7f9586f878e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f9586f87790>, 'write': <dependencyGraph.Statement object at 0x7f9586f874c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1 stmts len 1
pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9586f87b20>, <dependencyGraph.Codelet object at 0x7f9586f87a90>, <dependencyGraph.Codelet object at 0x7f9586f87b50>, <dependencyGraph.Codelet object at 0x7f9586f87ac0>, <dependencyGraph.Codelet object at 0x7f9586f87bb0>, <dependencyGraph.Codelet object at 0x7f9586f87ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9586f87a90>, <dependencyGraph.Codelet object at 0x7f9586f87bb0>}
total number of nodes created:  6
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out
Stored read, write flank variables
{'pkt_saved_hop00', 'pkt_last_time01', 'pkt_last_time00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp2', 'pkt__br_tmp1', 'pkt_next_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp2', 'pkt__br_tmp1', 'pkt_next_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'saved_hop', 'pkt__br_tmp00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f9586f876d0>]
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['saved_hop', 'pkt_saved_hop01']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f9586f876d0>]
removing two old components
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['saved_hop', 'pkt_saved_hop01']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'pkt__br_tmp00', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt__br_tmp2']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt__br_tmp2']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f9586f872b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_arrival', 'last_time', 'pkt_next_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f9586f876a0>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt__br_tmp2', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp00', 'pkt_next_hop0'}
{'pkt__br_tmp00', 'pkt_next_hop0'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f9586f879d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f9586f879d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f9586f879d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f9586f879d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output pkt__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  6
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
6,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x7e062536
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 13 rows and 28 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 285 nonzeros
Variable types: 0 continuous, 65 integer (57 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 2
T0_A_6 4
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  4.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
alu  6  is of type  STATELESS ; scheduled to stage  4
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f9586f44700>, 0), (<alus.DominoALU object at 0x7f9586f44760>, 1), (<alus.DominoALU object at 0x7f9586f449d0>, 2), (<alus.DominoALU object at 0x7f9586f44370>, 3), (<alus.DominoALU object at 0x7f9586f44670>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f9586f44790>, 0), (<alus.DominoGenericSALU object at 0x7f9586f879d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt__br_tmp2', 'pkt_last_time00', 'pkt_last_time01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 30, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '1'}, {'id': 6, 'opcode': 4, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_next_hop', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt__br_tmp2', 'pkt_last_time00', 'pkt_last_time01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 30, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '1'}, {'id': 6, 'opcode': 4, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_next_hop', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
Time taken: 8.384939193725586 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_7. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp00 rhs 1==1&&1==1&&pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fb2778f6640>, 'write': <dependencyGraph.Statement object at 0x7fb2779318e0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7fb277931790>, 'write': <dependencyGraph.Statement object at 0x7fb2779314c0>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fb2778f6640>, 'write': <dependencyGraph.Statement object at 0x7fb2779318e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fb277931790>, 'write': <dependencyGraph.Statement object at 0x7fb2779314c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb277931b20>, <dependencyGraph.Codelet object at 0x7fb277931a90>, <dependencyGraph.Codelet object at 0x7fb277931b50>, <dependencyGraph.Codelet object at 0x7fb277931ac0>, <dependencyGraph.Codelet object at 0x7fb277931bb0>, <dependencyGraph.Codelet object at 0x7fb277931ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb277931a90>, <dependencyGraph.Codelet object at 0x7fb277931bb0>}
total number of nodes created:  6
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop00', 'pkt_last_time00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_next_hop', 'pkt_new_hop', 'pkt__br_tmp2', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_next_hop', 'pkt_new_hop', 'pkt__br_tmp2', 'pkt__br_tmp1']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp00', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fb2779316a0>]
adj_inputs ['pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['saved_hop', 'pkt_saved_hop01']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fb2779316a0>]
removing two old components
adj_inputs ['pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['saved_hop', 'pkt_saved_hop01']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs ['pkt_next_hop', 'pkt__br_tmp2', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt__br_tmp2']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt__br_tmp2']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7fb2779312b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp00', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_saved_hop01', 'pkt_next_hop', 'pkt__br_tmp2', 'last_time'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb277931700>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01', 'pkt__br_tmp2']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
 --- cannot fold. too many stateless inputs:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp00', 'pkt_next_hop0'}
{'pkt__br_tmp00', 'pkt_next_hop0'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fb2779319d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fb2779319d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fb2779319d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fb2779319d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
Stateless ALU id 5 has output pkt__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_7', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  6
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,
+---> dependencies of ALU  1 : 
6,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x70caa549
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 13 rows and 28 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 285 nonzeros
Variable types: 0 continuous, 65 integer (57 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 1
T0_A_3 1
T0_A_4 -0
T0_A_5 2
T0_A_6 4
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  1.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  4.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
 > get_alu_stage: table  0 , alu_id =  6 :  4.0
alu  6  is of type  STATELESS ; scheduled to stage  4
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fb2778ee700>, 0), (<alus.DominoALU object at 0x7fb2778ee760>, 1), (<alus.DominoALU object at 0x7fb2778ee9d0>, 2), (<alus.DominoALU object at 0x7fb2778ee370>, 3), (<alus.DominoALU object at 0x7fb2778ee670>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fb2778ee790>, 0), (<alus.DominoGenericSALU object at 0x7fb2779319d0>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time01', 'last_time', 'pkt_last_time00', 'pkt__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '7'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '31'}, {'id': 6, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time01', 'last_time', 'pkt_last_time00', 'pkt__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '7'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '31'}, {'id': 6, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
Time taken: 8.372312784194946 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_8. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;

lhs pkt__br_tmp00 rhs 1==1&&pkt_arrival-pkt_last_time00>5&&1==1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f57e76c3790>, 'write': <dependencyGraph.Statement object at 0x7f57e76c34c0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f57e7688640>, 'write': <dependencyGraph.Statement object at 0x7f57e76c38e0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f57e76c3790>, 'write': <dependencyGraph.Statement object at 0x7f57e76c34c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f57e7688640>, 'write': <dependencyGraph.Statement object at 0x7f57e76c38e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1 stmts len 1
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f57e76c3b20>, <dependencyGraph.Codelet object at 0x7f57e76c3a90>, <dependencyGraph.Codelet object at 0x7f57e76c3b50>, <dependencyGraph.Codelet object at 0x7f57e76c3ac0>, <dependencyGraph.Codelet object at 0x7f57e76c3bb0>, <dependencyGraph.Codelet object at 0x7f57e76c3ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f57e76c3a90>, <dependencyGraph.Codelet object at 0x7f57e76c3bb0>}
total number of nodes created:  6
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_next_hop', 'pkt_new_hop', 'pkt__br_tmp2', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_next_hop', 'pkt_new_hop', 'pkt__br_tmp2', 'pkt__br_tmp1']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp00', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f57e76c36a0>]
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['pkt_saved_hop01', 'saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f57e76c36a0>]
removing two old components
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['pkt_saved_hop01', 'saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'pkt_arrival', 'saved_hop', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'pkt__br_tmp00', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f57e76c32b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'pkt_next_hop', 'pkt_saved_hop01', 'last_time', 'pkt__br_tmp2', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f57e76c3700>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt__br_tmp2', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp00'}
{'pkt_next_hop0', 'pkt__br_tmp00'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = 1==1&&pkt_arrival-pkt_last_time00>5&&1==1;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f57e76c39d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f57e76c39d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f57e76c39d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f57e76c39d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output pkt__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x9fc9e45f
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 4
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  2.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATELESS ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f57e76807f0>, 0), (<alus.DominoALU object at 0x7f57e7680910>, 1), (<alus.DominoALU object at 0x7f57e7680880>, 2), (<alus.DominoALU object at 0x7f57e7680c40>, 3), (<alus.DominoALU object at 0x7f57e7680940>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f57e7680790>, 0), (<alus.DominoGenericSALU object at 0x7f57e76c39d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt__br_tmp2', 'last_time', 'pkt_last_time00', 'pkt_last_time01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 2, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_next_hop', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '5'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 14, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '10'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt__br_tmp2', 'last_time', 'pkt_last_time00', 'pkt_last_time01'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 2, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_next_hop', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '5'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 14, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '10'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '6'}]}
Time taken: 13.505328178405762 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_9. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

lhs pkt__br_tmp00 rhs 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fdde8325790>, 'write': <dependencyGraph.Statement object at 0x7fdde83254c0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fdde82ea640>, 'write': <dependencyGraph.Statement object at 0x7fdde83258e0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fdde8325790>, 'write': <dependencyGraph.Statement object at 0x7fdde83254c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fdde82ea640>, 'write': <dependencyGraph.Statement object at 0x7fdde83258e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1 stmts len 1
pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdde8325b20>, <dependencyGraph.Codelet object at 0x7fdde8325a90>, <dependencyGraph.Codelet object at 0x7fdde8325b50>, <dependencyGraph.Codelet object at 0x7fdde8325ac0>, <dependencyGraph.Codelet object at 0x7fdde8325bb0>, <dependencyGraph.Codelet object at 0x7fdde8325ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdde8325a90>, <dependencyGraph.Codelet object at 0x7fdde8325bb0>}
total number of nodes created:  6
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out
Stored read, write flank variables
{'pkt_saved_hop00', 'pkt_last_time01', 'pkt_saved_hop01', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt__br_tmp1', 'pkt_next_hop', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt__br_tmp1', 'pkt_next_hop', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp00', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fdde8325520>]
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['saved_hop', 'pkt_saved_hop01']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fdde8325520>]
removing two old components
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['saved_hop', 'pkt_saved_hop01']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['saved_hop', 'pkt_saved_hop01']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
redundant outputs []
adj_inputs ['pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'pkt__br_tmp00', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fdde83252b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['last_time', 'pkt_last_time00']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'last_time', 'pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdde8325760>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt__br_tmp2', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt_last_time00']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp00'}
{'pkt_next_hop0', 'pkt__br_tmp00'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = 1==1&&1==1&&pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdde83259d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdde83259d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdde83259d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdde83259d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output pkt__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0xc9bbca38
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 13 rows and 28 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 285 nonzeros
Variable types: 0 continuous, 65 integer (57 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 4
T0_A_3 1
T0_A_4 1
T0_A_5 -0
T0_A_6 2
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  2.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATELESS ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fdde82e27f0>, 0), (<alus.DominoALU object at 0x7fdde82e2910>, 1), (<alus.DominoALU object at 0x7fdde82e2880>, 2), (<alus.DominoALU object at 0x7fdde82e2c40>, 3), (<alus.DominoALU object at 0x7fdde82e2940>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fdde82e2790>, 0), (<alus.DominoGenericSALU object at 0x7fdde83259d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt__br_tmp2', 'pkt_last_time01', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_next_hop', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '15'}, {'id': 4, 'opcode': 13, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['last_time', 'pkt__br_tmp2', 'pkt_last_time01', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_next_hop', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '15'}, {'id': 4, 'opcode': 13, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '6'}]}
Time taken: 8.317802429199219 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_10. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

lhs pkt__br_tmp00 rhs pkt_arrival-pkt_last_time00>5&&1==1&&1==1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt__br_tmp1 = 1&&(pkt__br_tmp00);

lhs pkt__br_tmp1 rhs 1&&(pkt__br_tmp00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = 1&&(pkt__br_tmp00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt__br_tmp2 = 1;

lhs pkt__br_tmp2 rhs 1
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp2 = 1;

 is_read_flank: processing rhs_vars =  []
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

lhs pkt_last_time01 rhs pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_arrival', 'pkt_last_time00']
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

lhs pkt_next_hop0 rhs pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp2', 'pkt_saved_hop01', 'pkt_next_hop']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
RAW pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1; pkt__br_tmp1 = 1&&(pkt__br_tmp00);
RAW pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt__br_tmp2 = 1; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
RAW pkt__br_tmp2 = 1; pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
RAW pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f3609a75790>, 'write': <dependencyGraph.Statement object at 0x7f3609a754c0>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f3609a3a640>, 'write': <dependencyGraph.Statement object at 0x7f3609a758e0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f3609a75790>, 'write': <dependencyGraph.Statement object at 0x7f3609a754c0>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f3609a3a640>, 'write': <dependencyGraph.Statement object at 0x7f3609a758e0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  10
SCC 0
v pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop) stmts len 1
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = 1&&(pkt__br_tmp00) stmts len 1
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
SCC 3
v pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1 stmts len 1
pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
SCC 4
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) stmts len 1
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 5
v pkt__br_tmp2 = 1 stmts len 1
pkt__br_tmp2 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3609a75b20>, <dependencyGraph.Codelet object at 0x7f3609a75a90>, <dependencyGraph.Codelet object at 0x7f3609a75b50>, <dependencyGraph.Codelet object at 0x7f3609a75ac0>, <dependencyGraph.Codelet object at 0x7f3609a75bb0>, <dependencyGraph.Codelet object at 0x7f3609a75ca0>]
pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = 1&&(pkt__br_tmp00);
pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
pkt_last_time00 = last_time;
pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00);
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt__br_tmp2 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3609a75a90>, <dependencyGraph.Codelet object at 0x7f3609a75bb0>}
total number of nodes created:  6
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_last_time01', 'pkt_saved_hop01', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00) last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00);', 'pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp2', 'pkt__br_tmp1', 'pkt_next_hop', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp2', 'pkt__br_tmp1', 'pkt_next_hop', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
     |  pkt__br_tmp2 = 1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
redundant outputs []
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp00', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f3609a756a0>]
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
resultant component: 
pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
new component outputs:  ['pkt_saved_hop01', 'saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt__br_tmp1 = 1&&(pkt__br_tmp00);
 | component b:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | state_pkt_fields of component b:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt__br_tmp1 = 1&&(pkt__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f3609a756a0>]
removing two old components
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs ['pkt_saved_hop00', 'pkt__br_tmp1']
state_var ['saved_hop']
		* new component :  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
		* new component outputs :  ['pkt_saved_hop01', 'saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);', 'pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;', 'pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;', 'pkt__br_tmp2 = 1;']
 * recursive_merge: node ::  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 node outputs:  ['pkt_saved_hop01', 'saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  {'pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_saved_hop01']
  - recursive_merge: looking at preds of  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
     |  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
redundant outputs []
adj_inputs ['pkt_saved_hop01', 'pkt__br_tmp2', 'pkt_next_hop']
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 node outputs:  ['pkt__br_tmp00']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'pkt__br_tmp00', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
     |  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01']
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt__br_tmp2']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt__br_tmp2']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | b:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f3609a752b0>]
adj_inputs ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01; pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
new component inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp00']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt__br_tmp2', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 * recursive_merge: node ::  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 node outputs:  ['pkt_last_time00', 'last_time']
 node inputs:  ['last_time', 'pkt__br_tmp2', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_arrival', 'pkt_last_time00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['pkt_last_time00']
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
     |  pkt__br_tmp2 = 1;
redundant outputs []
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 * recursive_merge: node ::  pkt__br_tmp2 = 1;
 node outputs:  ['pkt__br_tmp2']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'last_time', 'pkt__br_tmp2', 'pkt_next_hop', 'pkt_saved_hop01', 'pkt_arrival'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt__br_tmp2 = 1;
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
trying to fold predecessor:  pkt__br_tmp2 = 1;
try_merge: trying to merge components: 
 | a:  pkt__br_tmp2 = 1;
 | b:  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp2 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f3609a75700>]
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs ['pkt_last_time01', 'pkt__br_tmp2']
state_var ['last_time']
resultant component: 
pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt_last_time00', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
trying to fold predecessor:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp00'}
{'pkt_next_hop0', 'pkt__br_tmp00'}
u:  pkt__br_tmp2 = 1; pkt_last_time00 = last_time; pkt_last_time01 = pkt__br_tmp2 ? (pkt_arrival) : (pkt_last_time00); last_time = pkt_last_time01;
v:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
u:  pkt__br_tmp2 = 1;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
u:  pkt__br_tmp00 = pkt_arrival-pkt_last_time00>5&&1==1&&1==1;
v:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt__br_tmp1 = 1&&(pkt__br_tmp00); pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt__br_tmp2 ? (pkt_saved_hop01) : (pkt_next_hop);
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp00', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt__br_tmp00_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3609a759d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3609a759d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3609a759d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3609a759d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0', 2: 'comp_6', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output pkt__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x9fc9e45f
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 4
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 4
number of stages:  5
stage:  -0.0
action:  0
num stages:  5
stage:  3.0
action:  1
num stages:  5
stage:  4.0
action:  2
num stages:  5
stage:  1.0
action:  3
num stages:  5
stage:  1.0
action:  4
num stages:  5
stage:  1.0
action:  5
num stages:  5
stage:  2.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
 > get_alu_stage: table  0 , alu_id =  2 :  4.0
alu  2  is of type  STATELESS ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f3609a327f0>, 0), (<alus.DominoALU object at 0x7f3609a32910>, 1), (<alus.DominoALU object at 0x7f3609a32880>, 2), (<alus.DominoALU object at 0x7f3609a32c40>, 3), (<alus.DominoALU object at 0x7f3609a32940>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f3609a32790>, 0), (<alus.DominoGenericSALU object at 0x7f3609a759d0>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time00', 'pkt_last_time01', 'pkt__br_tmp2', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_next_hop', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '6'}, {'id': 4, 'opcode': 30, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '27'}, {'id': 5, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_arrival'], 'outputs': ['pkt_last_time00', 'pkt_last_time01', 'pkt__br_tmp2', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp00', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_next_hop', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '6'}, {'id': 4, 'opcode': 30, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '27'}, {'id': 5, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp00', 'immediate_operand': '6'}]}
Time taken: 10.779010534286499 s
preprocessor time:
