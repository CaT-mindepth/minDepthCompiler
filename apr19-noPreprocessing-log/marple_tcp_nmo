running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7feea3ff6640>, 'write': <dependencyGraph.Statement object at 0x7feea40315e0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7feea4031790>, 'write': <dependencyGraph.Statement object at 0x7feea4031130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7feea3ff6640>, 'write': <dependencyGraph.Statement object at 0x7feea40315e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7feea4031790>, 'write': <dependencyGraph.Statement object at 0x7feea4031130>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
SCC 2
v p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
SCC 3
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7feea4031a60>, <dependencyGraph.Codelet object at 0x7feea4031bb0>, <dependencyGraph.Codelet object at 0x7feea4031c40>, <dependencyGraph.Codelet object at 0x7feea4031c70>, <dependencyGraph.Codelet object at 0x7feea4031d60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7feea4031d60>, <dependencyGraph.Codelet object at 0x7feea4031a60>}
total number of nodes created:  5
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp00'}
p_state_001  is write flank
elements in v_outputs:  {'p_state_001', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
2   p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
5   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  5
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
number of SCC nodes post splitting:  7
total number of nodes created:  7
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  7
number of nodes in comp_graph:  7
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0']
redundant outputs ['p_state_001', 'p__br_tmp00', 'p__br_tmp4', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7feea3feb220>]
adj_inputs ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20']
redundant outputs ['p_state_001', 'p__br_tmp4', 'p_state_000', 'p__br_tmp10']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp00', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  7
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs ['p__br_tmp00', 'p__br_tmp4', 'p_state_000', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
u:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7feea40318b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7feea40318b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7feea40318b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7feea40318b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0xf002aa87
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 133 rows, 71 columns, 315 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  3.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7feea3feb490>, 0), (<alus.DominoALU object at 0x7feea3feb7c0>, 1), (<alus.DominoALU object at 0x7feea3feb9d0>, 2), (<alus.DominoALU object at 0x7feea3feb970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7feea3feb3a0>, 0), (<alus.DominoGenericSALU object at 0x7feea40318b0>, 1), (<alus.DominoGenericSALU object at 0x7feea3feb4c0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 19, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 19, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
Time taken: 10.673582077026367 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;

lhs p__br_tmp00 rhs !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;

lhs p__br_tmp20 rhs !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (p_state_100+1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7feee7d0e790>, 'write': <dependencyGraph.Statement object at 0x7feee7d0e130>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7feee7cd3640>, 'write': <dependencyGraph.Statement object at 0x7feee7d0e5e0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7feee7d0e790>, 'write': <dependencyGraph.Statement object at 0x7feee7d0e130>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7feee7cd3640>, 'write': <dependencyGraph.Statement object at 0x7feee7d0e5e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
SCC 2
v p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1 stmts len 1
p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
SCC 3
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7feee7d0ea60>, <dependencyGraph.Codelet object at 0x7feee7d0ebb0>, <dependencyGraph.Codelet object at 0x7feee7d0ec40>, <dependencyGraph.Codelet object at 0x7feee7d0ec70>, <dependencyGraph.Codelet object at 0x7feee7d0ed60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7feee7d0ed60>, <dependencyGraph.Codelet object at 0x7feee7d0ea60>}
total number of nodes created:  5
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp00'}
p_state_001  is write flank
elements in v_outputs:  {'p_state_001', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
2   p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
5   state_0 = p_state_001
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  5
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
number of SCC nodes post splitting:  7
total number of nodes created:  7
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  7
number of nodes in comp_graph:  7
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p__br_tmp30', 'p__br_tmp20', 'state_1', 'p__br_tmp00']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p__br_tmp10', 'p_state_001', 'p__br_tmp4', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7feee7cc8220>]
adj_inputs ['p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20']
redundant outputs ['p__br_tmp10', 'p_state_001', 'p__br_tmp4', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  7
 * recursive_merge: finished processing  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs ['p__br_tmp10', 'p__br_tmp4', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
u:  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7feee7d0e8b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7feee7d0e8b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7feee7d0e8b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7feee7d0e8b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 137 rows, 93 columns and 304 nonzeros
Model fingerprint: 0x70fcf7a5
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 136 rows, 71 columns, 321 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  3.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7feee7cc8490>, 0), (<alus.DominoALU object at 0x7feee7cc87c0>, 1), (<alus.DominoALU object at 0x7feee7cc89d0>, 2), (<alus.DominoALU object at 0x7feee7cc8970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7feee7cc83a0>, 0), (<alus.DominoGenericSALU object at 0x7feee7d0e8b0>, 1), (<alus.DominoGenericSALU object at 0x7feee7cc84c0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 9, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 9, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '2'}]}
Time taken: 9.550233125686646 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);

lhs p__br_tmp00 rhs !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;

lhs p__br_tmp10 rhs !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp6 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;

lhs p__br_tmp30 rhs !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;

lhs p__br_tmp40 rhs !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;

lhs p__br_tmp50 rhs 1==1&&1==1&&p_pkt_0<p_state_001&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);

lhs p__br_tmp7 rhs 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50']
p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1; p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
RAW p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50); p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fe4a7dbd640>, 'write': <dependencyGraph.Statement object at 0x7fe4a7df84f0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fe4a7df8790>, 'write': <dependencyGraph.Statement object at 0x7fe4a7df83a0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe4a7dbd640>, 'write': <dependencyGraph.Statement object at 0x7fe4a7df84f0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe4a7df8790>, 'write': <dependencyGraph.Statement object at 0x7fe4a7df83a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  14
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50) stmts len 1
p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
SCC 2
v p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1 stmts len 1
p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
SCC 3
v p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1 stmts len 1
p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
SCC 4
v p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1 stmts len 1
p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) stmts len 1
p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
v p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 stmts len 1
p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
v p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe4a7df8c40>, <dependencyGraph.Codelet object at 0x7fe4a7df8e20>, <dependencyGraph.Codelet object at 0x7fe4a7df8ee0>, <dependencyGraph.Codelet object at 0x7fe4a7df8f40>, <dependencyGraph.Codelet object at 0x7fe4a7df8fa0>, <dependencyGraph.Codelet object at 0x7fe4a7df8460>]
p_state_100 = state_1;
p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe4a7df8c40>, <dependencyGraph.Codelet object at 0x7fe4a7df8460>}
total number of nodes created:  6
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp00'}
p_state_001  is write flank
elements in v_outputs:  {'p_state_001', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
2   p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
3   p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
4   p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
5   p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
6   state_0 = p_state_001
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  6
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  7
finding node for codelet:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);', 'p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;', 'p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;', 'p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;', 'p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp7']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p__br_tmp40', 'p__br_tmp30', 'state_1', 'p__br_tmp50', 'p__br_tmp00']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp40', 'p__br_tmp30', 'p__br_tmp50', 'p__br_tmp00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
 node outputs:  ['p__br_tmp7']
 node inputs:  ['p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp7'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
     |  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
 * recursive_merge: node ::  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
 node outputs:  ['p__br_tmp50']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs ['p__br_tmp6', 'p__br_tmp20', 'p_state_000', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
 * recursive_merge: node ::  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0']
redundant outputs ['p__br_tmp6', 'p_state_001', 'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);  with *************************
[<dependencyGraph.Statement object at 0x7fe4a7dab2e0>]
adj_inputs ['p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp00']
redundant outputs ['p__br_tmp6', 'p_state_001', 'p__br_tmp20', 'p_state_000', 'p__br_tmp10']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  8
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp40', 'p__br_tmp30', 'p__br_tmp50', 'p__br_tmp00']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp7'}
{'p__br_tmp7'}
u:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p__br_tmp6 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
u:  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
u:  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
u:  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
u:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
v:  p__br_tmp7 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp7']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp7', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_8_stateless_p__br_tmp7_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_8_stateless_p__br_tmp7_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_8_stateless_p__br_tmp7_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_8_stateless_p__br_tmp7_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_8_stateless_p__br_tmp7_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_8_stateless_p__br_tmp7_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_8_stateless_p__br_tmp7_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp7 --------- 
filename_to_compname: filename =  comp_8_stateless_p__br_tmp7_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p__br_tmp7_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p__br_tmp7_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p__br_tmp7_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p__br_tmp7_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p__br_tmp7_bnd_2.sk.out
['comp_8']
filename_to_compname: filename =  comp_8_stateless_p__br_tmp7_bnd_2.sk.out
['comp_8']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_8 , type?  STATELESS
filename_to_compname: filename =  comp_8_stateless_p__br_tmp7_bnd_2.sk.out
['comp_8']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe4a7dab760>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------successor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe4a7dab760>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe4a7dab760>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_8  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------predecessor of comp  comp_8  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
------successor of comp  comp_8  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe4a7dab760>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_8', 4: 'comp_8', 5: 'comp_8', 6: 'comp_8'}
Stateless ALU id 6 has output p__br_tmp7
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 136 rows, 93 columns and 302 nonzeros
Model fingerprint: 0x21e5f345
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 135 rows, 71 columns, 319 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fe4a7dabaf0>, 0), (<alus.DominoALU object at 0x7fe4a7dabbb0>, 1), (<alus.DominoALU object at 0x7fe4a7dabd30>, 2), (<alus.DominoALU object at 0x7fe4a7dab8e0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fe4a7dab760>, 0), (<alus.DominoGenericSALU object at 0x7fe4a7df88e0>, 1), (<alus.DominoGenericSALU object at 0x7fe4a7dab7c0>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp7'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 16, 'operand0': 'p_state_000', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp7', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp7'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 16, 'operand0': 'p_state_000', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp7', 'immediate_operand': '0'}]}
Time taken: 6.415623188018799 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (p_state_100+1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f792cb99790>, 'write': <dependencyGraph.Statement object at 0x7f792cb99130>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f792cb5e640>, 'write': <dependencyGraph.Statement object at 0x7f792cb995e0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f792cb99790>, 'write': <dependencyGraph.Statement object at 0x7f792cb99130>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f792cb5e640>, 'write': <dependencyGraph.Statement object at 0x7f792cb995e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
SCC 2
v p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
SCC 3
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
v p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f792cb99a60>, <dependencyGraph.Codelet object at 0x7f792cb99bb0>, <dependencyGraph.Codelet object at 0x7f792cb99c40>, <dependencyGraph.Codelet object at 0x7f792cb99c70>, <dependencyGraph.Codelet object at 0x7f792cb99d60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f792cb99d60>, <dependencyGraph.Codelet object at 0x7f792cb99a60>}
total number of nodes created:  5
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00', 'p_state_001'}
p_state_001  is write flank
elements in v_outputs:  {'p__br_tmp00', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
2   p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
5   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  5
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
number of SCC nodes post splitting:  7
total number of nodes created:  7
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  7
number of nodes in comp_graph:  7
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;', 'p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs ['p_state_000', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp4']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0']
redundant outputs ['p__br_tmp00', 'p__br_tmp10', 'p_state_001', 'p__br_tmp4']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f792cb53220>]
adj_inputs ['p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30']
redundant outputs ['p_state_000', 'p__br_tmp10', 'p_state_001', 'p__br_tmp4']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  7
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp20', 'p__br_tmp00', 'p__br_tmp30']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
u:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f792cb998b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f792cb998b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f792cb998b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f792cb998b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 136 rows, 93 columns and 302 nonzeros
Model fingerprint: 0xa863ac80
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 135 rows, 71 columns, 319 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  3.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f792cb53490>, 0), (<alus.DominoALU object at 0x7f792cb537c0>, 1), (<alus.DominoALU object at 0x7f792cb539d0>, 2), (<alus.DominoALU object at 0x7f792cb53970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f792cb53340>, 0), (<alus.DominoGenericSALU object at 0x7f792cb998b0>, 1), (<alus.DominoGenericSALU object at 0x7f792cb534c0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_001', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_001', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '31'}]}
Time taken: 6.150988340377808 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);

lhs p__br_tmp00 rhs !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;

lhs p__br_tmp20 rhs !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (p_state_100+1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f061ee9b790>, 'write': <dependencyGraph.Statement object at 0x7f061ee9b130>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f061ee60640>, 'write': <dependencyGraph.Statement object at 0x7f061ee9b5e0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f061ee9b790>, 'write': <dependencyGraph.Statement object at 0x7f061ee9b130>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f061ee60640>, 'write': <dependencyGraph.Statement object at 0x7f061ee9b5e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
SCC 2
v p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1 stmts len 1
p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
SCC 3
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) stmts len 1
p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
v p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f061ee9ba60>, <dependencyGraph.Codelet object at 0x7f061ee9bbb0>, <dependencyGraph.Codelet object at 0x7f061ee9bc40>, <dependencyGraph.Codelet object at 0x7f061ee9bc70>, <dependencyGraph.Codelet object at 0x7f061ee9bd60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f061ee9bd60>, <dependencyGraph.Codelet object at 0x7f061ee9ba60>}
total number of nodes created:  5
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp00'}
p_state_001  is write flank
elements in v_outputs:  {'p_state_001', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
2   p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
5   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  5
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
number of SCC nodes post splitting:  7
total number of nodes created:  7
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  7
number of nodes in comp_graph:  7
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp4', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);  with *************************
[<dependencyGraph.Statement object at 0x7f061ee55220>]
adj_inputs ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
redundant outputs ['p_state_001', 'p__br_tmp4', 'p__br_tmp10', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  7
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs ['p__br_tmp4', 'p__br_tmp10', 'p_state_000', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
u:  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f061ee9b8b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f061ee9b8b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f061ee9b8b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f061ee9b8b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x69c716a6
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 134 rows, 71 columns, 317 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  3.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f061ee55490>, 0), (<alus.DominoALU object at 0x7f061ee557c0>, 1), (<alus.DominoALU object at 0x7f061ee559d0>, 2), (<alus.DominoALU object at 0x7f061ee55970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f061ee553a0>, 0), (<alus.DominoGenericSALU object at 0x7f061ee9b8b0>, 1), (<alus.DominoGenericSALU object at 0x7f061ee554c0>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 4), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '4'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 4), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '4'}]}
Time taken: 6.456624507904053 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;

lhs p__br_tmp00 rhs !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;

lhs p__br_tmp10 rhs !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;

lhs p__br_tmp20 rhs !(!(!(p_pkt_0<p_state_000)))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;

lhs p__br_tmp30 rhs !(p_pkt_0<p_state_000)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp8 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30']
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;

lhs p__br_tmp40 rhs !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;

lhs p__br_tmp50 rhs !(!(!(!(p_pkt_0<p_state_001))))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;

lhs p__br_tmp60 rhs !(!(p_pkt_0<p_state_001))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp70 = p_pkt_0<p_state_001&&1==1;

lhs p__br_tmp70 rhs p_pkt_0<p_state_001&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);

lhs p__br_tmp9 rhs 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70']
p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp9 ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp70 = p_pkt_0<p_state_001&&1==1; p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
RAW p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70); p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f8879dad640>, 'write': <dependencyGraph.Statement object at 0x7f8879de8160>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f8879de8790>, 'write': <dependencyGraph.Statement object at 0x7f8879de8220>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f8879dad640>, 'write': <dependencyGraph.Statement object at 0x7f8879de8160>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f8879de8790>, 'write': <dependencyGraph.Statement object at 0x7f8879de8220>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  16
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70) stmts len 1
p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
SCC 2
v p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1 stmts len 1
p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
SCC 3
v p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1 stmts len 1
p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
SCC 4
v p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1 stmts len 1
p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
SCC 5
v p__br_tmp70 = p_pkt_0<p_state_001&&1==1 stmts len 1
p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
SCC 6
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
v p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 stmts len 1
p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;
v p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 stmts len 1
p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;
v p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 stmts len 1
p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;
v p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
v p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8879de8d60>, <dependencyGraph.Codelet object at 0x7f8879de8f40>, <dependencyGraph.Codelet object at 0x7f8879de8460>, <dependencyGraph.Codelet object at 0x7f8879de8f70>, <dependencyGraph.Codelet object at 0x7f8879de8fd0>, <dependencyGraph.Codelet object at 0x7f8879de8fa0>, <dependencyGraph.Codelet object at 0x7f8879d9c0a0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;
p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;
p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;
p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30);
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8879d9c0a0>, <dependencyGraph.Codelet object at 0x7f8879de8d60>}
total number of nodes created:  7
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00', 'p_state_001'}
p_state_001  is write flank
elements in v_outputs:  {'p__br_tmp00', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
2   p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1
3   p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1
4   p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1
5   p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
6   p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
7   state_0 = p_state_001
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  7
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  8
finding node for codelet:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  9
---------------number of nodes in the graph:  9
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);', 'p__br_tmp70 = p_pkt_0<p_state_001&&1==1;', 'p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;', 'p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;', 'p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;', 'p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp9']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
 node outputs:  ['p__br_tmp9']
 node inputs:  ['p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp9'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
     |  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
 * recursive_merge: node ::  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
 node outputs:  ['p__br_tmp70']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs ['p__br_tmp8', 'p__br_tmp20', 'p_state_000', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp30']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
 * recursive_merge: node ::  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
 node outputs:  ['p__br_tmp60']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
 * recursive_merge: node ::  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
 node outputs:  ['p__br_tmp50']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
 * recursive_merge: node ::  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p__br_tmp8', 'p__br_tmp20', 'p_state_001', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp30']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f8879d9c370>]
adj_inputs ['p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00']
redundant outputs ['p__br_tmp8', 'p__br_tmp20', 'p_state_001', 'p_state_000', 'p__br_tmp10', 'p__br_tmp30']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  9
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp60', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp70', 'p__br_tmp00']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp9'}
{'p__br_tmp9'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p__br_tmp8 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
u:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
u:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
v:  p__br_tmp9 = 1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp9']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp9', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_9_stateless_p__br_tmp9_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_9_stateless_p__br_tmp9_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_9_stateless_p__br_tmp9_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_9_stateless_p__br_tmp9_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_9_stateless_p__br_tmp9_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_9_stateless_p__br_tmp9_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_9_stateless_p__br_tmp9_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp9 --------- 
filename_to_compname: filename =  comp_9_stateless_p__br_tmp9_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p__br_tmp9_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p__br_tmp9_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p__br_tmp9_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p__br_tmp9_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p__br_tmp9_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p__br_tmp9_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p__br_tmp9_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------successor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f8879d9cd90>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f8879d9cd90>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f8879d9cd90>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------successor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f8879d9cd90>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
Stateless ALU id 6 has output p__br_tmp9
 *** found dependency between stateless ALU  6  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
4,5,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
2,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 4), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x6335701c
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 134 rows, 71 columns, 317 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 3
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  3.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  3.0
 > get_alu_stage: table  0 , alu_id =  2 :  3.0
alu  2  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f8879d9ccd0>, 0), (<alus.DominoALU object at 0x7f8879d9ca60>, 1), (<alus.DominoALU object at 0x7f8879d9ce20>, 2), (<alus.DominoALU object at 0x7f8879d9cf40>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f8879d9ceb0>, 0), (<alus.DominoGenericSALU object at 0x7f8879de8910>, 1), (<alus.DominoGenericSALU object at 0x7f8879d9cd90>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  2
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 5), (1, 4), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp9'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_001', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp9', 'immediate_operand': '28'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 5), (1, 4), (1, 5), (3, 6), (4, 6), (5, 6), (6, 2)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp9'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_001', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp9', 'immediate_operand': '28'}]}
Time taken: 5.6974287033081055 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));

lhs p__br_tmp00 rhs !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));

lhs p__br_tmp10 rhs 1==1&&!(!(p_pkt_0<p_state_100&&1==1))
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_pkt_0<p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

lhs p__br_tmp5 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (p_state_000+1) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000', 'p_state_000']
p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);

lhs p__br_tmp30 rhs !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);

lhs p__br_tmp40 rhs 1==1&&!(p_pkt_0<p_state_100&&1==1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);

lhs p__br_tmp6 rhs 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40']
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
RAW p_state_100 = state_1; p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
RAW p_state_100 = state_1; p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
RAW p_state_100 = state_1; p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);
RAW p_state_100 = state_1; p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
RAW p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1)); p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100; p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
RAW p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20); p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000);
RAW p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
RAW p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
RAW p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f59c6276640>, 'write': <dependencyGraph.Statement object at 0x7f59c62b19d0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f59c62b1790>, 'write': <dependencyGraph.Statement object at 0x7f59c62b14f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f59c6276640>, 'write': <dependencyGraph.Statement object at 0x7f59c62b19d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f59c62b1790>, 'write': <dependencyGraph.Statement object at 0x7f59c62b14f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  13
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20) stmts len 1
p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
SCC 2
v p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1)) stmts len 1
p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
SCC 3
v p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) stmts len 1
p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
v p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) stmts len 1
p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);
v p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) stmts len 1
p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);
v p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) stmts len 1
p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
v p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f59c62b1d00>, <dependencyGraph.Codelet object at 0x7f59c62b1df0>, <dependencyGraph.Codelet object at 0x7f59c62b1c70>, <dependencyGraph.Codelet object at 0x7f59c62b1eb0>, <dependencyGraph.Codelet object at 0x7f59c62b1ee0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
p_state_100 = state_1;
p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);
p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);
p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40);
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f59c62b1d00>, <dependencyGraph.Codelet object at 0x7f59c62b1ee0>}
total number of nodes created:  5
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_100', 'p__br_tmp00'}
p_state_100  is read flank
elements in v_outputs:  {'p_state_100', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
2   p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)
3   p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1)
4   p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
5   p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100)
6   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)
 rhs_vars:  ['p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1)
 rhs_vars:  ['p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
 rhs_vars:  ['p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  5
output  p_state_100    read_flanks:  ['p_state_100']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);', 'p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));', 'p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;', 'p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));', 'p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
     |  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
     |  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100']
redundant outputs ['p__br_tmp30', 'p_state_101', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp6']
state_var ['state_1']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
     |  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100']
redundant outputs []
state_var ['state_1']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_pkt_0', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
     |  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100']
redundant outputs []
state_var ['state_1']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
v:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
u:  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
u:  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p__br_tmp6 = 1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
u:  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
v:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
v:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
u:  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
v:  p__br_tmp5 = 1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp5']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_6_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_6_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_6_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp5_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f59c626a550>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6'}
Stateless ALU id 2 has output p__br_tmp5
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x6e1ba526
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f59c626a580>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f59c626a550>, 0), (<alus.DominoGenericSALU object at 0x7f59c62b1130>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp5'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0'], 'outputs': ['p_state_100', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 2), (2, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp5'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0'], 'outputs': ['p_state_100', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 1.5244536399841309 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));

lhs p__br_tmp00 rhs 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_pkt_0<p_state_000)&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!(p_pkt_0<p_state_001))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (p_state_100+1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f1db7aab790>, 'write': <dependencyGraph.Statement object at 0x7f1db7aab130>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f1db7a70640>, 'write': <dependencyGraph.Statement object at 0x7f1db7aab5e0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1db7aab790>, 'write': <dependencyGraph.Statement object at 0x7f1db7aab130>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1db7a70640>, 'write': <dependencyGraph.Statement object at 0x7f1db7aab5e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
SCC 2
v p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
SCC 3
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) stmts len 1
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
v p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1db7aaba60>, <dependencyGraph.Codelet object at 0x7f1db7aabbb0>, <dependencyGraph.Codelet object at 0x7f1db7aabc40>, <dependencyGraph.Codelet object at 0x7f1db7aabc70>, <dependencyGraph.Codelet object at 0x7f1db7aabd60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1db7aabd60>, <dependencyGraph.Codelet object at 0x7f1db7aaba60>}
total number of nodes created:  5
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp00'}
p_state_001  is write flank
elements in v_outputs:  {'p_state_001', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
2   p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
5   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  5
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
number of SCC nodes post splitting:  7
total number of nodes created:  7
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  7
number of nodes in comp_graph:  7
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;', 'p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp4', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));  with *************************
[<dependencyGraph.Statement object at 0x7f1db7a65220>]
adj_inputs ['p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00']
redundant outputs ['p_state_001', 'p__br_tmp4', 'p__br_tmp10', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp00', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  7
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs ['p__br_tmp4', 'p__br_tmp10', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
u:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1db7aab8e0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1db7aab8e0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1db7aab8e0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1db7aab8e0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
5,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x264d5337
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 134 rows, 71 columns, 317 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  3.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f1db7a65490>, 0), (<alus.DominoALU object at 0x7f1db7a657c0>, 1), (<alus.DominoALU object at 0x7f1db7a65970>, 2), (<alus.DominoALU object at 0x7f1db7a65790>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f1db7a65340>, 0), (<alus.DominoGenericSALU object at 0x7f1db7aab8e0>, 1), (<alus.DominoGenericSALU object at 0x7f1db7a654c0>, 2)]
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 11, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '16'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '26'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 11, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '16'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '26'}]}
Time taken: 10.270221710205078 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp3 rhs 1&&!(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fead8413640>, 'write': <dependencyGraph.Statement object at 0x7fead844e9d0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fead844e790>, 'write': <dependencyGraph.Statement object at 0x7fead844e4c0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fead8413640>, 'write': <dependencyGraph.Statement object at 0x7fead844e9d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fead844e790>, 'write': <dependencyGraph.Statement object at 0x7fead844e4c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
SCC 2
v p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
v p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fead844ea30>, <dependencyGraph.Codelet object at 0x7fead844e0a0>, <dependencyGraph.Codelet object at 0x7fead844e580>, <dependencyGraph.Codelet object at 0x7fead844eac0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
p__br_tmp2 = 1&&(p__br_tmp00);
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fead844ea30>, <dependencyGraph.Codelet object at 0x7fead844eac0>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00', 'p_state_001'}
p_state_001  is write flank
elements in v_outputs:  {'p__br_tmp00', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
2   p__br_tmp2 = 1&&(p__br_tmp00)
3   p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
4   state_0 = p_state_001
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = 1&&(p__br_tmp00)
 rhs_vars:  ['p__br_tmp00']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  4
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp2 = 1&&(p__br_tmp00) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);', 'p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p__br_tmp10', 'p__br_tmp00', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp10', 'p__br_tmp00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);  with *************************
[<dependencyGraph.Statement object at 0x7fead844e8b0>]
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101', 'p__br_tmp3']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp10']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p__br_tmp10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);
 | component b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10);  with *************************
[<dependencyGraph.Statement object at 0x7fead844e8b0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101', 'p__br_tmp3']
state_var ['state_1']
		* new component :  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
		* new component inputs :  ['state_1', 'p__br_tmp00', 'p__br_tmp10']
		* new component outputs :  ['state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p_pkt_0', 'p__br_tmp00', 'p_state_001', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p__br_tmp00', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p_pkt_0', 'p__br_tmp10', 'p_state_000', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p__br_tmp10', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001']
redundant outputs ['p__br_tmp00', 'p_state_000', 'p__br_tmp2']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fead844e520>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp10']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp2']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp10', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp10', 'p__br_tmp00', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p__br_tmp00', 'p_state_001', 'p__br_tmp2']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fead844ec10>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp10']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp2']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_pkt_0', 'p__br_tmp00', 'p_state_001']
trying to fold node:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_pkt_0', 'p__br_tmp10', 'p_state_000']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp10', 'p__br_tmp00'}
{'p__br_tmp10', 'p__br_tmp00'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
u:  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
v:  p__br_tmp3 = 1&&!(p__br_tmp00)&&(p__br_tmp10); p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p__br_tmp10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp10 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp10_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp10_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_7_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp00_bnd_1.sk.out
['comp_7']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_6', 4: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_6', 4: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fead8405bb0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_6', 4: 'comp_7'}
Stateless ALU id 3 has output p__br_tmp10
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_6', 4: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_6', 4: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fead8405bb0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1', 3: 'comp_6', 4: 'comp_7'}
Stateless ALU id 4 has output p__br_tmp00
 *** found dependency between stateless ALU  4  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,
+---> dependencies of ALU  1 : 
3,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
2,
+---> dependencies of ALU  4 : 
2,
# alus: =  5
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 5}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (1, 3), (3, 2), (4, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 99 rows, 67 columns and 212 nonzeros
Model fingerprint: 0x1597270c
Model has 60 general constraints
Variable types: 0 continuous, 67 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 11 columns
Presolve time: 0.00s
Presolved: 104 rows, 56 columns, 248 nonzeros
Variable types: 0 continuous, 56 integer (50 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 2
T0_A_3 1
T0_A_4 1
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  2.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fead8405a90>, 0), (<alus.DominoALU object at 0x7fead8405c10>, 1)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fead84057f0>, 0), (<alus.DominoGenericSALU object at 0x7fead844e910>, 1), (<alus.DominoGenericSALU object at 0x7fead8405bb0>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  2
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (1, 3), (3, 2), (4, 2)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p__br_tmp10'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': 'p__br_tmp10', 'immediate_operand': '1'}, {'id': 4, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (1, 3), (3, 2), (4, 2)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p__br_tmp10'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': 'p__br_tmp10', 'immediate_operand': '1'}, {'id': 4, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp00', 'immediate_operand': '0'}]}
Time taken: 6.228546380996704 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;

lhs p__br_tmp00 rhs !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_pkt_0<p_state_000)&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

lhs p__br_tmp4 rhs 1&&(p__br_tmp00)&&(p__br_tmp10)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;

lhs p__br_tmp20 rhs !(!(p_pkt_0<p_state_001)&&1==1)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

lhs p__br_tmp5 rhs 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
RAW p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1; p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
RAW p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30); p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1995aad640>, 'write': <dependencyGraph.Statement object at 0x7f1995ae85e0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f1995ae8790>, 'write': <dependencyGraph.Statement object at 0x7f1995ae8130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1995aad640>, 'write': <dependencyGraph.Statement object at 0x7f1995ae85e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1995ae8790>, 'write': <dependencyGraph.Statement object at 0x7f1995ae8130>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30) stmts len 1
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
SCC 2
v p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1 stmts len 1
p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
SCC 3
v p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
v p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;
v p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) stmts len 1
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1995ae8a60>, <dependencyGraph.Codelet object at 0x7f1995ae8bb0>, <dependencyGraph.Codelet object at 0x7f1995ae8c40>, <dependencyGraph.Codelet object at 0x7f1995ae8c70>, <dependencyGraph.Codelet object at 0x7f1995ae8d60>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;
p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1995ae8d60>, <dependencyGraph.Codelet object at 0x7f1995ae8a60>}
total number of nodes created:  5
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00', 'p_state_001'}
p_state_001  is write flank
elements in v_outputs:  {'p__br_tmp00', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
2   p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1
3   p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
4   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
5   state_0 = p_state_001
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  5
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
number of SCC nodes post splitting:  7
total number of nodes created:  7
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  7
number of nodes in comp_graph:  7
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);', 'p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;', 'p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
     |  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0']
redundant outputs ['p__br_tmp10', 'p__br_tmp00', 'p__br_tmp4', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f1995aa1220>]
adj_inputs ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20']
redundant outputs ['p__br_tmp10', 'p__br_tmp4', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  7
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs ['p__br_tmp10', 'p__br_tmp00', 'p__br_tmp4', 'p_state_000']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
u:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p__br_tmp4 = 1&&(p__br_tmp00)&&(p__br_tmp10); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
u:  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
u:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
v:  p__br_tmp5 = 1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_7_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_p__br_tmp5_bnd_2.sk.out
['comp_7']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1995ae88e0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1995ae88e0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1995ae88e0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------predecessor of comp  comp_7  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
------successor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1995ae88e0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_7', 4: 'comp_7', 5: 'comp_7', 6: 'comp_7'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,5,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x511b98bb
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 134 rows, 71 columns, 317 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 3
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  3.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
 > get_alu_stage: table  0 , alu_id =  1 :  3.0
alu  1  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f1995aa1490>, 0), (<alus.DominoALU object at 0x7f1995aa17c0>, 1), (<alus.DominoALU object at 0x7f1995aa1970>, 2), (<alus.DominoALU object at 0x7f1995aa1790>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f1995aa1340>, 0), (<alus.DominoGenericSALU object at 0x7f1995ae88e0>, 1), (<alus.DominoGenericSALU object at 0x7f1995aa14c0>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 4), (0, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '29'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 5, 'opcode': 16, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '21'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 4), (0, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '29'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 5, 'opcode': 16, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '21'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
Time taken: 6.724470376968384 s
preprocessor time:
