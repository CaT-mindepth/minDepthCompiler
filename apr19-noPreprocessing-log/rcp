running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f7b4219e640>, 'write': <dependencyGraph.Statement object at 0x7f7b421d94c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f7b421d92b0>, 'write': <dependencyGraph.Statement object at 0x7f7b421d9130>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f7b421d9790>, 'write': <dependencyGraph.Statement object at 0x7f7b421d95e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7b4219e640>, 'write': <dependencyGraph.Statement object at 0x7f7b421d94c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f7b421d92b0>, 'write': <dependencyGraph.Statement object at 0x7f7b421d9130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f7b421d9790>, 'write': <dependencyGraph.Statement object at 0x7f7b421d95e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7b421d9af0>, <dependencyGraph.Codelet object at 0x7f7b421d9bb0>, <dependencyGraph.Codelet object at 0x7f7b421d9c40>, <dependencyGraph.Codelet object at 0x7f7b421d9c70>, <dependencyGraph.Codelet object at 0x7f7b421d9d00>, <dependencyGraph.Codelet object at 0x7f7b421d9dc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7b421d9bb0>, <dependencyGraph.Codelet object at 0x7f7b421d9c40>, <dependencyGraph.Codelet object at 0x7f7b421d9af0>}
total number of nodes created:  6
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_100', 'p_state_200', 'p_state_101', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2', 'p_state_201']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_2', 'p_pkt_1', 'p__br_tmp2', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f7b421d9520>]
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f7b421d9520>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_000']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f7b421d96d0>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f7b421d96d0>]
adj_inputs []
redundant outputs ['p_state_200', 'p__br_tmp2', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f7b421d98e0>]
adj_inputs []
redundant outputs ['p_state_100', 'p__br_tmp2', 'p_state_101', 'p__br_tmp00']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f7b421d98e0>]
adj_inputs []
redundant outputs ['p_state_200', 'p__br_tmp2', 'p__br_tmp00', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f7b42195940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f7b421d96a0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f7b42195b80>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f7b42195940>, 0), (<alus.DominoGenericSALU object at 0x7f7b421d96a0>, 1), (<alus.DominoGenericSALU object at 0x7f7b42195790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'p_state_100', 'p__br_tmp2', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2', 'p_state_200', 'p__br_tmp2', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'p_state_100', 'p__br_tmp2', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2', 'p_state_200', 'p__br_tmp2', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 10.579111814498901 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f1e8ffe42b0>, 'write': <dependencyGraph.Statement object at 0x7f1e8ffe4130>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f1e8ffe4790>, 'write': <dependencyGraph.Statement object at 0x7f1e8ffe45e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f1e8ffa9640>, 'write': <dependencyGraph.Statement object at 0x7f1e8ffe44c0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f1e8ffe42b0>, 'write': <dependencyGraph.Statement object at 0x7f1e8ffe4130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1e8ffe4790>, 'write': <dependencyGraph.Statement object at 0x7f1e8ffe45e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1e8ffa9640>, 'write': <dependencyGraph.Statement object at 0x7f1e8ffe44c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1e8ffe4af0>, <dependencyGraph.Codelet object at 0x7f1e8ffe4bb0>, <dependencyGraph.Codelet object at 0x7f1e8ffe4c40>, <dependencyGraph.Codelet object at 0x7f1e8ffe4c70>, <dependencyGraph.Codelet object at 0x7f1e8ffe4d00>, <dependencyGraph.Codelet object at 0x7f1e8ffe4dc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1e8ffe4bb0>, <dependencyGraph.Codelet object at 0x7f1e8ffe4c40>, <dependencyGraph.Codelet object at 0x7f1e8ffe4af0>}
total number of nodes created:  6
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000', 'p_state_200', 'p_state_100', 'p_state_101', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200', 'p_state_201']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_2', 'p_pkt_1', 'state_1', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f1e8ffe4520>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f1e8ffe4520>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f1e8ffe46d0>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f1e8ffe46d0>]
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f1e8ffe48e0>]
adj_inputs []
redundant outputs ['p_state_100', 'p__br_tmp2', 'p_state_101', 'p__br_tmp00']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f1e8ffe48e0>]
adj_inputs []
redundant outputs ['p_state_200', 'p__br_tmp2', 'p_state_201', 'p__br_tmp00']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1e8ffa0940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1e8ffe46a0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f1e8ffa0b80>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f1e8ffa0940>, 0), (<alus.DominoGenericSALU object at 0x7f1e8ffe46a0>, 1), (<alus.DominoGenericSALU object at 0x7f1e8ffa0790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'state_1', 'p_state_100', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2', 'p_state_200', 'p_state_201', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'state_1', 'p_state_100', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2', 'p_state_200', 'p_state_201', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 6.7280778884887695 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_1<30&&1==1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fc965366790>, 'write': <dependencyGraph.Statement object at 0x7fc9653665e0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fc9653662b0>, 'write': <dependencyGraph.Statement object at 0x7fc965366130>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fc96532b640>, 'write': <dependencyGraph.Statement object at 0x7fc9653664c0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fc965366790>, 'write': <dependencyGraph.Statement object at 0x7fc9653665e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fc9653662b0>, 'write': <dependencyGraph.Statement object at 0x7fc965366130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc96532b640>, 'write': <dependencyGraph.Statement object at 0x7fc9653664c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc965366af0>, <dependencyGraph.Codelet object at 0x7fc965366bb0>, <dependencyGraph.Codelet object at 0x7fc965366c40>, <dependencyGraph.Codelet object at 0x7fc965366c70>, <dependencyGraph.Codelet object at 0x7fc965366d00>, <dependencyGraph.Codelet object at 0x7fc965366dc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc965366bb0>, <dependencyGraph.Codelet object at 0x7fc965366c40>, <dependencyGraph.Codelet object at 0x7fc965366af0>}
total number of nodes created:  6
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_001', 'p_state_201', 'p_state_000', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2', 'p_state_201']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p_pkt_1', 'state_2', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'p_state_001', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fc965366520>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fc965366520>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp1']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fc9653666d0>]
adj_inputs []
redundant outputs ['p_state_100', 'p__br_tmp2', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fc9653666d0>]
adj_inputs []
redundant outputs ['p_state_200', 'p__br_tmp2', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fc9653668e0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fc9653668e0>]
adj_inputs []
redundant outputs ['p_state_200', 'p__br_tmp2', 'p__br_tmp00', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc965322940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc9653666a0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fc965322b80>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fc965322940>, 0), (<alus.DominoGenericSALU object at 0x7fc9653666a0>, 1), (<alus.DominoGenericSALU object at 0x7fc965322790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_100', 'state_1', 'p__br_tmp2', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_200', 'state_2', 'p__br_tmp2', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_100', 'state_1', 'p__br_tmp2', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_200', 'state_2', 'p__br_tmp2', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 6.600002765655518 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f4ab8537790>, 'write': <dependencyGraph.Statement object at 0x7f4ab85375e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f4ab84fc640>, 'write': <dependencyGraph.Statement object at 0x7f4ab85374c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f4ab85372b0>, 'write': <dependencyGraph.Statement object at 0x7f4ab8537130>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f4ab8537790>, 'write': <dependencyGraph.Statement object at 0x7f4ab85375e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f4ab84fc640>, 'write': <dependencyGraph.Statement object at 0x7f4ab85374c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f4ab85372b0>, 'write': <dependencyGraph.Statement object at 0x7f4ab8537130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4ab8537af0>, <dependencyGraph.Codelet object at 0x7f4ab8537bb0>, <dependencyGraph.Codelet object at 0x7f4ab8537c40>, <dependencyGraph.Codelet object at 0x7f4ab8537c70>, <dependencyGraph.Codelet object at 0x7f4ab8537d00>, <dependencyGraph.Codelet object at 0x7f4ab8537dc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4ab8537bb0>, <dependencyGraph.Codelet object at 0x7f4ab8537c40>, <dependencyGraph.Codelet object at 0x7f4ab8537af0>}
total number of nodes created:  6
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_000', 'p_state_201', 'p_state_001', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'p_state_201', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_1', 'state_2', 'state_1', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f4ab8537520>]
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f4ab8537520>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_000']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f4ab85376d0>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f4ab85376d0>]
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f4ab85378e0>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_100', 'p_state_101', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f4ab85378e0>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_200', 'p_state_201', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f4ab84f3940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f4ab85376a0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f4ab84f3b80>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f4ab84f3940>, 0), (<alus.DominoGenericSALU object at 0x7f4ab85376a0>, 1), (<alus.DominoGenericSALU object at 0x7f4ab84f3790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'state_1', 'p_state_100', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2', 'p_state_200', 'p_state_201', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'state_1', 'p_state_100', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2', 'p_state_200', 'p_state_201', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 7.8797619342803955 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f92a0835790>, 'write': <dependencyGraph.Statement object at 0x7f92a08355e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f92a07fa640>, 'write': <dependencyGraph.Statement object at 0x7f92a08354c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f92a08352b0>, 'write': <dependencyGraph.Statement object at 0x7f92a0835130>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f92a0835790>, 'write': <dependencyGraph.Statement object at 0x7f92a08355e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f92a07fa640>, 'write': <dependencyGraph.Statement object at 0x7f92a08354c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f92a08352b0>, 'write': <dependencyGraph.Statement object at 0x7f92a0835130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f92a0835af0>, <dependencyGraph.Codelet object at 0x7f92a0835bb0>, <dependencyGraph.Codelet object at 0x7f92a0835c40>, <dependencyGraph.Codelet object at 0x7f92a0835c70>, <dependencyGraph.Codelet object at 0x7f92a0835d00>, <dependencyGraph.Codelet object at 0x7f92a0835dc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f92a0835bb0>, <dependencyGraph.Codelet object at 0x7f92a0835c40>, <dependencyGraph.Codelet object at 0x7f92a0835af0>}
total number of nodes created:  6
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_001', 'p_state_201', 'p_state_000', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'p_state_201', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p_pkt_1', 'state_2', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f92a0835520>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f92a0835520>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f92a08356d0>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f92a08356d0>]
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f92a08358e0>]
adj_inputs []
redundant outputs ['p_state_100', 'p__br_tmp2', 'p__br_tmp00', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f92a08358e0>]
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201', 'p__br_tmp2', 'p__br_tmp00']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f92a07f1940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f92a08356a0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f92a07f1b80>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f92a07f1940>, 0), (<alus.DominoGenericSALU object at 0x7f92a08356a0>, 1), (<alus.DominoGenericSALU object at 0x7f92a07f1790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1', 'p_state_101', 'p_state_100', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_200', 'p_state_201', 'state_2', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1', 'p_state_101', 'p_state_100', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_200', 'p_state_201', 'state_2', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 6.725588083267212 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = p_pkt_1<30&&1==1;

lhs p__br_tmp00 rhs p_pkt_1<30&&1==1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = p_pkt_1<30&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = p_pkt_1<30&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f9611347640>, 'write': <dependencyGraph.Statement object at 0x7f96113824c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f96113822b0>, 'write': <dependencyGraph.Statement object at 0x7f9611382130>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f9611382790>, 'write': <dependencyGraph.Statement object at 0x7f96113825e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f9611347640>, 'write': <dependencyGraph.Statement object at 0x7f96113824c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f96113822b0>, 'write': <dependencyGraph.Statement object at 0x7f9611382130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f9611382790>, 'write': <dependencyGraph.Statement object at 0x7f96113825e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = p_pkt_1<30&&1==1 stmts len 1
p__br_tmp00 = p_pkt_1<30&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9611382af0>, <dependencyGraph.Codelet object at 0x7f9611382bb0>, <dependencyGraph.Codelet object at 0x7f9611382c40>, <dependencyGraph.Codelet object at 0x7f9611382c70>, <dependencyGraph.Codelet object at 0x7f9611382d00>, <dependencyGraph.Codelet object at 0x7f9611382dc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = p_pkt_1<30&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9611382bb0>, <dependencyGraph.Codelet object at 0x7f9611382c40>, <dependencyGraph.Codelet object at 0x7f9611382af0>}
total number of nodes created:  6
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_200', 'p_state_000', 'p_state_201', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_1<30&&1==1;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200', 'p_state_201']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_2', 'p_pkt_1', 'p__br_tmp2', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = p_pkt_1<30&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f9611382520>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f9611382520>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp1']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_1<30&&1==1;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = p_pkt_1<30&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = p_pkt_1<30&&1==1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f9611382760>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f9611382760>]
adj_inputs []
redundant outputs ['p_state_200', 'p__br_tmp2', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_1<30&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f96113828e0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p__br_tmp00', 'p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p__br_tmp00 = p_pkt_1<30&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_1<30&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f96113828e0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_200', 'p_state_201', 'p__br_tmp00']
state_var ['state_2']
resultant component: 
p__br_tmp00 = p_pkt_1<30&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = p_pkt_1<30&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = p_pkt_1<30&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = p_pkt_1<30&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f961133e940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f9611382400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f961133ea90>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f961133e940>, 0), (<alus.DominoGenericSALU object at 0x7f9611382400>, 1), (<alus.DominoGenericSALU object at 0x7f961133e790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'p_state_100', 'p__br_tmp2', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2', 'p_state_200', 'p__br_tmp2', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'p_state_100', 'p__br_tmp2', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2', 'p_state_200', 'p__br_tmp2', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 11.562890768051147 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_1<30
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fb59ef47640>, 'write': <dependencyGraph.Statement object at 0x7fb59ef824c0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fb59ef82790>, 'write': <dependencyGraph.Statement object at 0x7fb59ef825e0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fb59ef822b0>, 'write': <dependencyGraph.Statement object at 0x7fb59ef82130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb59ef47640>, 'write': <dependencyGraph.Statement object at 0x7fb59ef824c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb59ef82790>, 'write': <dependencyGraph.Statement object at 0x7fb59ef825e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fb59ef822b0>, 'write': <dependencyGraph.Statement object at 0x7fb59ef82130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb59ef82af0>, <dependencyGraph.Codelet object at 0x7fb59ef82bb0>, <dependencyGraph.Codelet object at 0x7fb59ef82c40>, <dependencyGraph.Codelet object at 0x7fb59ef82c70>, <dependencyGraph.Codelet object at 0x7fb59ef82d00>, <dependencyGraph.Codelet object at 0x7fb59ef82dc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb59ef82bb0>, <dependencyGraph.Codelet object at 0x7fb59ef82c40>, <dependencyGraph.Codelet object at 0x7fb59ef82af0>}
total number of nodes created:  6
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_200', 'p_state_000', 'p_state_001', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_201', 'p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'state_2', 'p_pkt_1', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb59ef82520>]
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb59ef82520>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_000']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fb59ef82400>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fb59ef82400>]
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;  with *************************
[<dependencyGraph.Statement object at 0x7fb59ef828e0>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p__br_tmp2', 'p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;  with *************************
[<dependencyGraph.Statement object at 0x7fb59ef828e0>]
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200', 'p__br_tmp00', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fb59ef3e940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fb59ef826d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fb59ef3eb80>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fb59ef3e940>, 0), (<alus.DominoGenericSALU object at 0x7fb59ef826d0>, 1), (<alus.DominoGenericSALU object at 0x7fb59ef3e790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'state_1', 'p_state_100', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_201', 'state_2', 'p_state_200', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_101', 'state_1', 'p_state_100', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_201', 'state_2', 'p_state_200', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 10.851929664611816 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fd72a17e790>, 'write': <dependencyGraph.Statement object at 0x7fd72a17e5e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fd72a143640>, 'write': <dependencyGraph.Statement object at 0x7fd72a17e4c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fd72a17e2b0>, 'write': <dependencyGraph.Statement object at 0x7fd72a17e130>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fd72a17e790>, 'write': <dependencyGraph.Statement object at 0x7fd72a17e5e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd72a143640>, 'write': <dependencyGraph.Statement object at 0x7fd72a17e4c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fd72a17e2b0>, 'write': <dependencyGraph.Statement object at 0x7fd72a17e130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd72a17eaf0>, <dependencyGraph.Codelet object at 0x7fd72a17ebb0>, <dependencyGraph.Codelet object at 0x7fd72a17ec40>, <dependencyGraph.Codelet object at 0x7fd72a17ec70>, <dependencyGraph.Codelet object at 0x7fd72a17ed00>, <dependencyGraph.Codelet object at 0x7fd72a17edc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd72a17ebb0>, <dependencyGraph.Codelet object at 0x7fd72a17ec40>, <dependencyGraph.Codelet object at 0x7fd72a17eaf0>}
total number of nodes created:  6
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_201', 'p_state_200', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2', 'p_state_201']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'state_2', 'p_pkt_1', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fd72a17e520>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fd72a17e520>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fd72a17e400>]
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7fd72a17e400>]
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fd72a17e8e0>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_100', 'p_state_101', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fd72a17e8e0>]
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200', 'p__br_tmp00', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fd72a13a940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fd72a17e6d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fd72a13ab80>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fd72a13a940>, 0), (<alus.DominoGenericSALU object at 0x7fd72a17e6d0>, 1), (<alus.DominoGenericSALU object at 0x7fd72a13a790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1', 'p_state_100', 'p_state_101', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_200', 'state_2', 'p_state_201', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1', 'p_state_100', 'p_state_101', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_200', 'state_2', 'p_state_201', 'p__br_tmp2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 6.695251226425171 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f79c7c9b640>, 'write': <dependencyGraph.Statement object at 0x7f79c7cd64c0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f79c7cd6790>, 'write': <dependencyGraph.Statement object at 0x7f79c7cd65e0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f79c7cd62b0>, 'write': <dependencyGraph.Statement object at 0x7f79c7cd6130>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f79c7c9b640>, 'write': <dependencyGraph.Statement object at 0x7f79c7cd64c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f79c7cd6790>, 'write': <dependencyGraph.Statement object at 0x7f79c7cd65e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f79c7cd62b0>, 'write': <dependencyGraph.Statement object at 0x7f79c7cd6130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f79c7cd6af0>, <dependencyGraph.Codelet object at 0x7f79c7cd6bb0>, <dependencyGraph.Codelet object at 0x7f79c7cd6c40>, <dependencyGraph.Codelet object at 0x7f79c7cd6c70>, <dependencyGraph.Codelet object at 0x7f79c7cd6d00>, <dependencyGraph.Codelet object at 0x7f79c7cd6dc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f79c7cd6bb0>, <dependencyGraph.Codelet object at 0x7f79c7cd6c40>, <dependencyGraph.Codelet object at 0x7f79c7cd6af0>}
total number of nodes created:  6
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_001', 'p_state_201', 'p_state_000', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2', 'p_state_201']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_1', 'state_1', 'state_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f79c7cd6520>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f79c7cd6520>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f79c7cd66a0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7f79c7cd66a0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_200', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f79c7cd68e0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_101', 'p__br_tmp00', 'p_state_100']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f79c7cd68e0>]
adj_inputs []
redundant outputs ['p__br_tmp2', 'p_state_200', 'p_state_201', 'p__br_tmp00']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f79c7c92940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f79c7cd68b0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f79c7c92b80>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f79c7c92940>, 0), (<alus.DominoGenericSALU object at 0x7f79c7cd68b0>, 1), (<alus.DominoGenericSALU object at 0x7f79c7c92790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p__br_tmp2', 'p_state_101', 'state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p__br_tmp2', 'p_state_200', 'state_2', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p__br_tmp2', 'p_state_101', 'state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p__br_tmp2', 'p_state_200', 'state_2', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 6.665012359619141 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = 1;

lhs p__br_tmp1 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_pkt_0', 'p_state_000']
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs p_pkt_1<30&&1==1&&1==1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p__br_tmp2 = 1&&(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&(p__br_tmp00)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp2 ? (p_state_200+1) : (p_state_200)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p__br_tmp1 = 1; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp00 = p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp2 = 1&&(p__br_tmp00); p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7faef73c22b0>, 'write': <dependencyGraph.Statement object at 0x7faef73c2130>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7faef7387640>, 'write': <dependencyGraph.Statement object at 0x7faef73c24c0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7faef73c2790>, 'write': <dependencyGraph.Statement object at 0x7faef73c25e0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7faef73c22b0>, 'write': <dependencyGraph.Statement object at 0x7faef73c2130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7faef7387640>, 'write': <dependencyGraph.Statement object at 0x7faef73c24c0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7faef73c2790>, 'write': <dependencyGraph.Statement object at 0x7faef73c25e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = 1 stmts len 1
p__br_tmp1 = 1;
SCC 4
v p__br_tmp2 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&(p__br_tmp00);
SCC 5
v p__br_tmp00 = p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7faef73c2af0>, <dependencyGraph.Codelet object at 0x7faef73c2bb0>, <dependencyGraph.Codelet object at 0x7faef73c2c40>, <dependencyGraph.Codelet object at 0x7faef73c2c70>, <dependencyGraph.Codelet object at 0x7faef73c2d00>, <dependencyGraph.Codelet object at 0x7faef73c2dc0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = 1;
p__br_tmp2 = 1&&(p__br_tmp00);
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7faef73c2bb0>, <dependencyGraph.Codelet object at 0x7faef73c2c40>, <dependencyGraph.Codelet object at 0x7faef73c2af0>}
total number of nodes created:  6
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_200', 'p_state_101', 'p_state_001', 'p_state_201', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;', 'p__br_tmp1 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_201', 'p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp2', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp2 = 1&&(p__br_tmp00);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp2 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'state_2', 'p__br_tmp2', 'p_pkt_1', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp1 = 1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7faef73c2520>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p__br_tmp1 = 1;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7faef73c2520>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
		* new component :  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp2 = 1&&(p__br_tmp00);', 'p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp1 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000+p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7faef73c2400>]
adj_inputs []
redundant outputs ['p_state_100', 'p__br_tmp2', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp2 = 1&&(p__br_tmp00);
try_merge: trying to merge components: 
 | a:  p__br_tmp2 = 1&&(p__br_tmp00);
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp2 = 1&&(p__br_tmp00);  with *************************
[<dependencyGraph.Statement object at 0x7faef73c2400>]
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p__br_tmp00']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7faef73c28e0>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_100', 'p_state_101', 'p__br_tmp2']
state_var ['state_1']
resultant component: 
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_3_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_3_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_3_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
 | b:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7faef73c28e0>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_200', 'p_state_201', 'p__br_tmp2']
state_var ['state_2']
resultant component: 
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1; p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_4_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_4_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_4_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_100 = state_1; p_state_101 = p__br_tmp2 ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
v:  p__br_tmp2 = 1&&(p__br_tmp00); p_state_200 = state_2; p_state_201 = p__br_tmp2 ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7faef737e940>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7faef73c26d0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7faef737eb80>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7faef737e940>, 0), (<alus.DominoGenericSALU object at 0x7faef73c26d0>, 1), (<alus.DominoGenericSALU object at 0x7faef737e790>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_100', 'p__br_tmp2', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_201', 'p_state_200', 'p__br_tmp2', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['p_state_100', 'p__br_tmp2', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['p_state_201', 'p_state_200', 'p__br_tmp2', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 9.55409288406372 s
preprocessor time:
