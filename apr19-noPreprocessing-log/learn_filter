running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_1_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1a063092b0>, 'write': <dependencyGraph.Statement object at 0x7f1a06309160>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f1a06309790>, 'write': <dependencyGraph.Statement object at 0x7f1a063093a0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f1a062ce640>, 'write': <dependencyGraph.Statement object at 0x7f1a06309760>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1a063092b0>, 'write': <dependencyGraph.Statement object at 0x7f1a06309160>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1a06309790>, 'write': <dependencyGraph.Statement object at 0x7f1a063093a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f1a062ce640>, 'write': <dependencyGraph.Statement object at 0x7f1a06309760>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1a06309e80>, <dependencyGraph.Codelet object at 0x7f1a06309f10>, <dependencyGraph.Codelet object at 0x7f1a06309fa0>, <dependencyGraph.Codelet object at 0x7f1a06309460>, <dependencyGraph.Codelet object at 0x7f1a06309f40>, <dependencyGraph.Codelet object at 0x7f1a06309f70>, <dependencyGraph.Codelet object at 0x7f1a06309ee0>, <dependencyGraph.Codelet object at 0x7f1a062c0100>, <dependencyGraph.Codelet object at 0x7f1a062c0160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1a062c0100>, <dependencyGraph.Codelet object at 0x7f1a06309ee0>, <dependencyGraph.Codelet object at 0x7f1a06309f70>}
total number of nodes created:  9
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_000', 'p_state_100', 'p_state_101', 'p_state_001', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp2', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_000', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_000', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_000', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p__br_tmp3', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p__br_tmp3', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p__br_tmp3', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p__br_tmp3', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'state_0', 'state_1', 'state_2', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f1a063098e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_001', 'p__br_tmp3']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f1a063098e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_101', 'p__br_tmp3']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f1a063098e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_201', 'p__br_tmp3']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,5,
+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 5), (1, 3), (1, 4), (1, 5), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 136 rows, 93 columns and 302 nonzeros
Model fingerprint: 0x9b593842
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 149 rows, 78 columns, 354 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f1a062c09a0>, 0), (<alus.DominoALU object at 0x7f1a062c0730>, 1), (<alus.DominoALU object at 0x7f1a062c0d00>, 2), (<alus.DominoALU object at 0x7f1a062c0970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f1a062c0b80>, 0), (<alus.DominoGenericSALU object at 0x7f1a06309130>, 1), (<alus.DominoGenericSALU object at 0x7f1a062c0b20>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 3), (1, 4), (1, 5), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000', 'p_state_001', 'p__br_tmp3'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_101', 'p_state_100', 'p__br_tmp3'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2', 'p_state_201', 'p__br_tmp3'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 31, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '15'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 3), (1, 4), (1, 5), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000', 'p_state_001', 'p__br_tmp3'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_101', 'p_state_100', 'p__br_tmp3'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2', 'p_state_201', 'p__br_tmp3'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 31, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '15'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}]}
Time taken: 87.53964447975159 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_2_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7fa2d371c640>, 'write': <dependencyGraph.Statement object at 0x7fa2d3757760>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fa2d3757790>, 'write': <dependencyGraph.Statement object at 0x7fa2d37573a0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fa2d37572b0>, 'write': <dependencyGraph.Statement object at 0x7fa2d3757160>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fa2d371c640>, 'write': <dependencyGraph.Statement object at 0x7fa2d3757760>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa2d3757790>, 'write': <dependencyGraph.Statement object at 0x7fa2d37573a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa2d37572b0>, 'write': <dependencyGraph.Statement object at 0x7fa2d3757160>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa2d3757e80>, <dependencyGraph.Codelet object at 0x7fa2d3757f10>, <dependencyGraph.Codelet object at 0x7fa2d3757fa0>, <dependencyGraph.Codelet object at 0x7fa2d3757460>, <dependencyGraph.Codelet object at 0x7fa2d3757f40>, <dependencyGraph.Codelet object at 0x7fa2d3757f70>, <dependencyGraph.Codelet object at 0x7fa2d3757ee0>, <dependencyGraph.Codelet object at 0x7fa2d370e100>, <dependencyGraph.Codelet object at 0x7fa2d370e160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa2d370e100>, <dependencyGraph.Codelet object at 0x7fa2d3757ee0>, <dependencyGraph.Codelet object at 0x7fa2d3757f70>}
total number of nodes created:  9
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_201', 'p_state_000', 'p_state_200', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_state_200', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_000', 'p__br_tmp3']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_100', 'p_state_000', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p__br_tmp3', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p__br_tmp3', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p__br_tmp3', 'p_state_200']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p__br_tmp3', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'state_2', 'state_1', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa2d37578e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p__br_tmp3', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa2d37578e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p__br_tmp3', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa2d37578e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p__br_tmp3', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
3,4,
+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 3), (1, 4), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 136 rows, 93 columns and 302 nonzeros
Model fingerprint: 0x2a548b6e
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 149 rows, 78 columns, 354 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fa2d370e9a0>, 0), (<alus.DominoALU object at 0x7fa2d370e730>, 1), (<alus.DominoALU object at 0x7fa2d370ed00>, 2), (<alus.DominoALU object at 0x7fa2d370e970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fa2d370eb80>, 0), (<alus.DominoGenericSALU object at 0x7fa2d3757130>, 1), (<alus.DominoGenericSALU object at 0x7fa2d370eb20>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (1, 4), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp3', 'p_state_001', 'p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'p__br_tmp3', 'state_1', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p__br_tmp3', 'p_state_200', 'state_2', 'p_state_201'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 26, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '16'}, {'id': 4, 'opcode': 12, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '17'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (1, 4), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp3', 'p_state_001', 'p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'p__br_tmp3', 'state_1', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p__br_tmp3', 'p_state_200', 'state_2', 'p_state_201'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 26, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '16'}, {'id': 4, 'opcode': 12, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '17'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
Time taken: 7.501575708389282 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_3_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f114f4d8640>, 'write': <dependencyGraph.Statement object at 0x7f114f513760>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f114f513790>, 'write': <dependencyGraph.Statement object at 0x7f114f5133a0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f114f5132b0>, 'write': <dependencyGraph.Statement object at 0x7f114f513160>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f114f4d8640>, 'write': <dependencyGraph.Statement object at 0x7f114f513760>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f114f513790>, 'write': <dependencyGraph.Statement object at 0x7f114f5133a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f114f5132b0>, 'write': <dependencyGraph.Statement object at 0x7f114f513160>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f114f513e80>, <dependencyGraph.Codelet object at 0x7f114f513f10>, <dependencyGraph.Codelet object at 0x7f114f513fa0>, <dependencyGraph.Codelet object at 0x7f114f513460>, <dependencyGraph.Codelet object at 0x7f114f513f40>, <dependencyGraph.Codelet object at 0x7f114f513f70>, <dependencyGraph.Codelet object at 0x7f114f513ee0>, <dependencyGraph.Codelet object at 0x7f114f4ca100>, <dependencyGraph.Codelet object at 0x7f114f4ca160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f114f4ca100>, <dependencyGraph.Codelet object at 0x7f114f513ee0>, <dependencyGraph.Codelet object at 0x7f114f513f70>}
total number of nodes created:  9
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_000', 'p_state_100', 'p_state_101', 'p_state_001', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp2', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_100', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p__br_tmp3', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p__br_tmp3', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_000', 'p__br_tmp3']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_000', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p__br_tmp3', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p__br_tmp3', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'state_2', 'state_1', 'state_0', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f114f5138e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp3']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f114f5138e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101', 'p__br_tmp3']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f114f5138e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201', 'p__br_tmp3']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
4,5,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 4), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0xad3428a8
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f114f4ca9a0>, 0), (<alus.DominoALU object at 0x7f114f4ca730>, 1), (<alus.DominoALU object at 0x7f114f4cad00>, 2), (<alus.DominoALU object at 0x7f114f4ca970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f114f4cab80>, 0), (<alus.DominoGenericSALU object at 0x7f114f513130>, 1), (<alus.DominoGenericSALU object at 0x7f114f4cab20>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp3'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1', 'p_state_101', 'p__br_tmp3'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2', 'p_state_201', 'p__br_tmp3'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '26'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp3'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1', 'p_state_101', 'p__br_tmp3'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2', 'p_state_201', 'p__br_tmp3'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '26'}]}
Time taken: 9.322540998458862 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_4_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fa0966c7790>, 'write': <dependencyGraph.Statement object at 0x7fa0966c73a0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fa0966c72b0>, 'write': <dependencyGraph.Statement object at 0x7fa0966c7160>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fa09668c640>, 'write': <dependencyGraph.Statement object at 0x7fa0966c7760>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa0966c7790>, 'write': <dependencyGraph.Statement object at 0x7fa0966c73a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa0966c72b0>, 'write': <dependencyGraph.Statement object at 0x7fa0966c7160>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fa09668c640>, 'write': <dependencyGraph.Statement object at 0x7fa0966c7760>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa0966c7e80>, <dependencyGraph.Codelet object at 0x7fa0966c7f10>, <dependencyGraph.Codelet object at 0x7fa0966c7fa0>, <dependencyGraph.Codelet object at 0x7fa0966c7460>, <dependencyGraph.Codelet object at 0x7fa0966c7f40>, <dependencyGraph.Codelet object at 0x7fa0966c7f70>, <dependencyGraph.Codelet object at 0x7fa0966c7ee0>, <dependencyGraph.Codelet object at 0x7fa09667e100>, <dependencyGraph.Codelet object at 0x7fa09667e160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa09667e100>, <dependencyGraph.Codelet object at 0x7fa0966c7ee0>, <dependencyGraph.Codelet object at 0x7fa0966c7f70>}
total number of nodes created:  9
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_201', 'p_state_200', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_state_100', 'p_state_200']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_100', 'p__br_tmp3']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p_state_100', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p__br_tmp3', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p__br_tmp3', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_200', 'p__br_tmp3']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_200', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'state_1', 'state_0', 'p__br_tmp3', 'state_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa0966c78e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p__br_tmp3', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa0966c78e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p__br_tmp3', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fa0966c78e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p__br_tmp3', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
4,5,
+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x426bcab6
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 352 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fa09667e9a0>, 0), (<alus.DominoALU object at 0x7fa09667e730>, 1), (<alus.DominoALU object at 0x7fa09667ed00>, 2), (<alus.DominoALU object at 0x7fa09667e970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fa09667eb80>, 0), (<alus.DominoGenericSALU object at 0x7fa0966c7130>, 1), (<alus.DominoGenericSALU object at 0x7fa09667eb20>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp3', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100', 'p__br_tmp3', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'p__br_tmp3', 'state_2', 'p_state_201'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 3, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp3', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100', 'p__br_tmp3', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'p__br_tmp3', 'state_2', 'p_state_201'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 3, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
Time taken: 7.128670692443848 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_5_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2b38eef2b0>, 'write': <dependencyGraph.Statement object at 0x7f2b38eef160>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f2b38eb4640>, 'write': <dependencyGraph.Statement object at 0x7f2b38eef760>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f2b38eef790>, 'write': <dependencyGraph.Statement object at 0x7f2b38eef3a0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2b38eef2b0>, 'write': <dependencyGraph.Statement object at 0x7f2b38eef160>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f2b38eb4640>, 'write': <dependencyGraph.Statement object at 0x7f2b38eef760>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2b38eef790>, 'write': <dependencyGraph.Statement object at 0x7f2b38eef3a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2b38eefe80>, <dependencyGraph.Codelet object at 0x7f2b38eeff10>, <dependencyGraph.Codelet object at 0x7f2b38eeffa0>, <dependencyGraph.Codelet object at 0x7f2b38eef460>, <dependencyGraph.Codelet object at 0x7f2b38eeff40>, <dependencyGraph.Codelet object at 0x7f2b38eeff70>, <dependencyGraph.Codelet object at 0x7f2b38eefee0>, <dependencyGraph.Codelet object at 0x7f2b38ea6100>, <dependencyGraph.Codelet object at 0x7f2b38ea6160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2b38ea6100>, <dependencyGraph.Codelet object at 0x7f2b38eefee0>, <dependencyGraph.Codelet object at 0x7f2b38eeff70>}
total number of nodes created:  9
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_201', 'p_state_000', 'p_state_200', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp2', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_state_100', 'p_state_200']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_000', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_000', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_000', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_000', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_100', 'p_state_200']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_100', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'state_0', 'state_2', 'p__br_tmp3', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2b38eef8e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001', 'p__br_tmp3']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2b38eef8e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101', 'p__br_tmp3']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2b38eef8e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201', 'p__br_tmp3']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
3,5,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x9596c560
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f2b38ea69a0>, 0), (<alus.DominoALU object at 0x7f2b38ea6730>, 1), (<alus.DominoALU object at 0x7f2b38ea6d00>, 2), (<alus.DominoALU object at 0x7f2b38ea6970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f2b38ea6b80>, 0), (<alus.DominoGenericSALU object at 0x7f2b38eef130>, 1), (<alus.DominoGenericSALU object at 0x7f2b38ea6b20>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000', 'p_state_001', 'p__br_tmp3'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_101', 'p_state_100', 'p__br_tmp3', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_201', 'p_state_200', 'p__br_tmp3', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 15, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000', 'p_state_001', 'p__br_tmp3'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_101', 'p_state_100', 'p__br_tmp3', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_201', 'p_state_200', 'p__br_tmp3', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 15, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
Time taken: 9.170027256011963 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_6_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

lhs p__br_tmp00 rhs p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_100 = state_1; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_000 = state_0; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fb169ba72b0>, 'write': <dependencyGraph.Statement object at 0x7fb169ba7160>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fb169ba7790>, 'write': <dependencyGraph.Statement object at 0x7fb169ba73a0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fb169b6c640>, 'write': <dependencyGraph.Statement object at 0x7fb169ba7760>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb169ba72b0>, 'write': <dependencyGraph.Statement object at 0x7fb169ba7160>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb169ba7790>, 'write': <dependencyGraph.Statement object at 0x7fb169ba73a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fb169b6c640>, 'write': <dependencyGraph.Statement object at 0x7fb169ba7760>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1 stmts len 1
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb169ba7e80>, <dependencyGraph.Codelet object at 0x7fb169ba7f10>, <dependencyGraph.Codelet object at 0x7fb169ba7fa0>, <dependencyGraph.Codelet object at 0x7fb169ba7460>, <dependencyGraph.Codelet object at 0x7fb169ba7f40>, <dependencyGraph.Codelet object at 0x7fb169ba7f70>, <dependencyGraph.Codelet object at 0x7fb169ba7ee0>, <dependencyGraph.Codelet object at 0x7fb169b5d100>, <dependencyGraph.Codelet object at 0x7fb169b5d160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb169b5d100>, <dependencyGraph.Codelet object at 0x7fb169ba7ee0>, <dependencyGraph.Codelet object at 0x7fb169ba7f70>}
total number of nodes created:  9
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_200', 'p_state_100', 'p_state_201', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp2', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp2', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_000', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_000', 'p__br_tmp3']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_100', 'p_state_000', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_000', 'p__br_tmp3']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_000', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_100', 'p__br_tmp3']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_100', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp3', 'state_0', 'state_1', 'state_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb169ba78e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p__br_tmp3', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb169ba78e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p__br_tmp3', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb169ba78e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p__br_tmp3', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,5,
+---> dependencies of ALU  1 : 
4,5,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 5), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 136 rows, 93 columns and 302 nonzeros
Model fingerprint: 0xab028af2
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 149 rows, 78 columns, 354 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fb169b5d9a0>, 0), (<alus.DominoALU object at 0x7fb169b5d730>, 1), (<alus.DominoALU object at 0x7fb169b5dd00>, 2), (<alus.DominoALU object at 0x7fb169b5d970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fb169b5db80>, 0), (<alus.DominoGenericSALU object at 0x7fb169ba7130>, 1), (<alus.DominoGenericSALU object at 0x7fb169b5db20>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp3', 'state_0', 'p_state_000', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p__br_tmp3', 'p_state_101', 'state_1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p__br_tmp3', 'p_state_201', 'p_state_200', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp3', 'state_0', 'p_state_000', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p__br_tmp3', 'p_state_101', 'state_1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p__br_tmp3', 'p_state_201', 'p_state_200', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '30'}]}
Time taken: 22.673609972000122 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_7_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f5377de32b0>, 'write': <dependencyGraph.Statement object at 0x7f5377de3160>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f5377de3790>, 'write': <dependencyGraph.Statement object at 0x7f5377de33a0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f5377da8640>, 'write': <dependencyGraph.Statement object at 0x7f5377de3760>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f5377de32b0>, 'write': <dependencyGraph.Statement object at 0x7f5377de3160>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f5377de3790>, 'write': <dependencyGraph.Statement object at 0x7f5377de33a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f5377da8640>, 'write': <dependencyGraph.Statement object at 0x7f5377de3760>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5377de3e80>, <dependencyGraph.Codelet object at 0x7f5377de3f10>, <dependencyGraph.Codelet object at 0x7f5377de3fa0>, <dependencyGraph.Codelet object at 0x7f5377de3460>, <dependencyGraph.Codelet object at 0x7f5377de3f40>, <dependencyGraph.Codelet object at 0x7f5377de3f70>, <dependencyGraph.Codelet object at 0x7f5377de3ee0>, <dependencyGraph.Codelet object at 0x7f5377d9a100>, <dependencyGraph.Codelet object at 0x7f5377d9a160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5377d9a100>, <dependencyGraph.Codelet object at 0x7f5377de3ee0>, <dependencyGraph.Codelet object at 0x7f5377de3f70>}
total number of nodes created:  9
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_201', 'p_state_000', 'p_state_200', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_100', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_100', 'p__br_tmp3']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p_state_100', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_200', 'p__br_tmp3']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_state_200', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_100', 'p__br_tmp3']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_100', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'state_0', 'state_1', 'state_2', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f5377de38e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp3']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f5377de38e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p__br_tmp3', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f5377de38e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p__br_tmp3', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
4,5,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 4), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xdf0b15f9
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 352 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f5377d9a9a0>, 0), (<alus.DominoALU object at 0x7f5377d9a730>, 1), (<alus.DominoALU object at 0x7f5377d9ad00>, 2), (<alus.DominoALU object at 0x7f5377d9a970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f5377d9ab80>, 0), (<alus.DominoGenericSALU object at 0x7f5377de3130>, 1), (<alus.DominoGenericSALU object at 0x7f5377d9ab20>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 4), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp3', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100', 'p__br_tmp3', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2', 'p__br_tmp3', 'p_state_201'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 4), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp3', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100', 'p__br_tmp3', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2', 'p__br_tmp3', 'p_state_201'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
Time taken: 17.876494646072388 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_8_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f6adaf582b0>, 'write': <dependencyGraph.Statement object at 0x7f6adaf58160>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f6adaf1d640>, 'write': <dependencyGraph.Statement object at 0x7f6adaf58760>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f6adaf58790>, 'write': <dependencyGraph.Statement object at 0x7f6adaf583a0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f6adaf582b0>, 'write': <dependencyGraph.Statement object at 0x7f6adaf58160>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6adaf1d640>, 'write': <dependencyGraph.Statement object at 0x7f6adaf58760>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6adaf58790>, 'write': <dependencyGraph.Statement object at 0x7f6adaf583a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6adaf58e80>, <dependencyGraph.Codelet object at 0x7f6adaf58f10>, <dependencyGraph.Codelet object at 0x7f6adaf58fa0>, <dependencyGraph.Codelet object at 0x7f6adaf58460>, <dependencyGraph.Codelet object at 0x7f6adaf58f40>, <dependencyGraph.Codelet object at 0x7f6adaf58f70>, <dependencyGraph.Codelet object at 0x7f6adaf58ee0>, <dependencyGraph.Codelet object at 0x7f6adaf0f100>, <dependencyGraph.Codelet object at 0x7f6adaf0f160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6adaf0f100>, <dependencyGraph.Codelet object at 0x7f6adaf58ee0>, <dependencyGraph.Codelet object at 0x7f6adaf58f70>}
total number of nodes created:  9
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_201', 'p_state_200', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_000', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_100', 'p_state_200']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_100', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_000', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_000', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_000', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_000', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'state_2', 'p__br_tmp3', 'state_0', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f6adaf588e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p__br_tmp3', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f6adaf588e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p__br_tmp3', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f6adaf588e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p__br_tmp3', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
3,4,
+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 3), (1, 4), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 136 rows, 93 columns and 302 nonzeros
Model fingerprint: 0x2a548b6e
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 149 rows, 78 columns, 354 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f6adaf0f9a0>, 0), (<alus.DominoALU object at 0x7f6adaf0f730>, 1), (<alus.DominoALU object at 0x7f6adaf0fd00>, 2), (<alus.DominoALU object at 0x7f6adaf0f970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f6adaf0fb80>, 0), (<alus.DominoGenericSALU object at 0x7f6adaf58130>, 1), (<alus.DominoGenericSALU object at 0x7f6adaf0fb20>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (1, 4), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p__br_tmp3', 'p_state_200', 'p_state_201', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p__br_tmp3', 'p_state_100', 'state_1', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p__br_tmp3', 'p_state_000', 'state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '24'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (1, 4), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p__br_tmp3', 'p_state_200', 'p_state_201', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p__br_tmp3', 'p_state_100', 'state_1', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p__br_tmp3', 'p_state_000', 'state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '24'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
Time taken: 17.299013376235962 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_9_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f0d4125d640>, 'write': <dependencyGraph.Statement object at 0x7f0d41298760>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f0d412982b0>, 'write': <dependencyGraph.Statement object at 0x7f0d41298160>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f0d41298790>, 'write': <dependencyGraph.Statement object at 0x7f0d412983a0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0d4125d640>, 'write': <dependencyGraph.Statement object at 0x7f0d41298760>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f0d412982b0>, 'write': <dependencyGraph.Statement object at 0x7f0d41298160>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f0d41298790>, 'write': <dependencyGraph.Statement object at 0x7f0d412983a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0d41298e80>, <dependencyGraph.Codelet object at 0x7f0d41298f10>, <dependencyGraph.Codelet object at 0x7f0d41298fa0>, <dependencyGraph.Codelet object at 0x7f0d41298460>, <dependencyGraph.Codelet object at 0x7f0d41298f40>, <dependencyGraph.Codelet object at 0x7f0d41298f70>, <dependencyGraph.Codelet object at 0x7f0d41298ee0>, <dependencyGraph.Codelet object at 0x7f0d4124e100>, <dependencyGraph.Codelet object at 0x7f0d4124e160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0d4124e100>, <dependencyGraph.Codelet object at 0x7f0d41298ee0>, <dependencyGraph.Codelet object at 0x7f0d41298f70>}
total number of nodes created:  9
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_200', 'p_state_001', 'p_state_000', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_100', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_100', 'p__br_tmp3']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_100', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_000', 'p__br_tmp3']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_000', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_100', 'p__br_tmp3']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p_state_100', 'p__br_tmp3']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'state_0', 'state_2', 'p__br_tmp3', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0d412988e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201', 'p__br_tmp3']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0d412988e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101', 'p__br_tmp3']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f0d412988e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp3']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,5,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 5), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xa77b4736
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 352 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f0d4124e9a0>, 0), (<alus.DominoALU object at 0x7f0d4124e730>, 1), (<alus.DominoALU object at 0x7f0d4124ed00>, 2), (<alus.DominoALU object at 0x7f0d4124e970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f0d4124eb80>, 0), (<alus.DominoGenericSALU object at 0x7f0d41298130>, 1), (<alus.DominoGenericSALU object at 0x7f0d4124eb20>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2', 'p_state_201', 'p__br_tmp3'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_101', 'p_state_100', 'p__br_tmp3', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp3', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 0, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 8, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2', 'p_state_201', 'p__br_tmp3'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['p_state_101', 'p_state_100', 'p__br_tmp3', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp3', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 0, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 8, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
Time taken: 9.250185012817383 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_10_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p__br_tmp1 = 1&&(p__br_tmp00);

lhs p__br_tmp1 rhs 1&&(p__br_tmp00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = 1&&(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = 1&&!(p__br_tmp00);

lhs p__br_tmp2 rhs 1&&!(p__br_tmp00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = 1&&!(p__br_tmp00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p__br_tmp3 = 1;

lhs p__br_tmp3 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp3 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp3 ? (1) : (p_state_000)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p__br_tmp3 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_000']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

lhs p_state_201 rhs p__br_tmp3 ? (1) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp3 ? (1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_200 = state_2; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp1 = 1&&(p__br_tmp00);
RAW p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p__br_tmp2 = 1&&!(p__br_tmp00);
RAW p__br_tmp1 = 1&&(p__br_tmp00); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = 1&&!(p__br_tmp00); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp3 = 1; p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
RAW p__br_tmp3 = 1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp3 = 1; p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
RAW p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f2066ae1790>, 'write': <dependencyGraph.Statement object at 0x7f2066ae13a0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f2066aa6640>, 'write': <dependencyGraph.Statement object at 0x7f2066ae1760>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f2066ae12b0>, 'write': <dependencyGraph.Statement object at 0x7f2066ae1160>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2066ae1790>, 'write': <dependencyGraph.Statement object at 0x7f2066ae13a0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2066aa6640>, 'write': <dependencyGraph.Statement object at 0x7f2066ae1760>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f2066ae12b0>, 'write': <dependencyGraph.Statement object at 0x7f2066ae1160>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  15
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = 1&&(p__br_tmp00) stmts len 1
p__br_tmp1 = 1&&(p__br_tmp00);
SCC 3
v p__br_tmp2 = 1&&!(p__br_tmp00) stmts len 1
p__br_tmp2 = 1&&!(p__br_tmp00);
SCC 4
v p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp3 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 7
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp3 ? (1) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 8
v p__br_tmp3 = 1 stmts len 1
p__br_tmp3 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2066ae1e80>, <dependencyGraph.Codelet object at 0x7f2066ae1f10>, <dependencyGraph.Codelet object at 0x7f2066ae1fa0>, <dependencyGraph.Codelet object at 0x7f2066ae1460>, <dependencyGraph.Codelet object at 0x7f2066ae1f40>, <dependencyGraph.Codelet object at 0x7f2066ae1f70>, <dependencyGraph.Codelet object at 0x7f2066ae1ee0>, <dependencyGraph.Codelet object at 0x7f2066a98100>, <dependencyGraph.Codelet object at 0x7f2066a98160>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = 1&&(p__br_tmp00);
p__br_tmp2 = 1&&!(p__br_tmp00);
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_000 = state_0;
p_state_001 = p__br_tmp3 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp3 ? (1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp3 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2066a98100>, <dependencyGraph.Codelet object at 0x7f2066ae1ee0>, <dependencyGraph.Codelet object at 0x7f2066ae1f70>}
total number of nodes created:  9
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_201', 'p_state_101', 'p_state_000', 'p_state_001', 'p_state_200'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp3 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp3 ? (1) : (p_state_200) state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p__br_tmp2 = 1&&!(p__br_tmp00);', 'p__br_tmp1 = 1&&(p__br_tmp00);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;', 'p__br_tmp3 = 1;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp2']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
     |  p__br_tmp2 = 1&&!(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p__br_tmp1 = 1&&(p__br_tmp00);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp2 = 1&&!(p__br_tmp00);
 node outputs:  ['p__br_tmp2']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp2 = 1&&!(p__br_tmp00);
     |  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp2 = 1&&!(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp1 = 1&&(p__br_tmp00);
 node outputs:  ['p__br_tmp1']
 node inputs:  ['p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp1 = 1&&(p__br_tmp00);
     |  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp1 = 1&&(p__br_tmp00);
 * recursive_merge: node ::  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_state_100', 'p_state_200']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_100', 'p_state_200']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_100', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_000', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_000', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p__br_tmp3', 'p_state_100', 'p_state_000']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p__br_tmp3', 'p_state_100', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_100', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp3 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p__br_tmp3 = 1;
 node outputs:  ['p__br_tmp3']
 node inputs:  []
 exclude_read_write_flanks: successor inputs:  {'state_1', 'state_0', 'state_2', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp3 = 1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2066ae18e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201', 'p__br_tmp3']
state_var ['state_2']
resultant component: 
p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2066ae18e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101', 'p__br_tmp3']
state_var ['state_1']
resultant component: 
p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp3 = 1;
try_merge: trying to merge components: 
 | a:  p__br_tmp3 = 1;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2066ae18e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001', 'p__br_tmp3']
state_var ['state_0']
resultant component: 
p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 --- can fold. performing folding...
 ----------------- iteratively folding node. folding_idx =  1
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp3 = 1; p_state_200 = state_2; p_state_201 = p__br_tmp3 ? (1) : (p_state_200); state_2 = p_state_201;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p__br_tmp3 = 1; p_state_000 = state_0; p_state_001 = p__br_tmp3 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = 1&&!(p__br_tmp00);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = 1&&(p__br_tmp00);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
u:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp1 = 1&&(p__br_tmp00);
u:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p__br_tmp2 = 1&&!(p__br_tmp00);
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
4,5,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 136 rows, 93 columns and 302 nonzeros
Model fingerprint: 0xbfd23b63
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 149 rows, 78 columns, 354 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f2066a989a0>, 0), (<alus.DominoALU object at 0x7f2066a98730>, 1), (<alus.DominoALU object at 0x7f2066a98d00>, 2), (<alus.DominoALU object at 0x7f2066a98970>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f2066a98b80>, 0), (<alus.DominoGenericSALU object at 0x7f2066ae1130>, 1), (<alus.DominoGenericSALU object at 0x7f2066a98b20>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 4), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_201', 'state_2', 'p__br_tmp3', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_101', 'p__br_tmp3', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp3', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 4), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_2'], 'outputs': ['p_state_201', 'state_2', 'p__br_tmp3', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_101', 'p__br_tmp3', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p__br_tmp3', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}]}
Time taken: 66.46865248680115 s
preprocessor time:
