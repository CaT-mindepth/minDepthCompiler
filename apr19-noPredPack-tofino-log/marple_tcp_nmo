running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f424e18cbe0>, 'write': <dependencyGraph.Statement object at 0x7f424d1693a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f424d1696d0>, 'write': <dependencyGraph.Statement object at 0x7f424d169790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f424e18cbe0>, 'write': <dependencyGraph.Statement object at 0x7f424d1693a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f424d1696d0>, 'write': <dependencyGraph.Statement object at 0x7f424d169790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f424d169100>, <dependencyGraph.Codelet object at 0x7f424d1691c0>, <dependencyGraph.Codelet object at 0x7f424d169940>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f424d169100>, <dependencyGraph.Codelet object at 0x7f424d169940>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 6 metadata_hi 20 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 20, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_hi)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_hi_1) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 metadata_hi 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 31 1 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 31, 1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - 0 ) + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-0)+1)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - 0) + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  true
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 5 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(5, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_hi - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_hi-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_hi - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f56ab858be0>, 'write': <dependencyGraph.Statement object at 0x7f56aa8353a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f56aa8356d0>, 'write': <dependencyGraph.Statement object at 0x7f56aa835790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f56ab858be0>, 'write': <dependencyGraph.Statement object at 0x7f56aa8353a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f56aa8356d0>, 'write': <dependencyGraph.Statement object at 0x7f56aa835790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f56aa835100>, <dependencyGraph.Codelet object at 0x7f56aa8351c0>, <dependencyGraph.Codelet object at 0x7f56aa835940>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f56aa835100>, <dependencyGraph.Codelet object at 0x7f56aa835940>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 16 8 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 16, 8, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - 0 ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-0)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi - 0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 19 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 19, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 25 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 25, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+1)<0
    ( line =    bit condition_lo_s67 = (metadata_hi + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_hi - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_hi-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_hi - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp6 = !(p_pkt_0<p_state_000);

lhs p__br_tmp6 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fe76bc5bbe0>, 'write': <dependencyGraph.Statement object at 0x7fe76ac383a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fe76ac386d0>, 'write': <dependencyGraph.Statement object at 0x7fe76ac38790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe76bc5bbe0>, 'write': <dependencyGraph.Statement object at 0x7fe76ac383a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe76ac386d0>, 'write': <dependencyGraph.Statement object at 0x7fe76ac38790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp6 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe76ac38070>, <dependencyGraph.Codelet object at 0x7fe76ac380d0>, <dependencyGraph.Codelet object at 0x7fe76ac38940>]
p_state_100 = state_1;
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp6 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe76ac38940>, <dependencyGraph.Codelet object at 0x7fe76ac38070>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp6 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp7'}
{'p__br_tmp7'}
u:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp6;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp6 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_hi ) + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_hi)+1)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_hi_1) + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp6;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp6 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 17 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 17, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 15 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 15, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp7']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp7', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp7  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 1 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 9 24 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 9, 24, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 20 24 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 20, 24, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 1 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+1)<0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 1) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_hi ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_hi)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_hi_1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe3332e06d0>, 'write': <dependencyGraph.Statement object at 0x7fe3332e0790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe334303be0>, 'write': <dependencyGraph.Statement object at 0x7fe3332e03a0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe3332e06d0>, 'write': <dependencyGraph.Statement object at 0x7fe3332e0790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe334303be0>, 'write': <dependencyGraph.Statement object at 0x7fe3332e03a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe3332e0070>, <dependencyGraph.Codelet object at 0x7fe3332e00d0>, <dependencyGraph.Codelet object at 0x7fe3332e0940>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe3332e0940>, <dependencyGraph.Codelet object at 0x7fe3332e0070>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 31 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 31, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 0 9 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, 9, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 metadata_hi 9 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_hi, 9, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 18 3 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 18, 3, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 4 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+4)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 4) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 14 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 14, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 7 30 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 30, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+2)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 2) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_hi)+1)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_hi_1) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fb3d360ebe0>, 'write': <dependencyGraph.Statement object at 0x7fb3d25eb3a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fb3d25eb6d0>, 'write': <dependencyGraph.Statement object at 0x7fb3d25eb790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb3d360ebe0>, 'write': <dependencyGraph.Statement object at 0x7fb3d25eb3a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb3d25eb6d0>, 'write': <dependencyGraph.Statement object at 0x7fb3d25eb790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb3d25eb100>, <dependencyGraph.Codelet object at 0x7fb3d25eb1c0>, <dependencyGraph.Codelet object at 0x7fb3d25eb940>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb3d25eb100>, <dependencyGraph.Codelet object at 0x7fb3d25eb940>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 20 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 20, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_hi)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_hi_1) < 0;
  )
demangled line:  bit condition_lo = ( register_hi + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (register_hi+15)<0
    ( line =    bit condition_lo_s67 = (register_hi_1 + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 23 20 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 23, 20, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 19 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 19, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_lo 22 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_lo, 22, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+2)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 2) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 metadata_hi 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_hi ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_hi)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_hi_1) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp8 = !(p_pkt_0<p_state_000);

lhs p__br_tmp8 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp8 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp9 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp9 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f973b184be0>, 'write': <dependencyGraph.Statement object at 0x7f973a1613a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f973a1616d0>, 'write': <dependencyGraph.Statement object at 0x7f973a161790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f973b184be0>, 'write': <dependencyGraph.Statement object at 0x7f973a1613a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f973a1616d0>, 'write': <dependencyGraph.Statement object at 0x7f973a161790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp8 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f973a161100>, <dependencyGraph.Codelet object at 0x7f973a1611c0>, <dependencyGraph.Codelet object at 0x7f973a161940>]
p_state_100 = state_1;
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp8 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f973a161100>, <dependencyGraph.Codelet object at 0x7f973a161940>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp8 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp9'}
{'p__br_tmp9'}
u:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp9']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp9', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp9  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 30 22 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 30, 22, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-register_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi - register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp8;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp8 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 27 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 27, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 0 20 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, 20, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 27 3 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 27, 3, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 31 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 31, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + 11 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+11)!=0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + 11) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp8;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp8 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 31 23 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 31, 23, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 15 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 15, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)!=0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<p_state_100;

lhs p__br_tmp5 rhs p_pkt_0<p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000', 'p_state_000']
p__br_tmp6 = !(p_pkt_0<p_state_100);

lhs p__br_tmp6 rhs !(p_pkt_0<p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = !(p_pkt_0<p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp5 = p_pkt_0<p_state_100;
RAW p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<p_state_100; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fd7c8be96d0>, 'write': <dependencyGraph.Statement object at 0x7fd7c8be9790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fd7c9c0cbe0>, 'write': <dependencyGraph.Statement object at 0x7fd7c8be9610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fd7c8be96d0>, 'write': <dependencyGraph.Statement object at 0x7fd7c8be9790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd7c9c0cbe0>, 'write': <dependencyGraph.Statement object at 0x7fd7c8be9610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p__br_tmp5 = p_pkt_0<p_state_100 stmts len 1
p__br_tmp5 = p_pkt_0<p_state_100;
SCC 2
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = !(p_pkt_0<p_state_100) stmts len 1
p__br_tmp6 = !(p_pkt_0<p_state_100);
v p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd7c8be9070>, <dependencyGraph.Codelet object at 0x7fd7c8be9190>, <dependencyGraph.Codelet object at 0x7fd7c8be9160>]
p_state_000 = state_0;
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp5 = p_pkt_0<p_state_100;
p_state_100 = state_1;
p__br_tmp6 = !(p_pkt_0<p_state_100);
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd7c8be9160>, <dependencyGraph.Codelet object at 0x7fd7c8be9070>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp6 = !(p_pkt_0<p_state_100) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp6 = !(p_pkt_0<p_state_100) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp5 = p_pkt_0<p_state_100;
u:  p__br_tmp5 = p_pkt_0<p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp6 = !(p_pkt_0<p_state_100);

curr line: 	p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_100;

 > FOUND OUT LINE : 	_out[2] = p_state_100;

> found out variable:  p_state_100
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_100
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= p_state_100
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 8 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 8, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 3 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 3, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 1 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+2)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 2) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp5']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi 17 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 17, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - 0 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-0)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - 0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f10350a16d0>, 'write': <dependencyGraph.Statement object at 0x7f10350a1790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f10360c4be0>, 'write': <dependencyGraph.Statement object at 0x7f10350a13a0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f10350a16d0>, 'write': <dependencyGraph.Statement object at 0x7f10350a1790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f10360c4be0>, 'write': <dependencyGraph.Statement object at 0x7f10350a13a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f10350a1070>, <dependencyGraph.Codelet object at 0x7f10350a10d0>, <dependencyGraph.Codelet object at 0x7f10350a1940>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f10350a1940>, <dependencyGraph.Codelet object at 0x7f10350a1070>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 6 7 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 7, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 31 11 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 31, 11, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 31 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 31, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 15 0 condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, 0, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  true
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 0 condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, 0, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 0 condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, 0, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(0)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 0 condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, 0, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 20 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 20, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_hi)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_hi_1) < 0;
  )
demangled line:  bit condition_lo = ( register_hi + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (register_hi+15)<0
    ( line =    bit condition_lo_s67 = (register_hi_1 + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = !(p_pkt_0<p_state_000);

lhs p__br_tmp2 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp3 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f8c4b5ff6d0>, 'write': <dependencyGraph.Statement object at 0x7f8c4b5ff790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f8c4c622be0>, 'write': <dependencyGraph.Statement object at 0x7f8c4b5ff3a0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f8c4b5ff6d0>, 'write': <dependencyGraph.Statement object at 0x7f8c4b5ff790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f8c4c622be0>, 'write': <dependencyGraph.Statement object at 0x7f8c4b5ff3a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp2 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8c4b5ff100>, <dependencyGraph.Codelet object at 0x7f8c4b5ff1c0>, <dependencyGraph.Codelet object at 0x7f8c4b5ff940>]
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp2 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8c4b5ff100>, <dependencyGraph.Codelet object at 0x7f8c4b5ff940>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp2 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp3'}
{'p__br_tmp3'}
u:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp3']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp3  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 20 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 20, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_hi)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_hi_1) < 0;
  )
demangled line:  bit condition_lo = ( register_hi + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (register_hi+15)<0
    ( line =    bit condition_lo_s67 = (register_hi_1 + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 5 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 5, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 4 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+4)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 4) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 3 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 3, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (0-register_lo)==0
    ( line =    bit condition_hi_s55 = (0 - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f10ed084be0>, 'write': <dependencyGraph.Statement object at 0x7f10ec0613a0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f10ec0616d0>, 'write': <dependencyGraph.Statement object at 0x7f10ec061790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f10ed084be0>, 'write': <dependencyGraph.Statement object at 0x7f10ec0613a0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f10ec0616d0>, 'write': <dependencyGraph.Statement object at 0x7f10ec061790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f10ec061040>, <dependencyGraph.Codelet object at 0x7f10ec0610a0>, <dependencyGraph.Codelet object at 0x7f10ec061940>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f10ec061940>, <dependencyGraph.Codelet object at 0x7f10ec061040>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+2)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 2) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 3 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 3, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 26 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 26, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 31 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_lo)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 23 20 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 23, 20, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 19 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 19, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 3 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 3, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 3 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 3 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+3)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 3) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
preprocessor time:
