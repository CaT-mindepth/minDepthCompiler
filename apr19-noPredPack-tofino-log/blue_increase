running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f906b391700>, 'write': <dependencyGraph.Statement object at 0x7f906b391880>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f906b391730>, 'write': <dependencyGraph.Statement object at 0x7f906b391ac0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f906b391700>, 'write': <dependencyGraph.Statement object at 0x7f906b391880>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f906b391730>, 'write': <dependencyGraph.Statement object at 0x7f906b391ac0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f906c66fbe0>, <dependencyGraph.Codelet object at 0x7f906b361d90>, <dependencyGraph.Codelet object at 0x7f906b3913a0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f906b361d90>, <dependencyGraph.Codelet object at 0x7f906c66fbe0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= p_pkt_10  metadata_hi= p_pkt_0  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 28 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 28, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 2 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 2, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+1)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 1) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 27 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 27, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 25 27 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 25, 27, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_0 :  [<alus.SALU object at 0x7f906b3913d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0xaa638caf
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 1
T0_A_1 2
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  1.0
action:  0
num stages:  3
stage:  2.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7f906b3913d0>, <alus.SALU object at 0x7f906b391f40>, <alus.ALU object at 0x7f906b3919d0>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
alu  1  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f906b3919d0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f906b3913d0>, 0), (<alus.SALU object at 0x7f906b391f40>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f906b3913d0>
 -* this SALU:  <alus.SALU object at 0x7f906b391f40>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f906b3913d0>
 -* this SALU:  <alus.SALU object at 0x7f906b391f40>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7f906b3913d0>
 -* this SALU:  <alus.SALU object at 0x7f906b391f40>
salu_configs:  [[0, 0], [1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(1)-(alu_lo)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(2)+(alu_hi)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_hi)+1)<0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(27)', 'update_lo_1_value': '(27)-(25)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(1)-(alu_lo)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(2)+(alu_hi)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_hi)+1)<0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(27)', 'update_lo_1_value': '(27)-(25)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(1)-(alu_lo)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(2)+(alu_hi)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_hi)+1)<0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(27)', 'update_lo_1_value': '(27)-(25)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [1, 0], [0, 1]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_10)+alu_lo)+1)>0;
    condition_hi              : (((0-ipv4.p_pkt_10)+alu_hi)+1)<0;
    update_lo_1_predicate     :  not (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (2)+(alu_hi);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (1)-(alu_lo);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p__br_tmp1)+alu_lo)<0;
    condition_hi              : (((0-ipv4.p__br_tmp1)-alu_lo)+2)==0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (27)-(25);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (0)+(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (6)-(27);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_1_action () {
    test_stateful_alu_2_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 2
table test_stateful_alu_2_1_table {
    actions {
        test_stateful_alu_2_1_action;
    }
    default_action: test_stateful_alu_2_1_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_2_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.921147108078003 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f2faa4ff6d0>, 'write': <dependencyGraph.Statement object at 0x7f2faa4ff790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f2fab522be0>, 'write': <dependencyGraph.Statement object at 0x7f2faa4ff610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2faa4ff6d0>, 'write': <dependencyGraph.Statement object at 0x7f2faa4ff790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2fab522be0>, 'write': <dependencyGraph.Statement object at 0x7f2faa4ff610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2faa4ff100>, <dependencyGraph.Codelet object at 0x7f2faa4ff940>, <dependencyGraph.Codelet object at 0x7f2faa4ff220>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2faa4ff100>, <dependencyGraph.Codelet object at 0x7f2faa4ff940>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 21 13 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 21, 13, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - metadata_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (0-metadata_lo)>0
    ( line =    bit condition_hi_s55 = (0 - metadata_lo) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi + register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi+register_hi)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi + register_hi_1) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp1;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 1  metadata_lo= p_pkt_10  metadata_hi= p_pkt_0  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 7 6 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 7, 6, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 20 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 20, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + register_hi ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+register_hi)<0
    ( line =    bit condition_lo_s67 = (metadata_lo + register_hi_1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_1 :  [<alus.SALU object at 0x7f2faa4fffa0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0), (2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x5980829e
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  1.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7f2faa4ffca0>, <alus.SALU object at 0x7f2faa4fffa0>, <alus.ALU object at 0x7f2faa4ffcd0>]
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f2faa4ffcd0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f2faa4ffca0>, 0), (<alus.SALU object at 0x7f2faa4fffa0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f2faa4ffca0>
 -* this SALU:  <alus.SALU object at 0x7f2faa4fffa0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f2faa4ffca0>
 -* this SALU:  <alus.SALU object at 0x7f2faa4fffa0>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7f2faa4ffca0>
 -* this SALU:  <alus.SALU object at 0x7f2faa4fffa0>
salu_configs:  [[0, 0], [0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(21)+(13)', 'condition_hi': '(0-ipv4.p__br_tmp1)>0', 'condition_lo': '((0+alu_hi)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(7)-(6)', 'update_hi_2_value': '(20)+(4)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(0)', 'update_lo_2_value': '(13)+(4)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '(ipv4.p_pkt_10+alu_hi)<0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(21)+(13)', 'condition_hi': '(0-ipv4.p__br_tmp1)>0', 'condition_lo': '((0+alu_hi)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(7)-(6)', 'update_hi_2_value': '(20)+(4)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(0)', 'update_lo_2_value': '(13)+(4)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '(ipv4.p_pkt_10+alu_hi)<0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(21)+(13)', 'condition_hi': '(0-ipv4.p__br_tmp1)>0', 'condition_lo': '((0+alu_hi)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(7)-(6)', 'update_hi_2_value': '(20)+(4)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(0)', 'update_lo_2_value': '(13)+(4)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '(ipv4.p_pkt_10+alu_hi)<0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [0, 1], [1, 0]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (ipv4.p_pkt_10+alu_hi)<0;
    condition_hi              : (((0-ipv4.p_pkt_10)+alu_lo)+1)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)+(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (13)+(4);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : (7)-(6);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (20)+(4);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0+alu_hi)+1)==0;
    condition_hi              : (0-ipv4.p__br_tmp1)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (21)+(13);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(5);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_0_action () {
    test_stateful_alu_2_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 2
table test_stateful_alu_2_0_table {
    actions {
        test_stateful_alu_2_0_action;
    }
    default_action: test_stateful_alu_2_0_action;
}

  
    
  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_2_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.8367071151733398 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fae16984be0>, 'write': <dependencyGraph.Statement object at 0x7fae15961610>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fae159616d0>, 'write': <dependencyGraph.Statement object at 0x7fae15961790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fae16984be0>, 'write': <dependencyGraph.Statement object at 0x7fae15961610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fae159616d0>, 'write': <dependencyGraph.Statement object at 0x7fae15961790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fae15961100>, <dependencyGraph.Codelet object at 0x7fae15961940>, <dependencyGraph.Codelet object at 0x7fae15961220>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fae15961100>, <dependencyGraph.Codelet object at 0x7fae15961940>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 30 22 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 30, 22, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-register_hi)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi - register_hi_1) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp1;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= p_pkt_10  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 0 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) + register_lo ) + 1 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)+register_lo)+1)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) + register_lo_0) + 1) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_1 :  [<alus.SALU object at 0x7fae15961fa0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0), (2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x5980829e
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  1.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7fae15961ca0>, <alus.SALU object at 0x7fae15961fa0>, <alus.ALU object at 0x7fae15961cd0>]
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fae15961cd0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7fae15961ca0>, 0), (<alus.SALU object at 0x7fae15961fa0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fae15961ca0>
 -* this SALU:  <alus.SALU object at 0x7fae15961fa0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fae15961ca0>
 -* this SALU:  <alus.SALU object at 0x7fae15961fa0>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7fae15961ca0>
 -* this SALU:  <alus.SALU object at 0x7fae15961fa0>
salu_configs:  [[0, 0], [0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-alu_hi)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)+(1)', 'update_hi_2_value': '(ipv4.p_pkt_10)-(alu_lo)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_hi)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)<0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+1)==0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-alu_hi)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)+(1)', 'update_hi_2_value': '(ipv4.p_pkt_10)-(alu_lo)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_hi)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)<0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+1)==0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-alu_hi)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)+(1)', 'update_hi_2_value': '(ipv4.p_pkt_10)-(alu_lo)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_hi)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)<0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+1)==0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [0, 1], [1, 0]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);   
        p__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p_pkt_10)+alu_lo)+1)==0;
    condition_hi              : (((0-ipv4.p_pkt_10)+alu_lo)+1)<0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)+(alu_hi);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (0)+(1);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_10)-(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_hi)+1)==0;
    condition_hi              : ((0-ipv4.p__br_tmp1)-alu_lo)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (30)+(22);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(5);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_0_action () {
    test_stateful_alu_2_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 2
table test_stateful_alu_2_0_table {
    actions {
        test_stateful_alu_2_0_action;
    }
    default_action: test_stateful_alu_2_0_action;
}

  
    
  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_2_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.9357054233551025 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f6c855e6be0>, 'write': <dependencyGraph.Statement object at 0x7f6c845c3610>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f6c845c36d0>, 'write': <dependencyGraph.Statement object at 0x7f6c845c3790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6c855e6be0>, 'write': <dependencyGraph.Statement object at 0x7f6c845c3610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6c845c36d0>, 'write': <dependencyGraph.Statement object at 0x7f6c845c3790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6c845c3070>, <dependencyGraph.Codelet object at 0x7f6c845c3940>, <dependencyGraph.Codelet object at 0x7f6c845c3190>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6c845c3940>, <dependencyGraph.Codelet object at 0x7f6c845c3070>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= p_pkt_10  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 28 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 28, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 0 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 0, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 8 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 8, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_hi - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_hi-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_hi - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_hi ) + 2 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_hi)+2)<0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_hi_1) + 2) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 30 22 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 30, 22, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - 0 ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-0)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi - 0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_0 :  [<alus.SALU object at 0x7f6c845c3ca0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0xaa638caf
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 1
T0_A_1 2
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  1.0
action:  0
num stages:  3
stage:  2.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7f6c845c3ca0>, <alus.SALU object at 0x7f6c845c3760>, <alus.ALU object at 0x7f6c845c3cd0>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
alu  1  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f6c845c3cd0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f6c845c3ca0>, 0), (<alus.SALU object at 0x7f6c845c3760>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f6c845c3ca0>
 -* this SALU:  <alus.SALU object at 0x7f6c845c3760>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f6c845c3ca0>
 -* this SALU:  <alus.SALU object at 0x7f6c845c3760>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7f6c845c3ca0>
 -* this SALU:  <alus.SALU object at 0x7f6c845c3760>
salu_configs:  [[0, 0], [1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(31)-(0)', 'update_hi_2_value': '(1)', 'update_lo_1_value': '(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(ipv4.p_pkt_10-alu_lo)>0', 'condition_lo': '((ipv4.p_pkt_0-alu_hi)+2)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-0)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(31)-(0)', 'update_hi_2_value': '(1)', 'update_lo_1_value': '(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(ipv4.p_pkt_10-alu_lo)>0', 'condition_lo': '((ipv4.p_pkt_0-alu_hi)+2)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-0)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(31)-(0)', 'update_hi_2_value': '(1)', 'update_lo_1_value': '(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(ipv4.p_pkt_10-alu_lo)>0', 'condition_lo': '((ipv4.p_pkt_0-alu_hi)+2)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-0)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [1, 0], [0, 1]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((ipv4.p_pkt_0-alu_hi)+2)<0;
    condition_hi              : (ipv4.p_pkt_10-alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (alu_hi);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (31)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-0)+1)==0;
    condition_hi              : ((0-ipv4.p__br_tmp1)-alu_lo)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (30)+(22);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(5);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_1_action () {
    test_stateful_alu_2_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 2
table test_stateful_alu_2_1_table {
    actions {
        test_stateful_alu_2_1_action;
    }
    default_action: test_stateful_alu_2_1_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_2_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.8752284049987793 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f13ef1436d0>, 'write': <dependencyGraph.Statement object at 0x7f13ef143790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f13f0166be0>, 'write': <dependencyGraph.Statement object at 0x7f13ef143610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f13ef1436d0>, 'write': <dependencyGraph.Statement object at 0x7f13ef143790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f13f0166be0>, 'write': <dependencyGraph.Statement object at 0x7f13ef143610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f13ef143100>, <dependencyGraph.Codelet object at 0x7f13ef143940>, <dependencyGraph.Codelet object at 0x7f13ef143220>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f13ef143100>, <dependencyGraph.Codelet object at 0x7f13ef143940>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 27 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 27, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 25 27 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 25, 27, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp1;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 1  metadata_lo= p_pkt_10  metadata_hi= p_pkt_0  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 28 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 28, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 0 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 0, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 0 16 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 0, 16, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 14 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+14)<0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 14) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_1 :  [<alus.SALU object at 0x7f13ef143fa0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0), (2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x5980829e
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  1.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7f13ef143ca0>, <alus.SALU object at 0x7f13ef143fa0>, <alus.ALU object at 0x7f13ef143cd0>]
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f13ef143cd0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f13ef143ca0>, 0), (<alus.SALU object at 0x7f13ef143fa0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f13ef143ca0>
 -* this SALU:  <alus.SALU object at 0x7f13ef143fa0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f13ef143ca0>
 -* this SALU:  <alus.SALU object at 0x7f13ef143fa0>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7f13ef143ca0>
 -* this SALU:  <alus.SALU object at 0x7f13ef143fa0>
salu_configs:  [[0, 0], [0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(27)', 'update_lo_1_value': '(27)-(25)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(28)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '((ipv4.p_pkt_10-alu_lo)+14)<0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(27)', 'update_lo_1_value': '(27)-(25)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(28)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '((ipv4.p_pkt_10-alu_lo)+14)<0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(27)', 'update_lo_1_value': '(27)-(25)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(28)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '((ipv4.p_pkt_10-alu_lo)+14)<0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [0, 1], [1, 0]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((ipv4.p_pkt_10-alu_lo)+14)<0;
    condition_hi              : (((0-ipv4.p_pkt_10)+alu_lo)+1)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : 1;
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : (28);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p__br_tmp1)+alu_lo)<0;
    condition_hi              : (((0-ipv4.p__br_tmp1)-alu_lo)+2)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (27)-(25);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (0)+(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (6)-(27);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_0_action () {
    test_stateful_alu_2_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 2
table test_stateful_alu_2_0_table {
    actions {
        test_stateful_alu_2_0_action;
    }
    default_action: test_stateful_alu_2_0_action;
}

  
    
  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_2_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.75726318359375 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fb6110126d0>, 'write': <dependencyGraph.Statement object at 0x7fb611012790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fb612035be0>, 'write': <dependencyGraph.Statement object at 0x7fb611012610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb6110126d0>, 'write': <dependencyGraph.Statement object at 0x7fb611012790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb612035be0>, 'write': <dependencyGraph.Statement object at 0x7fb611012610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb611012070>, <dependencyGraph.Codelet object at 0x7fb611012940>, <dependencyGraph.Codelet object at 0x7fb611012190>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb611012940>, <dependencyGraph.Codelet object at 0x7fb611012070>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= p_pkt_10  metadata_hi= p_pkt_0  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi 8 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 8, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 metadata_hi register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_hi, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) + register_lo ) + 31 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)+register_lo)+31)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) + register_lo_0) + 31) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 30 22 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 30, 22, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - 0 ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-0)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi - 0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_0 :  [<alus.SALU object at 0x7fb611012ca0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0xaa638caf
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 1
T0_A_1 2
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  1.0
action:  0
num stages:  3
stage:  2.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7fb611012ca0>, <alus.SALU object at 0x7fb611012760>, <alus.ALU object at 0x7fb611012cd0>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
alu  1  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fb611012cd0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7fb611012ca0>, 0), (<alus.SALU object at 0x7fb611012760>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fb611012ca0>
 -* this SALU:  <alus.SALU object at 0x7fb611012760>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fb611012ca0>
 -* this SALU:  <alus.SALU object at 0x7fb611012760>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7fb611012ca0>
 -* this SALU:  <alus.SALU object at 0x7fb611012760>
salu_configs:  [[0, 0], [1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(alu_hi)', 'condition_hi': '((0-ipv4.p_pkt_10)+alu_lo)<0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+31)<0', 'update_hi_1_predicate': '(condition_hi) or (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-0)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(alu_hi)', 'condition_hi': '((0-ipv4.p_pkt_10)+alu_lo)<0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+31)<0', 'update_hi_1_predicate': '(condition_hi) or (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-0)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(alu_hi)', 'condition_hi': '((0-ipv4.p_pkt_10)+alu_lo)<0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+31)<0', 'update_hi_1_predicate': '(condition_hi) or (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-0)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [1, 0], [0, 1]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+31)<0;
    condition_hi              : ((0-ipv4.p_pkt_10)+alu_lo)<0;
    update_lo_1_predicate     : (condition_hi) or (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_hi);
    update_hi_1_predicate     : (condition_hi) or (condition_lo);
    update_hi_1_value         : 1;
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-0)+1)==0;
    condition_hi              : ((0-ipv4.p__br_tmp1)-alu_lo)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (30)+(22);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(5);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_1_action () {
    test_stateful_alu_2_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 2
table test_stateful_alu_2_1_table {
    actions {
        test_stateful_alu_2_1_action;
    }
    default_action: test_stateful_alu_2_1_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_2_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.9043707847595215 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f79fcda46d0>, 'write': <dependencyGraph.Statement object at 0x7f79fcda4790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f79fddc7be0>, 'write': <dependencyGraph.Statement object at 0x7f79fcda4610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f79fcda46d0>, 'write': <dependencyGraph.Statement object at 0x7f79fcda4790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f79fddc7be0>, 'write': <dependencyGraph.Statement object at 0x7f79fcda4610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f79fcda4070>, <dependencyGraph.Codelet object at 0x7f79fcda4940>, <dependencyGraph.Codelet object at 0x7f79fcda4190>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f79fcda4940>, <dependencyGraph.Codelet object at 0x7f79fcda4070>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= p_pkt_10  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 2 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 2, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 6 14 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 14, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)+register_lo)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) + register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) + register_lo ) + 2 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)+register_lo)+2)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) + register_lo_0) + 2) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 14 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 14, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 30 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 30, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi + register_lo ) + 5 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi+register_lo)+5)<0
    ( line =    bit condition_lo_s67 = ((metadata_hi + register_lo_0) + 5) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_0 :  [<alus.SALU object at 0x7f79fcda4ca0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0xaa638caf
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 1
T0_A_1 2
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  1.0
action:  0
num stages:  3
stage:  2.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7f79fcda4ca0>, <alus.SALU object at 0x7f79fcda4760>, <alus.ALU object at 0x7f79fcda4cd0>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
alu  1  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f79fcda4cd0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f79fcda4ca0>, 0), (<alus.SALU object at 0x7f79fcda4760>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f79fcda4ca0>
 -* this SALU:  <alus.SALU object at 0x7f79fcda4760>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f79fcda4ca0>
 -* this SALU:  <alus.SALU object at 0x7f79fcda4760>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7f79fcda4ca0>
 -* this SALU:  <alus.SALU object at 0x7f79fcda4760>
salu_configs:  [[0, 0], [1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '1', 'update_hi_2_value': '(6)-(30)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+2) !=0', 'update_hi_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)-(5)', 'update_hi_2_value': '(3)-(14)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(0)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)==0', 'condition_lo': '((0+alu_lo)+5)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '1', 'update_hi_2_value': '(6)-(30)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+2) !=0', 'update_hi_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)-(5)', 'update_hi_2_value': '(3)-(14)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(0)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)==0', 'condition_lo': '((0+alu_lo)+5)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '1', 'update_hi_2_value': '(6)-(30)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '1', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+2) !=0', 'update_hi_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)-(5)', 'update_hi_2_value': '(3)-(14)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(30)+(0)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)==0', 'condition_lo': '((0+alu_lo)+5)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [1, 0], [0, 1]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_10)+alu_lo)+2) !=0;
    condition_hi              : (((0-ipv4.p_pkt_10)+alu_lo)+1)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p_pkt_0)-(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : 1;
    update_hi_1_predicate     :  not ((condition_hi) and (condition_lo));
    update_hi_1_value         : 1;
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (6)-(30);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0+alu_lo)+5)<0;
    condition_hi              : ((0-ipv4.p__br_tmp1)-alu_lo)==0;
    update_lo_1_predicate     :  not ((condition_hi) and (condition_lo));
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (30)+(0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(5);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (3)-(14);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_1_action () {
    test_stateful_alu_2_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 2
table test_stateful_alu_2_1_table {
    actions {
        test_stateful_alu_2_1_action;
    }
    default_action: test_stateful_alu_2_1_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_2_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.868262529373169 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f1fa40c86d0>, 'write': <dependencyGraph.Statement object at 0x7f1fa40c8790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f1fa50ebbe0>, 'write': <dependencyGraph.Statement object at 0x7f1fa40c8610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1fa40c86d0>, 'write': <dependencyGraph.Statement object at 0x7f1fa40c8790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1fa50ebbe0>, 'write': <dependencyGraph.Statement object at 0x7f1fa40c8610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1fa40c8100>, <dependencyGraph.Codelet object at 0x7f1fa40c8940>, <dependencyGraph.Codelet object at 0x7f1fa40c8220>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1fa40c8100>, <dependencyGraph.Codelet object at 0x7f1fa40c8940>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 18 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 18, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_hi)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 1  metadata_lo= p_pkt_10  metadata_hi= p_pkt_0  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 1 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi 31 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 31, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_hi ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_hi)+1)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_hi) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_1 :  [<alus.SALU object at 0x7f1fa40c8fa0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0), (2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x5980829e
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  1.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7f1fa40c8ca0>, <alus.SALU object at 0x7f1fa40c8fa0>, <alus.ALU object at 0x7f1fa40c8cd0>]
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f1fa40c8cd0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f1fa40c8ca0>, 0), (<alus.SALU object at 0x7f1fa40c8fa0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f1fa40c8ca0>
 -* this SALU:  <alus.SALU object at 0x7f1fa40c8fa0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f1fa40c8ca0>
 -* this SALU:  <alus.SALU object at 0x7f1fa40c8fa0>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7f1fa40c8ca0>
 -* this SALU:  <alus.SALU object at 0x7f1fa40c8fa0>
salu_configs:  [[0, 0], [0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p__br_tmp1)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(18)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_hi)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '1', 'update_hi_2_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_1_value': '(1)-(0)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+1)==0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p__br_tmp1)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(18)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_hi)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '1', 'update_hi_2_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_1_value': '(1)-(0)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+1)==0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p__br_tmp1)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(18)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_hi)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '1', 'update_hi_2_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_1_value': '(1)-(0)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+1)==0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [0, 1], [1, 0]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p_pkt_0)+1)==0;
    condition_hi              : (((0-ipv4.p_pkt_10)+alu_lo)+1)>0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (1)-(0);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : 1;
    update_hi_2_predicate     : false;
    update_hi_2_value         : (ipv4.p_pkt_0)-(0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p__br_tmp1)+alu_hi)==0;
    condition_hi              : ((0-ipv4.p__br_tmp1)-alu_lo)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p__br_tmp1)+(18);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (29)-(ipv4.p__br_tmp1);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (alu_hi)-(1);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_0_action () {
    test_stateful_alu_2_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 2
table test_stateful_alu_2_0_table {
    actions {
        test_stateful_alu_2_0_action;
    }
    default_action: test_stateful_alu_2_0_action;
}

  
    
  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_2_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.9916596412658691 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe8efdc26d0>, 'write': <dependencyGraph.Statement object at 0x7fe8efdc2790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe8f0de5be0>, 'write': <dependencyGraph.Statement object at 0x7fe8efdc2610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe8efdc26d0>, 'write': <dependencyGraph.Statement object at 0x7fe8efdc2790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe8f0de5be0>, 'write': <dependencyGraph.Statement object at 0x7fe8efdc2610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe8efdc2100>, <dependencyGraph.Codelet object at 0x7fe8efdc2940>, <dependencyGraph.Codelet object at 0x7fe8efdc2220>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe8efdc2100>, <dependencyGraph.Codelet object at 0x7fe8efdc2940>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 23 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 23, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 17 15 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 17, 15, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - 0 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-0)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - 0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 1  metadata_lo= p_pkt_10  metadata_hi= p_pkt_0  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 31 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 31, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 metadata_lo 3 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_lo, 3, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  1  and  0
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_1 :  [<alus.SALU object at 0x7fe8efdc2fa0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  1  and  0
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0), (2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x5980829e
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  1.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7fe8efdc2ca0>, <alus.SALU object at 0x7fe8efdc2fa0>, <alus.ALU object at 0x7fe8efdc2cd0>]
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fe8efdc2cd0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7fe8efdc2ca0>, 0), (<alus.SALU object at 0x7fe8efdc2fa0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fe8efdc2ca0>
 -* this SALU:  <alus.SALU object at 0x7fe8efdc2fa0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fe8efdc2ca0>
 -* this SALU:  <alus.SALU object at 0x7fe8efdc2fa0>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7fe8efdc2ca0>
 -* this SALU:  <alus.SALU object at 0x7fe8efdc2fa0>
salu_configs:  [[0, 0], [0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(0)', 'update_hi_2_value': '(0)-(23)', 'update_lo_1_value': '(17)-(15)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(ipv4.p__br_tmp1-0)>0', 'condition_lo': '((ipv4.p__br_tmp1-alu_lo)+1) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(31)', 'update_hi_2_value': '1', 'update_lo_1_value': '(3)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)==0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_lo)', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '(0)', 'update_hi_2_value': '(0)-(23)', 'update_lo_1_value': '(17)-(15)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(ipv4.p__br_tmp1-0)>0', 'condition_lo': '((ipv4.p__br_tmp1-alu_lo)+1) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(31)', 'update_hi_2_value': '1', 'update_lo_1_value': '(3)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)==0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_lo)', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '(0)', 'update_hi_2_value': '(0)-(23)', 'update_lo_1_value': '(17)-(15)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(ipv4.p__br_tmp1-0)>0', 'condition_lo': '((ipv4.p__br_tmp1-alu_lo)+1) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(31)', 'update_hi_2_value': '1', 'update_lo_1_value': '(3)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)==0', 'condition_lo': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_lo)', 'output_value': '0'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [0, 1], [1, 0]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p_pkt_10)+alu_lo)+1)>0;
    condition_hi              : (((0-ipv4.p_pkt_10)+alu_lo)+1)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (3);
    update_lo_2_predicate     :  not (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (31);
    update_hi_2_predicate     :  not (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((ipv4.p__br_tmp1-alu_lo)+1) !=0;
    condition_hi              : (ipv4.p__br_tmp1-0)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (17)-(15);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(23);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_0_action () {
    test_stateful_alu_2_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 2
table test_stateful_alu_2_0_table {
    actions {
        test_stateful_alu_2_0_action;
    }
    default_action: test_stateful_alu_2_0_action;
}

  
    
  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_2_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.9469587802886963 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe24da276d0>, 'write': <dependencyGraph.Statement object at 0x7fe24da27790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe24ea4abe0>, 'write': <dependencyGraph.Statement object at 0x7fe24da27610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe24da276d0>, 'write': <dependencyGraph.Statement object at 0x7fe24da27790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe24ea4abe0>, 'write': <dependencyGraph.Statement object at 0x7fe24da27610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe24da27070>, <dependencyGraph.Codelet object at 0x7fe24da27940>, <dependencyGraph.Codelet object at 0x7fe24da27190>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe24da27940>, <dependencyGraph.Codelet object at 0x7fe24da27070>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= p_pkt_10  metadata_hi= p_pkt_0  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 23 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 23, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_lo 8 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_lo, 8, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 19 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 19, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( register_hi + 8 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (register_hi+8)<0
    ( line =    bit condition_lo_s67 = (register_hi_1 + 8) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 31 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 31, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 9 24 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 9, 24, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 14 18 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 14, 18, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 31 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+31)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 31) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_0 :  [<alus.SALU object at 0x7fe24da27ca0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
# alus: =  3
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  2  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (2, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0xaa638caf
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 1
T0_A_1 2
T0_A_2 -0
************************************************
Obj: 2
number of stages:  3
stage:  1.0
action:  0
num stages:  3
stage:  2.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
================P4Codegen
[<alus.SALU object at 0x7fe24da27ca0>, <alus.SALU object at 0x7fe24da27760>, <alus.ALU object at 0x7fe24da27cd0>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
alu  1  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fe24da27cd0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7fe24da27ca0>, 0), (<alus.SALU object at 0x7fe24da27760>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  2 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  3
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fe24da27ca0>
 -* this SALU:  <alus.SALU object at 0x7fe24da27760>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fe24da27ca0>
 -* this SALU:  <alus.SALU object at 0x7fe24da27760>
 - curr_stage:  2
 -* this SALU:  <alus.SALU object at 0x7fe24da27ca0>
 -* this SALU:  <alus.SALU object at 0x7fe24da27760>
salu_configs:  [[0, 0], [1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(23)-(29)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '(alu_lo)-(19)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '(alu_hi+8)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)-(31)', 'update_hi_2_value': '(9)-(24)', 'update_lo_1_value': '(14)+(18)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+31)<0', 'condition_lo': '((0-ipv4.p__br_tmp1)-alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(23)-(29)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '(alu_lo)-(19)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '(alu_hi+8)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)-(31)', 'update_hi_2_value': '(9)-(24)', 'update_lo_1_value': '(14)+(18)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+31)<0', 'condition_lo': '((0-ipv4.p__br_tmp1)-alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(23)-(29)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '(alu_lo)-(19)', 'condition_hi': '(((0-ipv4.p_pkt_10)+alu_lo)+1)>0', 'condition_lo': '(alu_hi+8)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)-(31)', 'update_hi_2_value': '(9)-(24)', 'update_lo_1_value': '(14)+(18)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+31)<0', 'condition_lo': '((0-ipv4.p__br_tmp1)-alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0, 0], [1, 0], [0, 1]]
num pipeline stages:  3
num_state_groups:  2
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (alu_hi+8)<0;
    condition_hi              : (((0-ipv4.p_pkt_10)+alu_lo)+1)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)-(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(19);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (23)-(29);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_2_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p__br_tmp1)-alu_lo)<0;
    condition_hi              : (((0-ipv4.p__br_tmp1)-alu_lo)+31)<0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (14)+(18);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (1)-(31);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (9)-(24);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_2_1_action () {
    test_stateful_alu_2_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_2_1_table
@pragma stage 2
table test_stateful_alu_2_1_table {
    actions {
        test_stateful_alu_2_1_action;
    }
    default_action: test_stateful_alu_2_1_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  

  

  

  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
      
        
      
    
      
        
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
      
        
      
      
        
      
        
          apply(test_stateful_alu_2_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.053168773651123 s
preprocessor time:
