running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_1_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fae49d376d0>, 'write': <dependencyGraph.Statement object at 0x7fae49d371f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fae4ad59be0>, 'write': <dependencyGraph.Statement object at 0x7fae49d37790>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fae49d376d0>, 'write': <dependencyGraph.Statement object at 0x7fae49d371f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fae4ad59be0>, 'write': <dependencyGraph.Statement object at 0x7fae49d37790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fae49d37ac0>, <dependencyGraph.Codelet object at 0x7fae49d37af0>, <dependencyGraph.Codelet object at 0x7fae49d37b80>, <dependencyGraph.Codelet object at 0x7fae49d37bb0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fae49d37ac0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_4', 'p_pkt_3']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_4', 'metadata_hi': 'p_pkt_3', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_002;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp7;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

curr line: 	p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

curr line: 	p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

curr line: 	p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

curr line: 	state_0 = p_state_002;

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_4  metadata_hi= p_pkt_3  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 31 29 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 31, 29, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_hi - register_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_hi-register_hi)<0
    ( line =    bit condition_hi_s55 = (metadata_hi - register_hi_1) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_10;

 > FOUND OUT LINE : 	_out[0] = p_pkt_10;

curr line: 	_out[1] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[1] = p__br_tmp5;

curr line: 	_out[2] = p_pkt_10;

 > FOUND OUT LINE : 	_out[2] = p_pkt_10;

> found out variable:  p_pkt_10
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_10
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p_pkt_10
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 22 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 22, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 2 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+2)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 2) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_20;

 > FOUND OUT LINE : 	_out[0] = p_pkt_20;

curr line: 	_out[1] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[1] = p__br_tmp5;

curr line: 	_out[2] = p_pkt_20;

 > FOUND OUT LINE : 	_out[2] = p_pkt_20;

> found out variable:  p_pkt_20
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_20
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p_pkt_20
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 22 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 22, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 2 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+2)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 2) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_5_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fae49d37850>, <alus.SALU object at 0x7fae49d6b370>, <alus.SALU object at 0x7fae49d6b1c0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7fae49d37850>, 0), (<alus.SALU object at 0x7fae49d6b370>, 1), (<alus.SALU object at 0x7fae49d6b1c0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_20
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fae49d37850>
 -* this SALU:  <alus.SALU object at 0x7fae49d6b370>
 -* this SALU:  <alus.SALU object at 0x7fae49d6b1c0>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_3)+(0)', 'update_hi_2_value': '(31)-(29)', 'update_lo_1_value': '(ipv4.p_pkt_4)', 'update_lo_2_value': '(ipv4.p_pkt_4)-(0)', 'condition_hi': '(ipv4.p_pkt_3-alu_hi)<0', 'condition_lo': '((0-ipv4.p_pkt_4)+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) or (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p_pkt_10', 'update_hi_1_value': '(22)-(0)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_1_value': '(0)-(13)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+2) !=0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_20', 'update_hi_1_value': '(22)-(0)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_1_value': '(0)-(13)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+2) !=0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': '0'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_4 : 32 (signed);   
        p_pkt_10 : 32 (signed);   
        p_pkt_3 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_20 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_4)+alu_lo)==0;
    condition_hi              : (ipv4.p_pkt_3-alu_hi)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_4);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p_pkt_4)-(0);
    update_hi_1_predicate     : (condition_hi) or (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_3)+(0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (31)-(29);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+2) !=0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)-(13);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (22)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (ipv4.p_pkt_0)-(alu_hi);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_10;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+2) !=0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)-(13);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (22)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (ipv4.p_pkt_0)-(alu_hi);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_20;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.224270820617676 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_2_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f0f281aebe0>, 'write': <dependencyGraph.Statement object at 0x7f0f2718b790>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f0f2718b6d0>, 'write': <dependencyGraph.Statement object at 0x7f0f2718b190>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0f281aebe0>, 'write': <dependencyGraph.Statement object at 0x7f0f2718b790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f0f2718b6d0>, 'write': <dependencyGraph.Statement object at 0x7f0f2718b190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0f2718bac0>, <dependencyGraph.Codelet object at 0x7f0f2718baf0>, <dependencyGraph.Codelet object at 0x7f0f2718bb80>, <dependencyGraph.Codelet object at 0x7f0f2718bbb0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0f2718bac0>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp7;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

curr line: 	p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

curr line: 	p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

curr line: 	p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

curr line: 	state_0 = p_state_002;

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = state_1;

 > FOUND OUT LINE : 	_out[1] = state_1;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_3  metadata_hi= p_pkt_4  register_lo= state_0  register_hi= state_1  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 2 9 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 2, 9, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi - register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi-register_hi)==0
    ( line =    bit condition_lo_s67 = (metadata_hi - register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_10;

 > FOUND OUT LINE : 	_out[0] = p_pkt_10;

curr line: 	_out[1] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[1] = p__br_tmp5;

curr line: 	_out[2] = p_pkt_10;

 > FOUND OUT LINE : 	_out[2] = p_pkt_10;

> found out variable:  p_pkt_10
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_10
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p_pkt_10
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 3 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 26 24 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 26, 24, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = register_lo > 0
process_salu_function: parsing  condition_hi ; rhs =  register_lo>0
    ( line =    bit condition_hi_s55 = register_lo_0 > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_4_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_20;

 > FOUND OUT LINE : 	_out[0] = p_pkt_20;

curr line: 	_out[1] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[1] = p__br_tmp5;

curr line: 	_out[2] = p_pkt_20;

 > FOUND OUT LINE : 	_out[2] = p_pkt_20;

> found out variable:  p_pkt_20
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_20
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p_pkt_20
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 11 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 11, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 23 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 23, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_5_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_5_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f0f2718b850>, <alus.SALU object at 0x7f0f271c0370>, <alus.SALU object at 0x7f0f271c01c0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f0f2718b850>, 0), (<alus.SALU object at 0x7f0f271c0370>, 1), (<alus.SALU object at 0x7f0f271c01c0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_20
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f0f2718b850>
 -* this SALU:  <alus.SALU object at 0x7f0f271c0370>
 -* this SALU:  <alus.SALU object at 0x7f0f271c01c0>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_4)-(0)', 'update_hi_2_value': '(2)', 'update_lo_1_value': '(ipv4.p_pkt_3)-(0)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((ipv4.p_pkt_3-alu_lo)+1)>0', 'condition_lo': '(ipv4.p_pkt_4-alu_hi)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '( not (condition_hi)) or (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p_pkt_10', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '(24)-(26)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_lo)', 'condition_hi': 'alu_lo>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p_pkt_20', 'update_hi_1_value': '0', 'update_hi_2_value': '(0)+(alu_lo)', 'update_lo_1_value': '(23)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_3 : 32 (signed);   
        p_pkt_20 : 32 (signed);   
        p_pkt_4 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (ipv4.p_pkt_4-alu_hi)==0;
    condition_hi              : ((ipv4.p_pkt_3-alu_lo)+1)>0;
    update_lo_1_predicate     : ( not (condition_hi)) or (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_3)-(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_4)-(0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+1)==0;
    condition_hi              : alu_lo>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (24)-(26);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (ipv4.p_pkt_0)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (3)-(10);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (0)-(6);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p_pkt_10;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (23)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : 0;
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (0)+(alu_lo);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p_pkt_20;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.283473253250122 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_3_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp7 = p_pkt_0<0;

lhs p__br_tmp7 rhs p_pkt_0<0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp7 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_0']
p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp7 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_0']
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp8 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_3', 'p_state_000']
p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp9 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp9 ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp9 ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp7 = p_pkt_0<0; p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);
RAW p__br_tmp7 = p_pkt_0<0; p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);
RAW p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000); p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f20bfdb0be0>, 'write': <dependencyGraph.Statement object at 0x7f20bed8d790>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f20bed8d6d0>, 'write': <dependencyGraph.Statement object at 0x7f20bed8d190>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f20bfdb0be0>, 'write': <dependencyGraph.Statement object at 0x7f20bed8d790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f20bed8d6d0>, 'write': <dependencyGraph.Statement object at 0x7f20bed8d190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);
v p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp7 = p_pkt_0<0 stmts len 1
p__br_tmp7 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f20bed8dac0>, <dependencyGraph.Codelet object at 0x7f20bed8daf0>, <dependencyGraph.Codelet object at 0x7f20bed8db80>, <dependencyGraph.Codelet object at 0x7f20bed8dbb0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);
p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);
p__br_tmp7 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f20bed8dac0>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_101', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000) p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp7 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);
u:  p__br_tmp7 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp9;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp8;

curr line: 	int p_state_001;

curr line: 	int p_state_100;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

curr line: 	p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);

curr line: 	p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

curr line: 	p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);

curr line: 	p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);

curr line: 	state_0 = p_state_002;

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = state_1;

 > FOUND OUT LINE : 	_out[1] = state_1;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_3  metadata_hi= p_pkt_4  register_lo= state_0  register_hi= state_1  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)<0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( metadata_hi - register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi-register_hi)==0
    ( line =    bit condition_lo_s67 = (metadata_hi - register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp7;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp7 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_10;

 > FOUND OUT LINE : 	_out[0] = p_pkt_10;

curr line: 	_out[1] = p__br_tmp7;

 > FOUND OUT LINE : 	_out[1] = p__br_tmp7;

curr line: 	_out[2] = p_pkt_10;

 > FOUND OUT LINE : 	_out[2] = p_pkt_10;

> found out variable:  p_pkt_10
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_10
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p_pkt_10
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 11 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 11, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 23 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 23, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_4_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp7_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp7_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp7_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp7_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp7_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp7;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp7 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp7;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp7;

curr line: 	_out[1] = p_pkt_20;

 > FOUND OUT LINE : 	_out[1] = p_pkt_20;

curr line: 	_out[2] = p__br_tmp7;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp7;

> found out variable:  p__br_tmp7
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp7
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp7
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 28 30 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 28, 30, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 18 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 18, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_5_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p__br_tmp7_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p__br_tmp7_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f20bed8d850>, <alus.SALU object at 0x7f20bedc2370>, <alus.SALU object at 0x7f20bedc21c0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f20bed8d850>, 0), (<alus.SALU object at 0x7f20bedc2370>, 1), (<alus.SALU object at 0x7f20bedc21c0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp7
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f20bed8d850>
 -* this SALU:  <alus.SALU object at 0x7f20bedc2370>
 -* this SALU:  <alus.SALU object at 0x7f20bedc21c0>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_3)', 'update_hi_2_value': '(ipv4.p_pkt_4)+(0)', 'update_lo_1_value': '(ipv4.p_pkt_3)', 'update_lo_2_value': '(ipv4.p_pkt_3)', 'condition_hi': '(ipv4.p_pkt_3-alu_lo)<0', 'condition_lo': '(ipv4.p_pkt_4-alu_hi)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p_pkt_10', 'update_hi_1_value': '0', 'update_hi_2_value': '(0)+(alu_lo)', 'update_lo_1_value': '(23)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp7', 'update_hi_1_value': '(28)', 'update_hi_2_value': '(ipv4.p_pkt_0)+(alu_hi)', 'update_lo_1_value': '(alu_lo)-(18)', 'update_lo_2_value': '(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);   
        p_pkt_3 : 32 (signed);   
        p__br_tmp7 : 32 (signed);   
        p_pkt_4 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (ipv4.p_pkt_4-alu_hi)==0;
    condition_hi              : (ipv4.p_pkt_3-alu_lo)<0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_3);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_3);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (ipv4.p_pkt_3);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (ipv4.p_pkt_4)+(0);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (23)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : 0;
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (0)+(alu_lo);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p_pkt_10;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (alu_lo)-(18);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (28);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_0)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp7;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.3577933311462402 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_4_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fea7d67f6d0>, 'write': <dependencyGraph.Statement object at 0x7fea7d67f190>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fea7e6a2be0>, 'write': <dependencyGraph.Statement object at 0x7fea7d67f790>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fea7d67f6d0>, 'write': <dependencyGraph.Statement object at 0x7fea7d67f190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fea7e6a2be0>, 'write': <dependencyGraph.Statement object at 0x7fea7d67f790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fea7d67fac0>, <dependencyGraph.Codelet object at 0x7fea7d67faf0>, <dependencyGraph.Codelet object at 0x7fea7d67fb80>, <dependencyGraph.Codelet object at 0x7fea7d67fbb0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fea7d67fac0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_4', 'p_pkt_3']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_4', 'metadata_hi': 'p_pkt_3', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp7;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

curr line: 	p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

curr line: 	p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

curr line: 	p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

curr line: 	state_0 = p_state_002;

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_4  metadata_hi= p_pkt_3  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 1 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 1, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 23 23 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 23, 23, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - register_hi ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-register_hi)+1)>0
    ( line =    bit condition_lo_s67 = ((metadata_hi - register_hi_1) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp5;

curr line: 	_out[1] = p_pkt_10;

 > FOUND OUT LINE : 	_out[1] = p_pkt_10;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 28 30 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 28, 30, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 18 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 18, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_4_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_1.sk.out
['comp_4']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp5;

curr line: 	_out[1] = p_pkt_20;

 > FOUND OUT LINE : 	_out[1] = p_pkt_20;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 28 30 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 28, 30, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 18 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 18, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_5_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fea7d67f850>, <alus.SALU object at 0x7fea7d6b4370>, <alus.SALU object at 0x7fea7d6b41c0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7fea7d67f850>, 0), (<alus.SALU object at 0x7fea7d6b4370>, 1), (<alus.SALU object at 0x7fea7d6b41c0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fea7d67f850>
 -* this SALU:  <alus.SALU object at 0x7fea7d6b4370>
 -* this SALU:  <alus.SALU object at 0x7fea7d6b41c0>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_3)', 'update_hi_2_value': '(3)', 'update_lo_1_value': '(23)-(23)', 'update_lo_2_value': '(ipv4.p_pkt_4)', 'condition_hi': '((0-ipv4.p_pkt_4)+alu_lo)==0', 'condition_lo': '((ipv4.p_pkt_3-alu_hi)+1)>0', 'update_hi_1_predicate': '(condition_hi) or ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(28)', 'update_hi_2_value': '(ipv4.p_pkt_0)+(alu_hi)', 'update_lo_1_value': '(alu_lo)-(18)', 'update_lo_2_value': '(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(28)', 'update_hi_2_value': '(ipv4.p_pkt_0)+(alu_hi)', 'update_lo_1_value': '(alu_lo)-(18)', 'update_lo_2_value': '(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_3 : 32 (signed);   
        p__br_tmp5 : 32 (signed);   
        p_pkt_4 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((ipv4.p_pkt_3-alu_hi)+1)>0;
    condition_hi              : ((0-ipv4.p_pkt_4)+alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (23)-(23);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_4);
    update_hi_1_predicate     : (condition_hi) or ( not (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_3);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (3);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (alu_lo)-(18);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (28);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_0)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (alu_lo)-(18);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (28);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_0)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.089049816131592 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_5_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f704651a6d0>, 'write': <dependencyGraph.Statement object at 0x7f704651a1f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f704753dbe0>, 'write': <dependencyGraph.Statement object at 0x7f704651a790>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f704651a6d0>, 'write': <dependencyGraph.Statement object at 0x7f704651a1f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f704753dbe0>, 'write': <dependencyGraph.Statement object at 0x7f704651a790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f704651aac0>, <dependencyGraph.Codelet object at 0x7f704651aaf0>, <dependencyGraph.Codelet object at 0x7f704651ab80>, <dependencyGraph.Codelet object at 0x7f704651abb0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f704651aac0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_002', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp7;

curr line: 	int p_state_002;

curr line: 	int p_state_001;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp6;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

curr line: 	p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

curr line: 	p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

curr line: 	p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

curr line: 	state_0 = p_state_002;

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_3  metadata_hi= p_pkt_4  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 6 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 6, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi 30 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 30, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_lo ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_lo)!=0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_lo_0) != 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_hi ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_hi)+1)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_hi_1) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_5_stateless_p__br_tmp5_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp5;

curr line: 	_out[1] = p_pkt_20;

 > FOUND OUT LINE : 	_out[1] = p_pkt_20;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 22 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 22, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 2 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 2, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo+register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo + register_lo ) + 31 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo+register_lo)+31)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo + register_lo_0) + 31) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  true
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_5_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p__br_tmp5_bnd_1.sk.out
['comp_5']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp5;

curr line: 	_out[1] = p_pkt_10;

 > FOUND OUT LINE : 	_out[1] = p_pkt_10;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 22 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 22, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 2 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 2, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo+register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo + register_lo ) + 31 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo+register_lo)+31)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo + register_lo_0) + 31) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  true
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_4_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f704651a850>, <alus.SALU object at 0x7f704654f370>, <alus.SALU object at 0x7f704654f1c0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f704651a850>, 0), (<alus.SALU object at 0x7f704654f370>, 1), (<alus.SALU object at 0x7f704654f1c0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
Illegal character '~'
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f704651a850>
 -* this SALU:  <alus.SALU object at 0x7f704654f370>
 -* this SALU:  <alus.SALU object at 0x7f704654f1c0>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '1', 'update_hi_2_value': '(ipv4.p_pkt_3)', 'update_lo_1_value': '(ipv4.p_pkt_4)-(0)', 'update_lo_2_value': '(ipv4.p_pkt_4)+(30)', 'condition_hi': '((0-ipv4.p_pkt_4)+alu_lo) !=0', 'condition_lo': '((ipv4.p_pkt_3-alu_hi)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '((condition_hi) and (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(22)-(0)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(13)', 'update_lo_2_value': '(2)', 'condition_hi': '(ipv4.p_pkt_0+alu_lo)>0', 'condition_lo': '((ipv4.p_pkt_0+alu_lo)+31) !=0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': 'true', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(22)-(0)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(13)', 'update_lo_2_value': '(2)', 'condition_hi': '(ipv4.p_pkt_0+alu_lo)>0', 'condition_lo': '((ipv4.p_pkt_0+alu_lo)+31) !=0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': 'true', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': 'alu_hi'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp5 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_3 : 32 (signed);   
        p_pkt_4 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((ipv4.p_pkt_3-alu_hi)+1)>0;
    condition_hi              : ((0-ipv4.p_pkt_4)+alu_lo) !=0;
    update_lo_1_predicate     :  not ((condition_hi) and (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_4)-(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p_pkt_4)+(30);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 1;
    update_hi_2_predicate     : ((condition_hi) and (condition_lo));
    update_hi_2_value         : (ipv4.p_pkt_3);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((ipv4.p_pkt_0+alu_lo)+31) !=0;
    condition_hi              : (ipv4.p_pkt_0+alu_lo)>0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0)-(13);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (2);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (22)-(0);
    update_hi_2_predicate     : true;
    update_hi_2_value         : (ipv4.p_pkt_0)-(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((ipv4.p_pkt_0+alu_lo)+31) !=0;
    condition_hi              : (ipv4.p_pkt_0+alu_lo)>0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0)-(13);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (2);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (22)-(0);
    update_hi_2_predicate     : true;
    update_hi_2_value         : (ipv4.p_pkt_0)-(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.1400046348571777 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_6_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp9 = p_pkt_0<0;

lhs p__br_tmp9 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp9 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp9 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_0']
p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp9 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_0']
p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp11 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp11 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_pkt_3', 'p_state_000']
p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp12 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp12 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp12', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp12 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp12', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp9 = p_pkt_0<0; p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);
RAW p__br_tmp9 = p_pkt_0<0; p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);
RAW p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000); p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f28488876d0>, 'write': <dependencyGraph.Statement object at 0x7f2848887190>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f28498aabe0>, 'write': <dependencyGraph.Statement object at 0x7f2848887790>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f28488876d0>, 'write': <dependencyGraph.Statement object at 0x7f2848887190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f28498aabe0>, 'write': <dependencyGraph.Statement object at 0x7f2848887790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);
v p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp9 = p_pkt_0<0 stmts len 1
p__br_tmp9 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2848887ac0>, <dependencyGraph.Codelet object at 0x7f2848887af0>, <dependencyGraph.Codelet object at 0x7f2848887b80>, <dependencyGraph.Codelet object at 0x7f2848887bb0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);
p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);
p__br_tmp9 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2848887ac0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_100', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000) p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
u:  p__br_tmp9 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);
u:  p__br_tmp9 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp11;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp12;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

curr line: 	p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);

curr line: 	p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

curr line: 	p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);

curr line: 	p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);

curr line: 	state_0 = p_state_002;

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_3  metadata_hi= p_pkt_4  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 17 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 17, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_lo)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_hi ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_hi)<0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_hi_1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp9_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp9_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp9_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp9_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp9_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp9;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp9 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp9;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp9;

curr line: 	_out[1] = p_pkt_20;

 > FOUND OUT LINE : 	_out[1] = p_pkt_20;

curr line: 	_out[2] = p__br_tmp9;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp9;

> found out variable:  p__br_tmp9
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp9
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp9
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 28 30 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 28, 30, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 18 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 18, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_5_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p__br_tmp9_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p__br_tmp9_bnd_1.sk.out
['comp_5']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp9;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp9 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp9;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp9;

curr line: 	_out[1] = p_pkt_10;

 > FOUND OUT LINE : 	_out[1] = p_pkt_10;

curr line: 	_out[2] = p__br_tmp9;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp9;

> found out variable:  p__br_tmp9
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp9
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp9
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 31 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 26 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 26, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = register_lo == 0
process_salu_function: parsing  condition_hi ; rhs =  register_lo==0
    ( line =    bit condition_hi_s55 = register_lo_0 == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)!=0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_4_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f2848887850>, <alus.SALU object at 0x7f28488bb370>, <alus.SALU object at 0x7f28488bb1c0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f2848887850>, 0), (<alus.SALU object at 0x7f28488bb370>, 1), (<alus.SALU object at 0x7f28488bb1c0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp9
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp9
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f2848887850>
 -* this SALU:  <alus.SALU object at 0x7f28488bb370>
 -* this SALU:  <alus.SALU object at 0x7f28488bb1c0>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_3)', 'update_hi_2_value': '(ipv4.p_pkt_3)', 'update_lo_1_value': '(ipv4.p_pkt_4)', 'update_lo_2_value': '(alu_lo)-(0)', 'condition_hi': '((0-ipv4.p_pkt_4)+alu_lo)==0', 'condition_lo': '(ipv4.p_pkt_3-alu_hi)<0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp9', 'update_hi_1_value': '(28)', 'update_hi_2_value': '(ipv4.p_pkt_0)+(alu_hi)', 'update_lo_1_value': '(alu_lo)-(18)', 'update_lo_2_value': '(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp9', 'update_hi_1_value': '(ipv4.p_pkt_0)+(3)', 'update_hi_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_1_value': '(31)+(alu_hi)', 'update_lo_2_value': '(0)-(26)', 'condition_hi': 'alu_lo==0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo) !=0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp9 : 32 (signed);   
        p_pkt_4 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_3 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (ipv4.p_pkt_3-alu_hi)<0;
    condition_hi              : ((0-ipv4.p_pkt_4)+alu_lo)==0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_4);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(0);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (ipv4.p_pkt_3);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_3);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (alu_lo)-(18);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (28);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_0)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp9;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p_pkt_0)+alu_lo) !=0;
    condition_hi              : alu_lo==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (31)+(alu_hi);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (0)-(26);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : (ipv4.p_pkt_0)+(3);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp9;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.1273491382598877 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_7_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp6 = p_pkt_0<0;

lhs p__br_tmp6 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp6 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0']
p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp6 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0']
p__br_tmp7 = p_pkt_3<p_state_000;

lhs p__br_tmp7 rhs p_pkt_3<p_state_000
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = p_pkt_3<p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_000']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);

lhs p__br_tmp8 rhs (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001', 'p_pkt_4', 'p_state_101']
p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp8 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_3', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp7 = p_pkt_3<p_state_000;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp6 = p_pkt_0<0; p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = p_pkt_0<0; p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);
RAW p__br_tmp7 = p_pkt_3<p_state_000; p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp7 = p_pkt_3<p_state_000; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000); p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
RAW p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
RAW p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101); p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);
RAW p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7effdbc9c6d0>, 'write': <dependencyGraph.Statement object at 0x7effdbc9c190>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7effdccbfbe0>, 'write': <dependencyGraph.Statement object at 0x7effdbc9c820>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7effdbc9c6d0>, 'write': <dependencyGraph.Statement object at 0x7effdbc9c190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7effdccbfbe0>, 'write': <dependencyGraph.Statement object at 0x7effdbc9c820>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp7 = p_pkt_3<p_state_000 stmts len 1
p__br_tmp7 = p_pkt_3<p_state_000;
v p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101) stmts len 1
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
v p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp6 = p_pkt_0<0 stmts len 1
p__br_tmp6 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7effdbc9cac0>, <dependencyGraph.Codelet object at 0x7effdbc9caf0>, <dependencyGraph.Codelet object at 0x7effdbc9cb80>, <dependencyGraph.Codelet object at 0x7effdbc9cbb0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp7 = p_pkt_3<p_state_000;
p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
state_1 = p_state_101;
p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);
p__br_tmp6 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7effdbc9cac0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp7 = p_pkt_3<p_state_000 p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101) state_1 = p_state_101 p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp6 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);
u:  p__br_tmp6 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_4', 'p_pkt_3']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_4', 'metadata_hi': 'p_pkt_3', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp7;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp8;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp7 = p_pkt_3<p_state_000;

curr line: 	p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);

curr line: 	p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

curr line: 	p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_4  metadata_hi= p_pkt_3  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_hi ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_hi)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_hi_1) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)!=0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp6_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp6_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp6_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp6_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp6_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp6 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp6;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp6;

curr line: 	_out[1] = p_pkt_10;

 > FOUND OUT LINE : 	_out[1] = p_pkt_10;

curr line: 	_out[2] = p__br_tmp6;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp6;

> found out variable:  p__br_tmp6
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp6
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp6
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 23 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 23, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 21 31 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 21, 31, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 10 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 10, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( register_lo + 8 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (register_lo+8)<0
    ( line =    bit condition_hi_s55 = (register_lo_0 + 8) < 0;
  )
demangled line:  bit condition_lo = register_lo != 0
process_salu_function: parsing  condition_lo ; rhs =  register_lo!=0
    ( line =    bit condition_lo_s67 = register_lo_0 != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_4_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp6_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp6_bnd_1.sk.out
['comp_4']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp6_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp6_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp6_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp6_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp6_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp6 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp6;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp6;

curr line: 	_out[1] = p_pkt_20;

 > FOUND OUT LINE : 	_out[1] = p_pkt_20;

curr line: 	_out[2] = p__br_tmp6;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp6;

> found out variable:  p__br_tmp6
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp6
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp6
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 22 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 22, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 2 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 2, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( register_lo + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (register_lo+1)!=0
    ( line =    bit condition_lo_s67 = (register_lo_0 + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  true
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_5_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p__br_tmp6_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p__br_tmp6_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7effdbc9c850>, <alus.SALU object at 0x7effdbcd0370>, <alus.SALU object at 0x7effdbcd0460>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7effdbc9c850>, 0), (<alus.SALU object at 0x7effdbcd0370>, 1), (<alus.SALU object at 0x7effdbcd0460>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp6
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp6
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7effdbc9c850>
 -* this SALU:  <alus.SALU object at 0x7effdbcd0370>
 -* this SALU:  <alus.SALU object at 0x7effdbcd0460>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_3)-(0)', 'update_hi_2_value': '(ipv4.p_pkt_3)+(0)', 'update_lo_1_value': '(ipv4.p_pkt_4)', 'update_lo_2_value': '(ipv4.p_pkt_4)+(0)', 'condition_hi': '((0-ipv4.p_pkt_3)+alu_hi)>0', 'condition_lo': '(ipv4.p_pkt_4-alu_lo) !=0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp6', 'update_hi_1_value': '(ipv4.p_pkt_0)-(0)', 'update_hi_2_value': '(23)-(alu_hi)', 'update_lo_1_value': '(21)+(31)', 'update_lo_2_value': '(alu_hi)', 'condition_hi': '(alu_lo+8)<0', 'condition_lo': 'alu_lo !=0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp6', 'update_hi_1_value': '(22)-(0)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_1_value': '(0)-(13)', 'update_lo_2_value': '(2)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'condition_lo': '(alu_lo+1) !=0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': 'true', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': 'alu_hi'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_4 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p__br_tmp6 : 32 (signed);   
        p_pkt_3 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (ipv4.p_pkt_4-alu_lo) !=0;
    condition_hi              : ((0-ipv4.p_pkt_3)+alu_hi)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_4);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_4)+(0);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_3)-(0);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (ipv4.p_pkt_3)+(0);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : alu_lo !=0;
    condition_hi              : (alu_lo+8)<0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (21)+(31);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (alu_hi);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_0)-(0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (23)-(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp6;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (alu_lo+1) !=0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+1)==0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (0)-(13);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (2);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (22)-(0);
    update_hi_2_predicate     : true;
    update_hi_2_value         : (ipv4.p_pkt_0)-(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp6;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.5872159004211426 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_8_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7ff1ea2736d0>, 'write': <dependencyGraph.Statement object at 0x7ff1ea2731f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7ff1eb295be0>, 'write': <dependencyGraph.Statement object at 0x7ff1ea273790>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7ff1ea2736d0>, 'write': <dependencyGraph.Statement object at 0x7ff1ea2731f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff1eb295be0>, 'write': <dependencyGraph.Statement object at 0x7ff1ea273790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff1ea273ac0>, <dependencyGraph.Codelet object at 0x7ff1ea273af0>, <dependencyGraph.Codelet object at 0x7ff1ea273b80>, <dependencyGraph.Codelet object at 0x7ff1ea273bb0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff1ea273ac0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_002', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_4', 'p_pkt_3']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_4', 'metadata_hi': 'p_pkt_3', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp7;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_101;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

curr line: 	p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

curr line: 	p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

curr line: 	p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

curr line: 	state_0 = p_state_002;

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_4  metadata_hi= p_pkt_3  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 31 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 31, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_hi - register_hi ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_hi-register_hi)+1)>0
    ( line =    bit condition_hi_s55 = ((metadata_hi - register_hi_1) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_20;

 > FOUND OUT LINE : 	_out[0] = p_pkt_20;

curr line: 	_out[1] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[1] = p__br_tmp5;

curr line: 	_out[2] = p_pkt_20;

 > FOUND OUT LINE : 	_out[2] = p_pkt_20;

> found out variable:  p_pkt_20
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_20
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p_pkt_20
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 11 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 11, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 23 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 23, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_5_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_5_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_10;

 > FOUND OUT LINE : 	_out[0] = p_pkt_10;

curr line: 	_out[1] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[1] = p__br_tmp5;

curr line: 	_out[2] = p_pkt_10;

 > FOUND OUT LINE : 	_out[2] = p_pkt_10;

> found out variable:  p_pkt_10
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_10
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p_pkt_10
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 22 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 22, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 2 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+2)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 2) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7ff1ea273850>, <alus.SALU object at 0x7ff1ea2a7370>, <alus.SALU object at 0x7ff1ea2a71c0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7ff1ea273850>, 0), (<alus.SALU object at 0x7ff1ea2a7370>, 1), (<alus.SALU object at 0x7ff1ea2a71c0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_20
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7ff1ea273850>
 -* this SALU:  <alus.SALU object at 0x7ff1ea2a7370>
 -* this SALU:  <alus.SALU object at 0x7ff1ea2a71c0>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_3)-(0)', 'update_hi_2_value': '(ipv4.p_pkt_3)-(0)', 'update_lo_1_value': '(ipv4.p_pkt_4)', 'update_lo_2_value': '(ipv4.p_pkt_4)', 'condition_hi': '((ipv4.p_pkt_3-alu_hi)+1)>0', 'condition_lo': '((0-ipv4.p_pkt_4)+alu_lo)==0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p_pkt_20', 'update_hi_1_value': '0', 'update_hi_2_value': '(0)+(alu_lo)', 'update_lo_1_value': '(23)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p_pkt_10', 'update_hi_1_value': '(22)-(0)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_1_value': '(0)-(13)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+2) !=0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': '0'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_20 : 32 (signed);   
        p_pkt_4 : 32 (signed);   
        p_pkt_3 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_4)+alu_lo)==0;
    condition_hi              : ((ipv4.p_pkt_3-alu_hi)+1)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_4);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_4);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : (ipv4.p_pkt_3)-(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_3)-(0);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (23)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : 0;
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (0)+(alu_lo);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p_pkt_20;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+2) !=0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)-(13);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (22)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (ipv4.p_pkt_0)-(alu_hi);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_10;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.630223512649536 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_9_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = p_pkt_0<0;

lhs p__br_tmp3 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp3 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0']
p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp3 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0']
p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp4 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_3', 'p_state_000']
p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp3 = p_pkt_0<0; p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);
RAW p__br_tmp3 = p_pkt_0<0; p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000); p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f2f57f7d6d0>, 'write': <dependencyGraph.Statement object at 0x7f2f57f7d190>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f2f58fa0be0>, 'write': <dependencyGraph.Statement object at 0x7f2f57f7d790>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2f57f7d6d0>, 'write': <dependencyGraph.Statement object at 0x7f2f57f7d190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2f58fa0be0>, 'write': <dependencyGraph.Statement object at 0x7f2f57f7d790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);
v p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp3 = p_pkt_0<0 stmts len 1
p__br_tmp3 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2f57f7dac0>, <dependencyGraph.Codelet object at 0x7f2f57f7daf0>, <dependencyGraph.Codelet object at 0x7f2f57f7db80>, <dependencyGraph.Codelet object at 0x7f2f57f7dbb0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);
p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);
p__br_tmp3 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2f57f7dac0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_002', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000) p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp3 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);
u:  p__br_tmp3 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_4', 'p_pkt_3']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_4', 'metadata_hi': 'p_pkt_3', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_002;

curr line: 	int p_state_100;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);

curr line: 	p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

curr line: 	p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);

curr line: 	p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);

curr line: 	state_0 = p_state_002;

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_4  metadata_hi= p_pkt_3  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 30 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 30, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_hi ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_hi)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_hi_1) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp3;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp3 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp3;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp3;

curr line: 	_out[1] = p_pkt_10;

 > FOUND OUT LINE : 	_out[1] = p_pkt_10;

curr line: 	_out[2] = p__br_tmp3;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp3;

> found out variable:  p__br_tmp3
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp3
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp3
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 31 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 26 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 26, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = register_lo == 0
process_salu_function: parsing  condition_hi ; rhs =  register_lo==0
    ( line =    bit condition_hi_s55 = register_lo_0 == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)!=0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_4_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_1.sk.out
['comp_4']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp3_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp3_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp3_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp3_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp3_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp3;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp3 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p__br_tmp3;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp3;

curr line: 	_out[1] = p_pkt_20;

 > FOUND OUT LINE : 	_out[1] = p_pkt_20;

curr line: 	_out[2] = p__br_tmp3;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp3;

> found out variable:  p__br_tmp3
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp3
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp3
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 31 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 11 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 11, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = register_lo == 0
process_salu_function: parsing  condition_hi ; rhs =  register_lo==0
    ( line =    bit condition_hi_s55 = register_lo_0 == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + register_lo ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+register_lo)!=0
    ( line =    bit condition_lo_s67 = (metadata_lo + register_lo_0) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_5_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
demangled line:  _out0 [ 0 ] = 0
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p__br_tmp3_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p__br_tmp3_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f2f57f7d850>, <alus.SALU object at 0x7f2f57fb2370>, <alus.SALU object at 0x7f2f57fb21c0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f2f57f7d850>, 0), (<alus.SALU object at 0x7f2f57fb2370>, 1), (<alus.SALU object at 0x7f2f57fb21c0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f2f57f7d850>
 -* this SALU:  <alus.SALU object at 0x7f2f57fb2370>
 -* this SALU:  <alus.SALU object at 0x7f2f57fb21c0>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_3)-(0)', 'update_hi_2_value': '(alu_hi)-(ipv4.p_pkt_4)', 'update_lo_1_value': '(ipv4.p_pkt_4)-(0)', 'update_lo_2_value': '(ipv4.p_pkt_4)', 'condition_hi': '((0-ipv4.p_pkt_3)+alu_hi)>0', 'condition_lo': '((0-ipv4.p_pkt_4)+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) or (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) or (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp3', 'update_hi_1_value': '(ipv4.p_pkt_0)+(3)', 'update_hi_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_1_value': '(31)+(alu_hi)', 'update_lo_2_value': '(0)-(26)', 'condition_hi': 'alu_lo==0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo) !=0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp3', 'update_hi_1_value': '(ipv4.p_pkt_0)+(3)', 'update_hi_2_value': '(ipv4.p_pkt_0)+(alu_hi)', 'update_lo_1_value': '(31)+(alu_hi)', 'update_lo_2_value': '(0)-(11)', 'condition_hi': 'alu_lo==0', 'condition_lo': '(ipv4.p_pkt_0+alu_lo) !=0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp3 : 32 (signed);   
        p_pkt_4 : 32 (signed);   
        p_pkt_3 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_4)+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_3)+alu_hi)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (ipv4.p_pkt_4)-(0);
    update_lo_2_predicate     : (condition_hi) or (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_4);
    update_hi_1_predicate     : (condition_hi) or (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_3)-(0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (alu_hi)-(ipv4.p_pkt_4);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p_pkt_0)+alu_lo) !=0;
    condition_hi              : alu_lo==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (31)+(alu_hi);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (0)-(26);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : (ipv4.p_pkt_0)+(3);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp3;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (ipv4.p_pkt_0+alu_lo) !=0;
    condition_hi              : alu_lo==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (31)+(alu_hi);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (0)-(11);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : (ipv4.p_pkt_0)+(3);
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_0)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp3;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.1097514629364014 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_10_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7efd73c11be0>, 'write': <dependencyGraph.Statement object at 0x7efd72bee790>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7efd72bee6d0>, 'write': <dependencyGraph.Statement object at 0x7efd72bee190>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7efd73c11be0>, 'write': <dependencyGraph.Statement object at 0x7efd72bee790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7efd72bee6d0>, 'write': <dependencyGraph.Statement object at 0x7efd72bee190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7efd72beeac0>, <dependencyGraph.Codelet object at 0x7efd72beeaf0>, <dependencyGraph.Codelet object at 0x7efd72beeb80>, <dependencyGraph.Codelet object at 0x7efd72beebb0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7efd72beeac0>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_100', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp7;

curr line: 	int p_state_101;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_000;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

curr line: 	p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

curr line: 	p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

curr line: 	p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

curr line: 	state_0 = p_state_002;

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = state_1;

 > FOUND OUT LINE : 	_out[1] = state_1;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_3  metadata_hi= p_pkt_4  register_lo= state_0  register_hi= state_1  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 31 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 31, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 0 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_hi ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_hi)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_hi_1) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_10;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_10;

 > FOUND OUT LINE : 	_out[0] = p_pkt_10;

curr line: 	_out[1] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[1] = p__br_tmp5;

curr line: 	_out[2] = p_pkt_10;

 > FOUND OUT LINE : 	_out[2] = p_pkt_10;

> found out variable:  p_pkt_10
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_10
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p_pkt_10
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 11 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 11, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 23 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 23, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_4_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
find_output_dst: trying to find `void comp_5`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_20;

curr line: 	p__br_tmp5 = p_pkt_0<0;

curr line: 	p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_20;

 > FOUND OUT LINE : 	_out[0] = p_pkt_20;

curr line: 	_out[1] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[1] = p__br_tmp5;

curr line: 	_out[2] = p_pkt_20;

 > FOUND OUT LINE : 	_out[2] = p_pkt_20;

> found out variable:  p_pkt_20
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_20
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p_pkt_20
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 11 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 11, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 23 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 23, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_5_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_5_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_5_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATEFUL
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7efd72bee850>, <alus.SALU object at 0x7efd72c23370>, <alus.SALU object at 0x7efd72c231c0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7efd72bee850>, 0), (<alus.SALU object at 0x7efd72c23370>, 1), (<alus.SALU object at 0x7efd72c231c0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_4
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_20
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7efd72bee850>
 -* this SALU:  <alus.SALU object at 0x7efd72c23370>
 -* this SALU:  <alus.SALU object at 0x7efd72c231c0>
salu_configs:  [[1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(31)', 'update_hi_2_value': '(ipv4.p_pkt_4)', 'update_lo_1_value': '(alu_lo)-(0)', 'update_lo_2_value': '(ipv4.p_pkt_3)-(0)', 'condition_hi': '((0-ipv4.p_pkt_4)+alu_hi)==0', 'condition_lo': '((0-ipv4.p_pkt_3)+alu_lo)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_hi) or (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p_pkt_10', 'update_hi_1_value': '0', 'update_hi_2_value': '(0)+(alu_lo)', 'update_lo_1_value': '(23)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p_pkt_20', 'update_hi_1_value': '0', 'update_hi_2_value': '(0)+(alu_lo)', 'update_lo_1_value': '(23)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[]]
[[1, 1, 1]]
num pipeline stages:  1
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_20 : 32 (signed);   
        p_pkt_3 : 32 (signed);   
        p_pkt_10 : 32 (signed);   
        p_pkt_4 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_3)+alu_lo)>0;
    condition_hi              : ((0-ipv4.p_pkt_4)+alu_hi)==0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (alu_lo)-(0);
    update_lo_2_predicate     : (condition_hi) or (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_3)-(0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (31);
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_4);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (23)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : 0;
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (0)+(alu_lo);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p_pkt_10;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (23)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : 0;
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (0)+(alu_lo);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p_pkt_20;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.4409611225128174 s
preprocessor time:
