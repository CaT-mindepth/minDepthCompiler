running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_1_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff9f7b67be0>, 'write': <dependencyGraph.Statement object at 0x7ff9f6b44610>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff9f7b67be0>, 'write': <dependencyGraph.Statement object at 0x7ff9f6b44610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff9f6b44a60>, <dependencyGraph.Codelet object at 0x7ff9f6b44a30>, <dependencyGraph.Codelet object at 0x7ff9f6b44190>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff9f6b44190>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp4', 'p__br_tmp5'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp4', 'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
   - createing a node for flank  p__br_tmp4
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp4;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp4;

> found out variable:  p__br_tmp4
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp4
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp4
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 22 18 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 22, 18, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 7 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 7, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+1)==0
    ( line =    bit condition_lo_s67 = (metadata_lo + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_2_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f4d3b0dabe0>, 'write': <dependencyGraph.Statement object at 0x7f4d3a0b7610>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f4d3b0dabe0>, 'write': <dependencyGraph.Statement object at 0x7f4d3a0b7610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4d3a0b7a60>, <dependencyGraph.Codelet object at 0x7f4d3a0b7a30>, <dependencyGraph.Codelet object at 0x7f4d3a0b7220>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4d3a0b7220>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5', 'p__br_tmp4'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp5', 'p__br_tmp4'}
   - createing a node for flank  p__br_tmp4
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 15 14 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 15, 14, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 8 8 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 8, 8, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp4;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp4;

> found out variable:  p__br_tmp4
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp4
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp4
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_3_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp6 = !(p_state_000==29);

lhs p__br_tmp6 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp6 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0']
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_000', 'p_state_000']
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp7 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp7 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_00']
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp6 = !(p_state_000==29); p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f83d760cbe0>, 'write': <dependencyGraph.Statement object at 0x7f83d65e9610>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f83d760cbe0>, 'write': <dependencyGraph.Statement object at 0x7f83d65e9610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = !(p_state_000==29) stmts len 1
p__br_tmp6 = !(p_state_000==29);
v p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
v p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp7 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f83d65e9a60>, <dependencyGraph.Codelet object at 0x7f83d65e9a30>, <dependencyGraph.Codelet object at 0x7f83d65e9190>]
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp6 = !(p_state_000==29);
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f83d65e9190>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp7', 'p__br_tmp6'}
elements in v_outputs:  {'p__br_tmp7', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp7', 'p__br_tmp6'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp6 = !(p_state_000==29)
2   p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp7', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp7', 'p__br_tmp6'}
   - createing a node for flank  p__br_tmp6
   - createing a node for flank  p__br_tmp7
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
u:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
u:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp7;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp6 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp7;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp7;

> found out variable:  p__br_tmp7
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp7
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp7
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 15 14 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 15, 14, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 8 8 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 8, 8, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp7;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp6 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp6;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp6;

> found out variable:  p__br_tmp6
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp6
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp6
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_4_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1262ec5be0>, 'write': <dependencyGraph.Statement object at 0x7f1261ea3610>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1262ec5be0>, 'write': <dependencyGraph.Statement object at 0x7f1261ea3610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1261ea3a60>, <dependencyGraph.Codelet object at 0x7f1261ea3a30>, <dependencyGraph.Codelet object at 0x7f1261ea3190>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1261ea3190>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp4', 'p__br_tmp5'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp4', 'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
   - createing a node for flank  p__br_tmp4
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp4;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp4;

> found out variable:  p__br_tmp4
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp4
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp4
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 2 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 2, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 23 23 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 23, 23, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo + register_lo ) + 31 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo+register_lo)+31)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo + register_lo_0) + 31) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_5_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f7a7a2cfbe0>, 'write': <dependencyGraph.Statement object at 0x7f7a792ac610>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7a7a2cfbe0>, 'write': <dependencyGraph.Statement object at 0x7f7a792ac610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7a792aca60>, <dependencyGraph.Codelet object at 0x7f7a792aca30>, <dependencyGraph.Codelet object at 0x7f7a792ac220>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7a792ac220>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5', 'p__br_tmp4'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp5', 'p__br_tmp4'}
   - createing a node for flank  p__br_tmp4
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 22 18 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 22, 18, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 7 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 7, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+1)==0
    ( line =    bit condition_lo_s67 = (metadata_lo + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp4;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp4;

> found out variable:  p__br_tmp4
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp4
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp4
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_6_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp8 = !(p_state_000==29);

lhs p__br_tmp8 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp8 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp8 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0']
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_state_000', 'p_state_000']
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp9 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp9 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_00']
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp9 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp8 = !(p_state_000==29); p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
RAW p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fc67dbb8be0>, 'write': <dependencyGraph.Statement object at 0x7fc67cb95610>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc67dbb8be0>, 'write': <dependencyGraph.Statement object at 0x7fc67cb95610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = !(p_state_000==29) stmts len 1
p__br_tmp8 = !(p_state_000==29);
v p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
v p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp9 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc67cb95a60>, <dependencyGraph.Codelet object at 0x7fc67cb95a30>, <dependencyGraph.Codelet object at 0x7fc67cb95220>]
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp8 = !(p_state_000==29);
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc67cb95220>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp8', 'p__br_tmp9'}
elements in v_outputs:  {'p__br_tmp8', 'p__br_tmp9'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp8', 'p__br_tmp9'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp8 = !(p_state_000==29)
2   p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp9', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp8', 'p__br_tmp9'}
   - createing a node for flank  p__br_tmp9
   - createing a node for flank  p__br_tmp8
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
u:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
u:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp8;

curr line: 	bit p__br_tmp9;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp8 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp8;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp8;

> found out variable:  p__br_tmp8
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp8
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp8
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 30 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 30, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 3 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 3, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 16 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+16)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 16) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp8;

curr line: 	bit p__br_tmp9;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp8 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp9;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp9;

> found out variable:  p__br_tmp9
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp9
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp9
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 6 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 6, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 5 0 16 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(5, 0, 16, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo + register_lo ) + 30 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo+register_lo)+30)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo + register_lo_0) + 30) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_7_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp5 = p_state_000==29;

lhs p__br_tmp5 rhs p_state_000==29
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_state_000==29;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp5 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (0) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000']
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

lhs p__br_tmp6 rhs (!(p_state_000==29))&&(!(p_state_001==29))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp6 ? (0) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_00']
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (1+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp5 = p_state_000==29;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
RAW p__br_tmp5 = p_state_000==29; p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
RAW p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
RAW p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f5dfa353be0>, 'write': <dependencyGraph.Statement object at 0x7f5df9330790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f5dfa353be0>, 'write': <dependencyGraph.Statement object at 0x7f5df9330790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp5 = p_state_000==29 stmts len 1
p__br_tmp5 = p_state_000==29;
v p_state_001 = p__br_tmp5 ? (0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
v p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) stmts len 1
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
v p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5df9330a60>, <dependencyGraph.Codelet object at 0x7f5df9330a30>, <dependencyGraph.Codelet object at 0x7f5df9330220>]
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp5 = p_state_000==29;
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5df9330220>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp6'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5', 'p__br_tmp6'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp5 = p_state_000==29
2   p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
3   p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
4   p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = p_state_000==29
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp6', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
 rhs_vars:  ['p__br_tmp5', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp5', 'p__br_tmp6'}
   - createing a node for flank  p__br_tmp6
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
u:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
u:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp6;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_002;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp5 = p_state_000==29;

curr line: 	p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

curr line: 	p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

curr line: 	p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 22 18 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 22, 18, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 7 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 7, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+1)==0
    ( line =    bit condition_lo_s67 = (metadata_lo + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp6;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_002;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp5 = p_state_000==29;

curr line: 	p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

curr line: 	p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

curr line: 	p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp6;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp6;

> found out variable:  p__br_tmp6
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp6
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp6
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 30 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 30, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 3 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 3, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 30 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+30)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 30) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_8_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f8602424be0>, 'write': <dependencyGraph.Statement object at 0x7f8601401610>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f8602424be0>, 'write': <dependencyGraph.Statement object at 0x7f8601401610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8601401a60>, <dependencyGraph.Codelet object at 0x7f8601401a30>, <dependencyGraph.Codelet object at 0x7f8601401190>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8601401190>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5', 'p__br_tmp4'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp5', 'p__br_tmp4'}
   - createing a node for flank  p__br_tmp4
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 22 18 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 22, 18, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 7 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 7, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+1)==0
    ( line =    bit condition_lo_s67 = (metadata_lo + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp4;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp4;

> found out variable:  p__br_tmp4
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp4
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp4
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_9_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp2 = !(p_state_000==29);

lhs p__br_tmp2 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp2 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp2 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp3 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp3 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_00']
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp3 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp2 = !(p_state_000==29); p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
RAW p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f98a9bb2be0>, 'write': <dependencyGraph.Statement object at 0x7f98a8b8f610>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f98a9bb2be0>, 'write': <dependencyGraph.Statement object at 0x7f98a8b8f610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = !(p_state_000==29) stmts len 1
p__br_tmp2 = !(p_state_000==29);
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp3 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f98a8b8fa60>, <dependencyGraph.Codelet object at 0x7f98a8b8fa30>, <dependencyGraph.Codelet object at 0x7f98a8b8f220>]
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp2 = !(p_state_000==29);
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f98a8b8f220>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp2', 'p__br_tmp3'}
elements in v_outputs:  {'p__br_tmp2', 'p__br_tmp3'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp2', 'p__br_tmp3'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp2 = !(p_state_000==29)
2   p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp3', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp2', 'p__br_tmp3'}
   - createing a node for flank  p__br_tmp3
   - createing a node for flank  p__br_tmp2
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
u:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
u:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp2;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp2;

> found out variable:  p__br_tmp2
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp2
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp2
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp3;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp3;

> found out variable:  p__br_tmp3
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp3
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp3
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 15 14 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 15, 14, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 8 8 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 8, 8, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_10_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fa4f053cbe0>, 'write': <dependencyGraph.Statement object at 0x7fa4ef519610>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa4f053cbe0>, 'write': <dependencyGraph.Statement object at 0x7fa4ef519610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa4ef519a60>, <dependencyGraph.Codelet object at 0x7fa4ef519a30>, <dependencyGraph.Codelet object at 0x7fa4ef519190>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa4ef519190>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5', 'p__br_tmp4'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp5', 'p__br_tmp4'}
   - createing a node for flank  p__br_tmp4
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 22 18 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 22, 18, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 7 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 7, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 13 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 13, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+1)==0
    ( line =    bit condition_lo_s67 = (metadata_lo + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp4;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp4;

> found out variable:  p__br_tmp4
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp4
Constructing new SALU: id= 1  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp4
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
preprocessor time:
