running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fdc6d7996d0>, 'write': <dependencyGraph.Statement object at 0x7fdc6d799910>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fdc6d7992e0>, 'write': <dependencyGraph.Statement object at 0x7fdc6d7997f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fdc6e7bcbe0>, 'write': <dependencyGraph.Statement object at 0x7fdc6d799790>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fdc6d7996d0>, 'write': <dependencyGraph.Statement object at 0x7fdc6d799910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fdc6d7992e0>, 'write': <dependencyGraph.Statement object at 0x7fdc6d7997f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fdc6e7bcbe0>, 'write': <dependencyGraph.Statement object at 0x7fdc6d799790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdc6d7999a0>, <dependencyGraph.Codelet object at 0x7fdc6d7990d0>, <dependencyGraph.Codelet object at 0x7fdc6d799970>, <dependencyGraph.Codelet object at 0x7fdc6d799a00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdc6d7999a0>, <dependencyGraph.Codelet object at 0x7fdc6d7990d0>, <dependencyGraph.Codelet object at 0x7fdc6d799970>}
total number of nodes created:  4
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_200', 'p_state_201', 'p_state_000', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_hi)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1', 'p__br_tmp1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 'p__br_tmp1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p_pkt_1  metadata_hi= p__br_tmp1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 18 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 18, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) - 0 ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)-0)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) - 0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+2)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 2) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_201;

curr line: 	int p_state_200;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 3 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 3, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 26 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 26, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 31 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_hi)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 15 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 15, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 13 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 13, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 29 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+29)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 29) < 0;
  )
demangled line:  bit condition_lo = register_lo != 0
process_salu_function: parsing  condition_lo ; rhs =  register_lo!=0
    ( line =    bit condition_lo_s67 = register_lo_0 != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fdc6d799e50>, <alus.SALU object at 0x7fdc6d799580>, <alus.SALU object at 0x7fdc6d799f40>, <alus.SALU object at 0x7fdc6d799ee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7fdc6d799e50>, 0), (<alus.SALU object at 0x7fdc6d799580>, 1), (<alus.SALU object at 0x7fdc6d799f40>, 2), (<alus.SALU object at 0x7fdc6d799ee0>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fdc6d799e50>
 -* this SALU:  <alus.SALU object at 0x7fdc6d799580>
 -* this SALU:  <alus.SALU object at 0x7fdc6d799f40>
 -* this SALU:  <alus.SALU object at 0x7fdc6d799ee0>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p_pkt_0)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(0)+(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)-alu_lo)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_hi)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p_pkt_1)', 'update_hi_2_value': '(ipv4.p__br_tmp1)-(18)', 'update_lo_1_value': '(ipv4.p_pkt_1)+(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-0)+1)>0', 'condition_lo': '(((0-ipv4.p_pkt_1)-alu_lo)+2)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)-(3)', 'update_hi_2_value': '(ipv4.p__br_tmp1)-(26)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(31)+(alu_lo)', 'condition_hi': '((0-ipv4.p__br_tmp1)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp1)-alu_hi)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(15)-(30)', 'update_lo_1_value': '1', 'update_lo_2_value': '(13)-(alu_lo)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+29)<0', 'condition_lo': 'alu_lo !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_1 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_0)+alu_hi)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)-alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)+(alu_hi);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (29)-(ipv4.p_pkt_0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (alu_hi)-(1);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p_pkt_1)-alu_lo)+2)==0;
    condition_hi              : (((0-ipv4.p__br_tmp1)-0)+1)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (ipv4.p_pkt_1)+(alu_hi);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (29)-(ipv4.p_pkt_1);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (ipv4.p__br_tmp1)-(18);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p__br_tmp1)-alu_hi)==0;
    condition_hi              : ((0-ipv4.p__br_tmp1)-alu_lo)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (31)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (1)-(3);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (ipv4.p__br_tmp1)-(26);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : alu_lo !=0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+29)<0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (13)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (15)-(30);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.7500288486480713 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f55c67bc6d0>, 'write': <dependencyGraph.Statement object at 0x7f55c67bc910>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f55c77dfbe0>, 'write': <dependencyGraph.Statement object at 0x7f55c67bc790>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f55c67bc2e0>, 'write': <dependencyGraph.Statement object at 0x7f55c67bc7f0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f55c67bc6d0>, 'write': <dependencyGraph.Statement object at 0x7f55c67bc910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f55c77dfbe0>, 'write': <dependencyGraph.Statement object at 0x7f55c67bc790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f55c67bc2e0>, 'write': <dependencyGraph.Statement object at 0x7f55c67bc7f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f55c67bc9a0>, <dependencyGraph.Codelet object at 0x7f55c67bc0d0>, <dependencyGraph.Codelet object at 0x7f55c67bc970>, <dependencyGraph.Codelet object at 0x7f55c67bca00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f55c67bc9a0>, <dependencyGraph.Codelet object at 0x7f55c67bc0d0>, <dependencyGraph.Codelet object at 0x7f55c67bc970>}
total number of nodes created:  4
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_200', 'p_state_001', 'p_state_000', 'p_state_100', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 1 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_hi ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_hi)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_hi_1) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= p_pkt_1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi 8 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 8, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 4 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 4, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+2)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 2) > 0;
  )
demangled line:  bit condition_lo = ( 0 - metadata_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (0-metadata_lo)==0
    ( line =    bit condition_lo_s67 = (0 - metadata_lo) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_201;

curr line: 	int p_state_200;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 30 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 30, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_hi ) + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_hi)+15)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_hi_1) + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 3 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 3 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 3, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 30 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+30)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 30) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+2)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 2) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f55c67bce50>, <alus.SALU object at 0x7f55c67bc580>, <alus.SALU object at 0x7f55c67bcf40>, <alus.SALU object at 0x7f55c67bcee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7f55c67bce50>, 0), (<alus.SALU object at 0x7f55c67bc580>, 1), (<alus.SALU object at 0x7f55c67bcf40>, 2), (<alus.SALU object at 0x7f55c67bcee0>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f55c67bce50>
 -* this SALU:  <alus.SALU object at 0x7f55c67bc580>
 -* this SALU:  <alus.SALU object at 0x7f55c67bcf40>
 -* this SALU:  <alus.SALU object at 0x7f55c67bcee0>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)+(1)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '(ipv4.p_pkt_0-alu_hi)>0', 'condition_lo': '((0-alu_lo)+1)==0', 'update_hi_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(4)', 'update_lo_2_value': '(ipv4.p_pkt_1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+2)>0', 'condition_lo': '(0-ipv4.p__br_tmp1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '(5)-(1)', 'update_hi_2_value': '(30)+(4)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(4)-(13)', 'condition_hi': '(((0-ipv4.p__br_tmp1)+alu_hi)+1)==0', 'condition_lo': '(((0-ipv4.p__br_tmp1)+alu_hi)+15)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '1', 'update_lo_2_value': '(1)-(alu_lo)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+30)>0', 'condition_lo': '(((0-ipv4.p_pkt_1)+alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': '0'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_1 : 32 (signed);   
        p__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+1)==0;
    condition_hi              : (ipv4.p_pkt_0-alu_hi)>0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0)+(1);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_hi_1_predicate     :  not ((condition_hi) and (condition_lo));
    update_hi_1_value         : 1;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (0-ipv4.p__br_tmp1)==0;
    condition_hi              : (((0-ipv4.p__br_tmp1)-alu_lo)+2)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (4);
    update_lo_2_predicate     :  not (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 1;
    update_hi_2_predicate     : false;
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (((0-ipv4.p__br_tmp1)+alu_hi)+15)<0;
    condition_hi              : (((0-ipv4.p__br_tmp1)+alu_hi)+1)==0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (4)-(13);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (5)-(1);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (30)+(4);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : (((0-ipv4.p_pkt_1)+alu_lo)+2)>0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+30)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : 1;
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (1)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (3)-(10);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(6);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.722637176513672 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f6069aaf6d0>, 'write': <dependencyGraph.Statement object at 0x7f6069aaf910>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f606aad2be0>, 'write': <dependencyGraph.Statement object at 0x7f6069aaf790>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f6069aaf2e0>, 'write': <dependencyGraph.Statement object at 0x7f6069aaf7f0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6069aaf6d0>, 'write': <dependencyGraph.Statement object at 0x7f6069aaf910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f606aad2be0>, 'write': <dependencyGraph.Statement object at 0x7f6069aaf790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f6069aaf2e0>, 'write': <dependencyGraph.Statement object at 0x7f6069aaf7f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6069aaf9a0>, <dependencyGraph.Codelet object at 0x7f6069aaf1c0>, <dependencyGraph.Codelet object at 0x7f6069aaf970>, <dependencyGraph.Codelet object at 0x7f6069aafa00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6069aaf9a0>, <dependencyGraph.Codelet object at 0x7f6069aaf1c0>, <dependencyGraph.Codelet object at 0x7f6069aaf970>}
total number of nodes created:  4
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_101', 'p_state_100', 'p_state_201', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 28 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 28, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 25 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 25, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= p_pkt_1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 3 4 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 3, 4, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 3 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 3, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 2 21 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 2, 21, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_lo = metadata_lo > 0
process_salu_function: parsing  condition_lo ; rhs =  metadata_lo>0
    ( line =    bit condition_lo_s67 = metadata_lo > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 0 condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, 0, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (0) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 0 condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, 0, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 0 condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, 0, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (0)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 0 condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, 0, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_200;

curr line: 	int p_state_201;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 9 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 9, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo+register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo + register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) + register_lo ) + 16 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)+register_lo)+16)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) + register_lo_0) + 16) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 4 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 4, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 26 7 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 7, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 30 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+30)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 30) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 29 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+29)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 29) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f6069aafe50>, <alus.SALU object at 0x7f6069aafee0>, <alus.SALU object at 0x7f6069aaff40>, <alus.SALU object at 0x7f6069aaff10>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7f6069aafe50>, 0), (<alus.SALU object at 0x7f6069aafee0>, 1), (<alus.SALU object at 0x7f6069aaff40>, 2), (<alus.SALU object at 0x7f6069aaff10>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
Illegal character '~'
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f6069aafe50>
 -* this SALU:  <alus.SALU object at 0x7f6069aafee0>
 -* this SALU:  <alus.SALU object at 0x7f6069aaff40>
 -* this SALU:  <alus.SALU object at 0x7f6069aaff10>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_0)+(8)', 'update_hi_2_value': '(0)-(28)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(25)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '((0-ipv4.p_pkt_0)-alu_lo)>0', 'condition_lo': '(0+alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '(3)', 'update_hi_2_value': '(3)+(6)', 'update_lo_1_value': '(2)-(21)', 'update_lo_2_value': '(ipv4.p_pkt_1)+(alu_lo)', 'condition_lo': 'ipv4.p__br_tmp1>0', 'update_hi_1_predicate': '(0) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(0)', 'update_lo_2_predicate': '(condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '(2)-(ipv4.p__br_tmp1)', 'update_hi_2_value': '(alu_lo)-(ipv4.p__br_tmp1)', 'update_lo_1_value': '(0)+(9)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '((ipv4.p__br_tmp1+alu_lo)+1)>0', 'condition_lo': '(((0-0)+alu_lo)+16) !=0', 'update_hi_1_predicate': '((condition_hi) and (condition_lo))', 'update_hi_2_predicate': ' not (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(alu_hi)-(4)', 'update_lo_1_value': '1', 'update_lo_2_value': '(26)+(7)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+30)==0', 'condition_lo': '(((0-ipv4.p_pkt_1)+alu_lo)+29)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0+alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)-alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (ipv4.p_pkt_0)-(25);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_0)+(8);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(28);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ipv4.p__br_tmp1>0;
    condition_hi              : 0;
    update_lo_1_predicate     : (0);
    update_lo_1_value         : (2)-(21);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_hi_1_predicate     : (0) and ( not (condition_lo));
    update_hi_1_value         : (3);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (3)+(6);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (((0-0)+alu_lo)+16) !=0;
    condition_hi              : ((ipv4.p__br_tmp1+alu_lo)+1)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)+(9);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_hi_1_predicate     : ((condition_hi) and (condition_lo));
    update_hi_1_value         : (2)-(ipv4.p__br_tmp1);
    update_hi_2_predicate     :  not (condition_lo);
    update_hi_2_value         : (alu_lo)-(ipv4.p__br_tmp1);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : (((0-ipv4.p_pkt_1)+alu_lo)+29)<0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+30)==0;
    update_lo_1_predicate     :  not (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (26)+(7);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (alu_hi)-(4);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.5232534408569336 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7fdfc15ea2e0>, 'write': <dependencyGraph.Statement object at 0x7fdfc15ea7f0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fdfc15ea6d0>, 'write': <dependencyGraph.Statement object at 0x7fdfc15ea910>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fdfc260dbe0>, 'write': <dependencyGraph.Statement object at 0x7fdfc15ea790>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fdfc15ea2e0>, 'write': <dependencyGraph.Statement object at 0x7fdfc15ea7f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fdfc15ea6d0>, 'write': <dependencyGraph.Statement object at 0x7fdfc15ea910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fdfc260dbe0>, 'write': <dependencyGraph.Statement object at 0x7fdfc15ea790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdfc15ea9a0>, <dependencyGraph.Codelet object at 0x7fdfc15ea0d0>, <dependencyGraph.Codelet object at 0x7fdfc15ea970>, <dependencyGraph.Codelet object at 0x7fdfc15eaa00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdfc15ea9a0>, <dependencyGraph.Codelet object at 0x7fdfc15ea0d0>, <dependencyGraph.Codelet object at 0x7fdfc15ea970>}
total number of nodes created:  4
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_200', 'p_state_101', 'p_state_001', 'p_state_201', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 29 11 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 29, 11, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 20 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 20, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_hi)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_hi_1) < 0;
  )
demangled line:  bit condition_lo = ( register_hi + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (register_hi+15)<0
    ( line =    bit condition_lo_s67 = (register_hi_1 + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1', 'p__br_tmp1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 'p__br_tmp1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p_pkt_1  metadata_hi= p__br_tmp1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 0 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 0, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 4 20 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 4, 20, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo + 24 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo+24)<0
    ( line =    bit condition_hi_s55 = (metadata_lo + 24) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) + register_hi ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)+register_hi)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) + register_hi_1) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_200;

curr line: 	int p_state_201;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 16 8 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 16, 8, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - metadata_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (0-metadata_lo)>0
    ( line =    bit condition_hi_s55 = (0 - metadata_lo) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi + register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi+register_hi)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi + register_hi_1) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 4 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 4, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 26 7 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 7, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 31 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+31)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 31) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 29 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+29)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 29) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fdfc15eae50>, <alus.SALU object at 0x7fdfc15ea580>, <alus.SALU object at 0x7fdfc15eaf40>, <alus.SALU object at 0x7fdfc15eaee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7fdfc15eae50>, 0), (<alus.SALU object at 0x7fdfc15ea580>, 1), (<alus.SALU object at 0x7fdfc15eaf40>, 2), (<alus.SALU object at 0x7fdfc15eaee0>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fdfc15eae50>
 -* this SALU:  <alus.SALU object at 0x7fdfc15ea580>
 -* this SALU:  <alus.SALU object at 0x7fdfc15eaf40>
 -* this SALU:  <alus.SALU object at 0x7fdfc15eaee0>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(11)-(29)', 'update_hi_2_value': '(20)+(alu_lo)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(13)-(4)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_hi)<0', 'condition_lo': '(alu_hi+15)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(ipv4.p_pkt_1)', 'update_lo_1_value': '(20)', 'update_lo_2_value': '(ipv4.p_pkt_1)+(alu_lo)', 'condition_hi': '(ipv4.p_pkt_1+24)<0', 'condition_lo': '(((0-ipv4.p__br_tmp1)+alu_hi)+1)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_hi) or ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(8)-(16)', 'condition_hi': '(0-ipv4.p__br_tmp1)>0', 'condition_lo': '((0+alu_hi)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(alu_hi)-(4)', 'update_lo_1_value': '1', 'update_lo_2_value': '(26)+(7)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+31)==0', 'condition_lo': '(((0-ipv4.p_pkt_1)+alu_lo)+29)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '( not (condition_hi)) or (condition_lo)', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_1 : 32 (signed);   
        p__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (alu_hi+15)<0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_hi)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (13)-(4);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (11)-(29);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (20)+(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p__br_tmp1)+alu_hi)+1)>0;
    condition_hi              : (ipv4.p_pkt_1+24)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (20);
    update_lo_2_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0+alu_hi)+1)==0;
    condition_hi              : (0-ipv4.p__br_tmp1)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (8)-(16);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(5);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : (((0-ipv4.p_pkt_1)+alu_lo)+29)<0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+31)==0;
    update_lo_1_predicate     :  not (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (26)+(7);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) or (condition_lo);
    update_hi_2_value         : (alu_hi)-(4);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.695067882537842 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f27f5c9bbe0>, 'write': <dependencyGraph.Statement object at 0x7f27f4c78790>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f27f4c782e0>, 'write': <dependencyGraph.Statement object at 0x7f27f4c787f0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f27f4c786d0>, 'write': <dependencyGraph.Statement object at 0x7f27f4c78910>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f27f5c9bbe0>, 'write': <dependencyGraph.Statement object at 0x7f27f4c78790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f27f4c782e0>, 'write': <dependencyGraph.Statement object at 0x7f27f4c787f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f27f4c786d0>, 'write': <dependencyGraph.Statement object at 0x7f27f4c78910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f27f4c789a0>, <dependencyGraph.Codelet object at 0x7f27f4c781c0>, <dependencyGraph.Codelet object at 0x7f27f4c78970>, <dependencyGraph.Codelet object at 0x7f27f4c78a00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f27f4c789a0>, <dependencyGraph.Codelet object at 0x7f27f4c781c0>, <dependencyGraph.Codelet object at 0x7f27f4c78970>}
total number of nodes created:  4
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100', 'p_state_200', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 14 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 14, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 29 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 29, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - register_lo ) + 5 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-register_lo)+5)<0
    ( line =    bit condition_lo_s67 = ((metadata_hi - register_lo_0) + 5) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1', 'p__br_tmp1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 'p__br_tmp1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p_pkt_1  metadata_hi= p__br_tmp1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 14 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 14, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 2 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 2, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_hi ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_hi)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_hi_1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+2)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 2) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_200;

curr line: 	int p_state_201;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 12 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 12, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 20 23 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 20, 23, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_hi - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_hi-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = ((metadata_hi - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - 0 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-0)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - 0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 5 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 5, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 29 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+29)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 29) < 0;
  )
demangled line:  bit condition_lo = register_lo > 0
process_salu_function: parsing  condition_lo ; rhs =  register_lo>0
    ( line =    bit condition_lo_s67 = register_lo_0 > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_4_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f27f4c78e50>, <alus.SALU object at 0x7f27f4c78ee0>, <alus.SALU object at 0x7f27f4c78f40>, <alus.SALU object at 0x7f27f4c78f10>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7f27f4c78e50>, 0), (<alus.SALU object at 0x7f27f4c78ee0>, 1), (<alus.SALU object at 0x7f27f4c78f40>, 2), (<alus.SALU object at 0x7f27f4c78f10>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f27f4c78e50>
 -* this SALU:  <alus.SALU object at 0x7f27f4c78ee0>
 -* this SALU:  <alus.SALU object at 0x7f27f4c78f40>
 -* this SALU:  <alus.SALU object at 0x7f27f4c78f10>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(0)-(5)', 'update_hi_2_value': '(3)-(14)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(29)+(0)', 'condition_hi': '((0-ipv4.p_pkt_0)-alu_lo)>0', 'condition_lo': '((0-alu_lo)+5)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_1)-(14)', 'update_hi_2_value': '(0)-(ipv4.p_pkt_1)', 'update_lo_1_value': '(2)', 'update_lo_2_value': '(ipv4.p_pkt_1)+(alu_lo)', 'condition_hi': '((0-ipv4.p__br_tmp1)+alu_hi)==0', 'condition_lo': '(((0-ipv4.p_pkt_1)-alu_lo)+2)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(ipv4.p__br_tmp1)+(0)', 'update_hi_2_value': '(12)-(30)', 'update_lo_1_value': '(23)-(20)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)-0)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(5)-(0)', 'update_hi_2_value': '(alu_hi)-(ipv4.p_pkt_1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(0)-(5)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+29)<0', 'condition_lo': 'alu_lo>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_1 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+5)<0;
    condition_hi              : ((0-ipv4.p_pkt_0)-alu_lo)>0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (29)+(0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(5);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (3)-(14);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p_pkt_1)-alu_lo)+2)==0;
    condition_hi              : ((0-ipv4.p__br_tmp1)+alu_hi)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (2);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (ipv4.p_pkt_1)-(14);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (0)-(ipv4.p_pkt_1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p__br_tmp1)-0)<0;
    condition_hi              : ((0-alu_lo)+2)==0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (23)-(20);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (ipv4.p__br_tmp1)+(0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (12)-(30);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : alu_lo>0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+29)<0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (0)-(5);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (5)-(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (alu_hi)-(ipv4.p_pkt_1);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.7981722354888916 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7ff11219e6d0>, 'write': <dependencyGraph.Statement object at 0x7ff11219e910>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7ff11219e2e0>, 'write': <dependencyGraph.Statement object at 0x7ff11219e7f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7ff1131c1be0>, 'write': <dependencyGraph.Statement object at 0x7ff11219e790>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7ff11219e6d0>, 'write': <dependencyGraph.Statement object at 0x7ff11219e910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7ff11219e2e0>, 'write': <dependencyGraph.Statement object at 0x7ff11219e7f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff1131c1be0>, 'write': <dependencyGraph.Statement object at 0x7ff11219e790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff11219e9a0>, <dependencyGraph.Codelet object at 0x7ff11219e1c0>, <dependencyGraph.Codelet object at 0x7ff11219e970>, <dependencyGraph.Codelet object at 0x7ff11219ea00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff11219e9a0>, <dependencyGraph.Codelet object at 0x7ff11219e1c0>, <dependencyGraph.Codelet object at 0x7ff11219e970>}
total number of nodes created:  4
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_200', 'p_state_100', 'p_state_001', 'p_state_201', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 20 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 20, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_hi)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_hi_1) < 0;
  )
demangled line:  bit condition_lo = ( register_hi + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (register_hi+15)<0
    ( line =    bit condition_lo_s67 = (register_hi_1 + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1', 'p__br_tmp1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 'p__br_tmp1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p_pkt_1  metadata_hi= p__br_tmp1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 31 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 31, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 3 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 3, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 4 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+4)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 4) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) - 0 ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)-0)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) - 0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_201;

curr line: 	int p_state_200;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 18 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 18, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 9 24 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 9, 24, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 20 24 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 20, 24, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 1 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+1)<0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 1) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - 0 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-0)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - 0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 3 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 3 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 3, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 30 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+30)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 30) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+2)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 2) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7ff11219ee50>, <alus.SALU object at 0x7ff11219e580>, <alus.SALU object at 0x7ff11219ef40>, <alus.SALU object at 0x7ff11219eee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7ff11219ee50>, 0), (<alus.SALU object at 0x7ff11219e580>, 1), (<alus.SALU object at 0x7ff11219ef40>, 2), (<alus.SALU object at 0x7ff11219eee0>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7ff11219ee50>
 -* this SALU:  <alus.SALU object at 0x7ff11219e580>
 -* this SALU:  <alus.SALU object at 0x7ff11219ef40>
 -* this SALU:  <alus.SALU object at 0x7ff11219eee0>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(5)-(1)', 'update_hi_2_value': '(20)+(alu_lo)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(13)-(4)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_hi)<0', 'condition_lo': '(alu_hi+15)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(31)', 'update_hi_2_value': '(ipv4.p__br_tmp1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_pkt_1)+(alu_lo)', 'update_lo_2_value': '(3)+(2)', 'condition_hi': '(((0-ipv4.p_pkt_1)-alu_lo)+4)==0', 'condition_lo': '(((0-ipv4.p__br_tmp1)-0)+1)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(9)-(24)', 'update_lo_1_value': '(24)-(20)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((ipv4.p__br_tmp1-alu_lo)+1)<0', 'condition_lo': '((0-ipv4.p__br_tmp1)-0)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '1', 'update_lo_2_value': '(1)-(alu_lo)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+30)>0', 'condition_lo': '(((0-ipv4.p_pkt_1)+alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': '0'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp1 : 32 (signed);   
        p_pkt_1 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (alu_hi+15)<0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_hi)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (13)-(4);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (5)-(1);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (20)+(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p__br_tmp1)-0)+1)==0;
    condition_hi              : (((0-ipv4.p_pkt_1)-alu_lo)+4)==0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (3)+(2);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (31);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (ipv4.p__br_tmp1)+(alu_hi);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p__br_tmp1)-0)<0;
    condition_hi              : ((ipv4.p__br_tmp1-alu_lo)+1)<0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (24)-(20);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : 0;
    update_hi_2_predicate     : false;
    update_hi_2_value         : (9)-(24);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : (((0-ipv4.p_pkt_1)+alu_lo)+2)>0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+30)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : 1;
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (1)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (3)-(10);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (0)-(6);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.7723093032836914 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f74c97eebe0>, 'write': <dependencyGraph.Statement object at 0x7f74c87cb790>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f74c87cb6d0>, 'write': <dependencyGraph.Statement object at 0x7f74c87cb910>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f74c87cb2e0>, 'write': <dependencyGraph.Statement object at 0x7f74c87cb7f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f74c97eebe0>, 'write': <dependencyGraph.Statement object at 0x7f74c87cb790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f74c87cb6d0>, 'write': <dependencyGraph.Statement object at 0x7f74c87cb910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f74c87cb2e0>, 'write': <dependencyGraph.Statement object at 0x7f74c87cb7f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f74c87cb9a0>, <dependencyGraph.Codelet object at 0x7f74c87cb1c0>, <dependencyGraph.Codelet object at 0x7f74c87cb970>, <dependencyGraph.Codelet object at 0x7f74c87cba00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f74c87cb9a0>, <dependencyGraph.Codelet object at 0x7f74c87cb1c0>, <dependencyGraph.Codelet object at 0x7f74c87cb970>}
total number of nodes created:  4
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_200', 'p_state_001', 'p_state_100', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 metadata_hi 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_hi, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi + register_hi ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi+register_hi)+1)!=0
    ( line =    bit condition_lo_s67 = ((metadata_hi + register_hi_1) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= p_pkt_1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 31 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 31, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - 0 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-0)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - 0) < 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_201;

curr line: 	int p_state_200;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo + register_hi ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo+register_hi)>0
    ( line =    bit condition_hi_s55 = (metadata_lo + register_hi_1) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo + register_hi ) + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo+register_hi)+15)<0
    ( line =    bit condition_lo_s67 = ((metadata_lo + register_hi_1) + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 15 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 15, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 13 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 13, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 29 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+29)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 29) < 0;
  )
demangled line:  bit condition_lo = register_lo != 0
process_salu_function: parsing  condition_lo ; rhs =  register_lo!=0
    ( line =    bit condition_lo_s67 = register_lo_0 != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f74c87cbe50>, <alus.SALU object at 0x7f74c87cbfd0>, <alus.SALU object at 0x7f74c87cbf40>, <alus.SALU object at 0x7f74c87cbee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7f74c87cbe50>, 0), (<alus.SALU object at 0x7f74c87cbfd0>, 1), (<alus.SALU object at 0x7f74c87cbf40>, 2), (<alus.SALU object at 0x7f74c87cbee0>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f74c87cbe50>
 -* this SALU:  <alus.SALU object at 0x7f74c87cbfd0>
 -* this SALU:  <alus.SALU object at 0x7f74c87cbf40>
 -* this SALU:  <alus.SALU object at 0x7f74c87cbee0>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(4)', 'condition_hi': '(ipv4.p_pkt_0-alu_lo)==0', 'condition_lo': '((0+alu_hi)+1) !=0', 'update_hi_1_predicate': '(condition_hi) or ( not (condition_lo))', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p__br_tmp1)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(ipv4.p_pkt_1)', 'update_lo_2_value': '(ipv4.p_pkt_1)+(alu_lo)', 'condition_hi': '((0-ipv4.p__br_tmp1)-0)<0', 'condition_lo': '(ipv4.p__br_tmp1-alu_lo)>0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(5)-(1)', 'update_hi_2_value': '(31)+(alu_lo)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(13)-(4)', 'condition_hi': '(ipv4.p__br_tmp1+alu_hi)>0', 'condition_lo': '((ipv4.p__br_tmp1+alu_hi)+15)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(15)-(30)', 'update_lo_1_value': '1', 'update_lo_2_value': '(13)-(alu_lo)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+29)<0', 'condition_lo': 'alu_lo !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp1 : 32 (signed);   
        p_pkt_1 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0+alu_hi)+1) !=0;
    condition_hi              : (ipv4.p_pkt_0-alu_lo)==0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (4);
    update_hi_1_predicate     : (condition_hi) or ( not (condition_lo));
    update_hi_1_value         : 1;
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (ipv4.p__br_tmp1-alu_lo)>0;
    condition_hi              : ((0-ipv4.p__br_tmp1)-0)<0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_1);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (29)-(ipv4.p__br_tmp1);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (alu_hi)-(1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((ipv4.p__br_tmp1+alu_hi)+15)<0;
    condition_hi              : (ipv4.p__br_tmp1+alu_hi)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (13)-(4);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (5)-(1);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (31)+(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : alu_lo !=0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+29)<0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (13)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (15)-(30);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.761718273162842 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd66d06bbe0>, 'write': <dependencyGraph.Statement object at 0x7fd66c048790>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fd66c0482e0>, 'write': <dependencyGraph.Statement object at 0x7fd66c0487f0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fd66c0486d0>, 'write': <dependencyGraph.Statement object at 0x7fd66c048910>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd66d06bbe0>, 'write': <dependencyGraph.Statement object at 0x7fd66c048790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fd66c0482e0>, 'write': <dependencyGraph.Statement object at 0x7fd66c0487f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fd66c0486d0>, 'write': <dependencyGraph.Statement object at 0x7fd66c048910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd66c0489a0>, <dependencyGraph.Codelet object at 0x7fd66c0481c0>, <dependencyGraph.Codelet object at 0x7fd66c048970>, <dependencyGraph.Codelet object at 0x7fd66c048a00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd66c0489a0>, <dependencyGraph.Codelet object at 0x7fd66c0481c0>, <dependencyGraph.Codelet object at 0x7fd66c048970>}
total number of nodes created:  4
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000', 'p_state_201', 'p_state_200'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 31 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 31, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_hi ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_hi)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_hi_1) == 0;
  )
demangled line:  bit condition_lo = ( 0 - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (0-register_lo)==0
    ( line =    bit condition_lo_s67 = (0 - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1', 'p__br_tmp1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 'p__br_tmp1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p_pkt_1  metadata_hi= p__br_tmp1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 2 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 2, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) - 0 ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)-0)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) - 0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_201;

curr line: 	int p_state_200;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 20 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 20, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_hi)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_hi_1) < 0;
  )
demangled line:  bit condition_lo = ( register_hi + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (register_hi+15)<0
    ( line =    bit condition_lo_s67 = (register_hi_1 + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 4 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 4, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 26 7 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 7, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 30 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+30)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 30) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 29 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+29)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 29) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fd66c048e50>, <alus.SALU object at 0x7fd66c048ee0>, <alus.SALU object at 0x7fd66c048f40>, <alus.SALU object at 0x7fd66c048f10>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7fd66c048e50>, 0), (<alus.SALU object at 0x7fd66c048ee0>, 1), (<alus.SALU object at 0x7fd66c048f40>, 2), (<alus.SALU object at 0x7fd66c048f10>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fd66c048e50>
 -* this SALU:  <alus.SALU object at 0x7fd66c048ee0>
 -* this SALU:  <alus.SALU object at 0x7fd66c048f40>
 -* this SALU:  <alus.SALU object at 0x7fd66c048f10>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p_pkt_0)', 'update_hi_2_value': '(0)-(4)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(alu_hi)-(31)', 'condition_hi': '((0-0)+alu_hi)==0', 'condition_lo': '(0-alu_lo)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '(2)+(2)', 'update_hi_2_value': '(6)-(0)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-0)+1)==0', 'condition_lo': '((0-alu_lo)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi)', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '(5)-(1)', 'update_hi_2_value': '(20)+(alu_lo)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(13)-(4)', 'condition_hi': '((0-ipv4.p__br_tmp1)+alu_hi)<0', 'condition_lo': '(alu_hi+15)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(alu_hi)-(4)', 'update_lo_1_value': '1', 'update_lo_2_value': '(26)+(7)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+30)==0', 'condition_lo': '(((0-ipv4.p_pkt_1)+alu_lo)+29)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_1 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)==0;
    condition_hi              : ((0-0)+alu_hi)==0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (alu_hi)-(31);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (29)-(ipv4.p_pkt_0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(4);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-alu_lo)+1)==0;
    condition_hi              : (((0-ipv4.p__br_tmp1)-0)+1)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (2)+(2);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (6)-(0);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (alu_hi+15)<0;
    condition_hi              : ((0-ipv4.p__br_tmp1)+alu_hi)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (13)-(4);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (5)-(1);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (20)+(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : (((0-ipv4.p_pkt_1)+alu_lo)+29)<0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+30)==0;
    update_lo_1_predicate     :  not (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (26)+(7);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     :  not ((condition_hi) and (condition_lo));
    update_hi_2_value         : (alu_hi)-(4);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.7222580909729004 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f797aeee6d0>, 'write': <dependencyGraph.Statement object at 0x7f797aeee910>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f797bf11be0>, 'write': <dependencyGraph.Statement object at 0x7f797aeee790>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f797aeee2e0>, 'write': <dependencyGraph.Statement object at 0x7f797aeee7f0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f797aeee6d0>, 'write': <dependencyGraph.Statement object at 0x7f797aeee910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f797bf11be0>, 'write': <dependencyGraph.Statement object at 0x7f797aeee790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f797aeee2e0>, 'write': <dependencyGraph.Statement object at 0x7f797aeee7f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f797aeee9a0>, <dependencyGraph.Codelet object at 0x7f797aeee1c0>, <dependencyGraph.Codelet object at 0x7f797aeee970>, <dependencyGraph.Codelet object at 0x7f797aeeea00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f797aeee9a0>, <dependencyGraph.Codelet object at 0x7f797aeee1c0>, <dependencyGraph.Codelet object at 0x7f797aeee970>}
total number of nodes created:  4
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_101', 'p_state_000', 'p_state_001', 'p_state_201', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo + register_hi ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo+register_hi)>0
    ( line =    bit condition_hi_s55 = (metadata_lo + register_hi_1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) + register_hi ) + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)+register_hi)+15)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) + register_hi_1) + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1', 'p__br_tmp1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 'p__br_tmp1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p_pkt_1  metadata_hi= p__br_tmp1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 3 15 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 15, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 8 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 8, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( register_lo + 22 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (register_lo+22)<0
    ( line =    bit condition_hi_s55 = (register_lo_0 + 22) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) - register_hi ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)-register_hi)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) - register_hi_1) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_200;

curr line: 	int p_state_201;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi 17 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 17, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - 0 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-0)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - 0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 4 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 4, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 26 7 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 7, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 30 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+30)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 30) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 20 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+20)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 20) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f797aeeee50>, <alus.SALU object at 0x7f797aeee580>, <alus.SALU object at 0x7f797aeeef40>, <alus.SALU object at 0x7f797aeeeee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7f797aeeee50>, 0), (<alus.SALU object at 0x7f797aeee580>, 1), (<alus.SALU object at 0x7f797aeeef40>, 2), (<alus.SALU object at 0x7f797aeeeee0>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f797aeeee50>
 -* this SALU:  <alus.SALU object at 0x7f797aeee580>
 -* this SALU:  <alus.SALU object at 0x7f797aeeef40>
 -* this SALU:  <alus.SALU object at 0x7f797aeeeee0>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(5)-(1)', 'update_hi_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(4)-(13)', 'condition_hi': '(ipv4.p_pkt_0+alu_hi)>0', 'condition_lo': '(((0-0)+alu_hi)+15)<0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(3)-(15)', 'update_hi_2_value': '(6)-(1)', 'update_lo_1_value': '(0)-(8)', 'update_lo_2_value': '(ipv4.p_pkt_1)+(alu_lo)', 'condition_hi': '(alu_lo+22)<0', 'condition_lo': '(((0-ipv4.p__br_tmp1)-alu_hi)+1)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(2)', 'condition_hi': '((0-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)-0)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_hi)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(alu_hi)-(4)', 'update_lo_1_value': '1', 'update_lo_2_value': '(26)+(7)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+30)>0', 'condition_lo': '(((0-ipv4.p_pkt_1)+alu_lo)+20)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_1 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-0)+alu_hi)+15)<0;
    condition_hi              : (ipv4.p_pkt_0+alu_hi)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (4)-(13);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (5)-(1);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p__br_tmp1)-alu_hi)+1)>0;
    condition_hi              : (alu_lo+22)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (0)-(8);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (3)-(15);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (6)-(1);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p__br_tmp1)-0)==0;
    condition_hi              : ((0-alu_lo)+2)==0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (ipv4.p__br_tmp1)+(2);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 1;
    update_hi_2_predicate     : false;
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : (((0-ipv4.p_pkt_1)+alu_lo)+20)<0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+30)>0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (26)+(7);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     :  not ((condition_hi) and (condition_lo));
    update_hi_2_value         : (alu_hi)-(4);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.5355753898620605 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7faf624fdbe0>, 'write': <dependencyGraph.Statement object at 0x7faf614da790>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7faf614da6d0>, 'write': <dependencyGraph.Statement object at 0x7faf614da910>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7faf614da2e0>, 'write': <dependencyGraph.Statement object at 0x7faf614da7f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7faf624fdbe0>, 'write': <dependencyGraph.Statement object at 0x7faf614da790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7faf614da6d0>, 'write': <dependencyGraph.Statement object at 0x7faf614da910>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7faf614da2e0>, 'write': <dependencyGraph.Statement object at 0x7faf614da7f0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7faf614da9a0>, <dependencyGraph.Codelet object at 0x7faf614da1c0>, <dependencyGraph.Codelet object at 0x7faf614da970>, <dependencyGraph.Codelet object at 0x7faf614daa00>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7faf614da9a0>, <dependencyGraph.Codelet object at 0x7faf614da1c0>, <dependencyGraph.Codelet object at 0x7faf614da970>}
total number of nodes created:  4
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_001', 'p_state_000', 'p_state_101', 'p_state_200', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p_pkt_0+p_state_000;

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_hi 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)!=0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) != 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_hi ) + 2 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_hi)+2)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_hi_1) + 2) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1', 'p__br_tmp1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 'p__br_tmp1', 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p_pkt_1  metadata_hi= p__br_tmp1  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 2 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 2, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 20 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 20, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) - 0 ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)-0)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) - 0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 16 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+16)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 16) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_201;

curr line: 	int p_state_200;

curr line: 	p_state_200 = state_2;

curr line: 	p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

curr line: 	state_2 = p_state_201;

curr line: 	_out[0] = state_2;

 > FOUND OUT LINE : 	_out[0] = state_2;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 2  metadata_lo= p__br_tmp1  metadata_hi= 0  register_lo= state_2  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 6 metadata_hi 20 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 20, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_hi)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_hi_1) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
find_output_dst: trying to find `void comp_4`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	p__br_tmp1 = p_pkt_1<30;

curr line: 	_out[0] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[0] = p__br_tmp1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 3  metadata_lo= p_pkt_1  metadata_hi= 0  register_lo= 0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 3 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 3 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 3, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 30 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+30)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 30) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+2)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 2) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_4_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_4_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATEFUL
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 

# alus: =  4
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 79 rows, 54 columns and 164 nonzeros
Model fingerprint: 0xfac8506d
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 96 rows, 53 columns, 232 nonzeros
Variable types: 0 continuous, 53 integer (48 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
stage:  -0.0
action:  3
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7faf614dae50>, <alus.SALU object at 0x7faf614dafd0>, <alus.SALU object at 0x7faf614daf40>, <alus.SALU object at 0x7faf614daee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  4  ;  [(<alus.SALU object at 0x7faf614dae50>, 0), (<alus.SALU object at 0x7faf614dafd0>, 1), (<alus.SALU object at 0x7faf614daf40>, 2), (<alus.SALU object at 0x7faf614daee0>, 3)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7faf614dae50>
 -* this SALU:  <alus.SALU object at 0x7faf614dafd0>
 -* this SALU:  <alus.SALU object at 0x7faf614daf40>
 -* this SALU:  <alus.SALU object at 0x7faf614daee0>
salu_configs:  [[1, 1, 1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '((0-alu_lo)+1) !=0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_hi)+2)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '( not (condition_hi)) or (condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(2)+(2)', 'update_hi_2_value': '(6)-(30)', 'update_lo_1_value': '(0)-(20)', 'update_lo_2_value': '(ipv4.p_pkt_1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)-0)+1)==0', 'condition_lo': '(((0-ipv4.p_pkt_1)-alu_lo)+16) !=0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p__br_tmp1)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'update_lo_2_value': '1', 'condition_hi': '(((0-ipv4.p__br_tmp1)-alu_lo)+2)==0', 'condition_lo': '(((0-ipv4.p__br_tmp1)+alu_hi)+1)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '1', 'update_lo_2_value': '(1)-(alu_lo)', 'condition_hi': '(((0-ipv4.p_pkt_1)+alu_lo)+30)>0', 'condition_lo': '(((0-ipv4.p_pkt_1)+alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': '0'}]]
[[]]
[[1, 1, 1, 1]]
num pipeline stages:  1
num_state_groups:  4
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_1 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_3 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_hi)+2)==0;
    condition_hi              : ((0-alu_lo)+1) !=0;
    update_lo_1_predicate     : ( not (condition_hi)) or (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 1;
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p_pkt_1)-alu_lo)+16) !=0;
    condition_hi              : (((0-ipv4.p__br_tmp1)-0)+1)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)-(20);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_1)+(alu_lo);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (2)+(2);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (6)-(30);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (((0-ipv4.p__br_tmp1)+alu_hi)+1)==0;
    condition_hi              : (((0-ipv4.p__br_tmp1)-alu_lo)+2)==0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : 1;
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (29)-(ipv4.p__br_tmp1);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (alu_hi)-(1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_3_blackbox {
    
    
    reg                       : reg_3;
    condition_lo              : (((0-ipv4.p_pkt_1)+alu_lo)+2)>0;
    condition_hi              : (((0-ipv4.p_pkt_1)+alu_lo)+30)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : 1;
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (1)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (3)-(10);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(6);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_3_action () {
    test_stateful_alu_0_3_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_3_table
@pragma stage 0
table test_stateful_alu_0_3_table {
    actions {
        test_stateful_alu_0_3_action;
    }
    default_action: test_stateful_alu_0_3_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
        
          apply(test_stateful_alu_0_3_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.8688511848449707 s
preprocessor time:
