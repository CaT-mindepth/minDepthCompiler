running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff76afb5be0>, 'write': <dependencyGraph.Statement object at 0x7ff769f92550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff76afb5be0>, 'write': <dependencyGraph.Statement object at 0x7ff769f92550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff769f920d0>, <dependencyGraph.Codelet object at 0x7ff769f927c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff769f927c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 4 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 4, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= p_pkt_0  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 3 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 24 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 24, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_hi + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_hi+register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_hi + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7ff769f92f10>, <alus.SALU object at 0x7ff769f928e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7ff769f92f10>, 0), (<alus.SALU object at 0x7ff769f928e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7ff769f92f10>
 -* this SALU:  <alus.SALU object at 0x7ff769f928e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7ff769f92f10>
 -* this SALU:  <alus.SALU object at 0x7ff769f928e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(4)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(1)-(alu_lo)', 'condition_hi': '(ipv4.p_pkt_0+alu_lo)>0', 'condition_lo': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(4)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(1)-(alu_lo)', 'condition_hi': '(ipv4.p_pkt_0+alu_lo)>0', 'condition_lo': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(4);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p__br_tmp1)+alu_lo)+1)==0;
    condition_hi              : (ipv4.p_pkt_0+alu_lo)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (1)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (3)-(10);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(6);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3051447868347168 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd6f7780be0>, 'write': <dependencyGraph.Statement object at 0x7fd6f675d550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd6f7780be0>, 'write': <dependencyGraph.Statement object at 0x7fd6f675d550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd6f675d160>, <dependencyGraph.Codelet object at 0x7fd6f675d7c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd6f675d7c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 4 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 4, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= p__br_tmp1  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 7 13 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 7, 13, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 31 13 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 31, 13, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 metadata_hi 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_hi, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_hi + register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7fd6f675df10>, <alus.SALU object at 0x7fd6f675d8e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7fd6f675df10>, 0), (<alus.SALU object at 0x7fd6f675d8e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fd6f675df10>
 -* this SALU:  <alus.SALU object at 0x7fd6f675d8e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fd6f675df10>
 -* this SALU:  <alus.SALU object at 0x7fd6f675d8e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(4)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(7)-(13)', 'update_hi_2_value': '(13)-(31)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_2_value': '(2)-(ipv4.p__br_tmp1)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(ipv4.p__br_tmp1+alu_lo)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(4)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(7)-(13)', 'update_hi_2_value': '(13)-(31)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_2_value': '(2)-(ipv4.p__br_tmp1)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(ipv4.p__br_tmp1+alu_lo)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_00 : 32 (signed);   
        p__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(4);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (ipv4.p__br_tmp1+alu_lo)>0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)-(alu_hi);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (2)-(ipv4.p__br_tmp1);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (7)-(13);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (13)-(31);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3248226642608643 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f075aa36be0>, 'write': <dependencyGraph.Statement object at 0x7f0759a14550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f075aa36be0>, 'write': <dependencyGraph.Statement object at 0x7f0759a14550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0759a14160>, <dependencyGraph.Codelet object at 0x7f0759a147c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0759a147c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 17 21 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 17, 21, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+1)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+2)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 2) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= p_pkt_0  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 22 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 22, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo+register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = register_lo == 0
process_salu_function: parsing  condition_lo ; rhs =  register_lo==0
    ( line =    bit condition_lo_s67 = register_lo_0 == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f0759a14f10>, <alus.SALU object at 0x7f0759a148e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f0759a14f10>, 0), (<alus.SALU object at 0x7f0759a148e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f0759a14f10>
 -* this SALU:  <alus.SALU object at 0x7f0759a148e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f0759a14f10>
 -* this SALU:  <alus.SALU object at 0x7f0759a148e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+1)==0', 'condition_lo': '((0-alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(22)-(0)', 'update_hi_2_value': '(ipv4.p__br_tmp1)-(alu_hi)', 'update_lo_1_value': '(2)-(ipv4.p__br_tmp1)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(ipv4.p__br_tmp1+alu_lo)>0', 'condition_lo': 'alu_lo==0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': '0'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+1)==0', 'condition_lo': '((0-alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(22)-(0)', 'update_hi_2_value': '(ipv4.p__br_tmp1)-(alu_hi)', 'update_lo_1_value': '(2)-(ipv4.p__br_tmp1)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(ipv4.p__br_tmp1+alu_lo)>0', 'condition_lo': 'alu_lo==0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': '0'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp1 : 32 (signed);   
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+2)>0;
    condition_hi              : ((0-alu_lo)+1)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (17)+(21);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : alu_lo==0;
    condition_hi              : (ipv4.p__br_tmp1+alu_lo)>0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (2)-(ipv4.p__br_tmp1);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (22)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (ipv4.p__br_tmp1)-(alu_hi);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3514411449432373 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f26a7cabbe0>, 'write': <dependencyGraph.Statement object at 0x7f26a6c88550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f26a7cabbe0>, 'write': <dependencyGraph.Statement object at 0x7f26a6c88550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f26a6c88160>, <dependencyGraph.Codelet object at 0x7f26a6c887c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f26a6c887c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 30 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 30, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 7 metadata_lo 11 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_lo, 11, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 15 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 15, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 1 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+1)<0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 1) < 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo + register_hi ) + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo+register_hi)+1)<0
    ( line =    bit condition_lo_s67 = ((metadata_lo + register_hi_1) + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= p__br_tmp1  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 3 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)+register_lo)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) + register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo + register_lo ) + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo+register_lo)+1)<0
    ( line =    bit condition_lo_s67 = ((metadata_lo + register_lo_0) + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f26a6c88f10>, <alus.SALU object at 0x7f26a6c888e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f26a6c88f10>, 0), (<alus.SALU object at 0x7f26a6c888e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f26a6c88f10>
 -* this SALU:  <alus.SALU object at 0x7f26a6c888e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f26a6c88f10>
 -* this SALU:  <alus.SALU object at 0x7f26a6c888e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(1)-(alu_lo)', 'update_hi_2_value': '(31)-(30)', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(15)', 'condition_hi': '((0-alu_lo)+1)<0', 'condition_lo': '((0+alu_hi)+1)<0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(1)-(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'condition_lo': '((ipv4.p_pkt_0+alu_lo)+1)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(1)-(alu_lo)', 'update_hi_2_value': '(31)-(30)', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(15)', 'condition_hi': '((0-alu_lo)+1)<0', 'condition_lo': '((0+alu_hi)+1)<0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(1)-(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'condition_lo': '((ipv4.p_pkt_0+alu_lo)+1)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': 'alu_hi'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0+alu_hi)+1)<0;
    condition_hi              : ((0-alu_lo)+1)<0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(15);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (1)-(alu_lo);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (31)-(30);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((ipv4.p_pkt_0+alu_lo)+1)<0;
    condition_hi              : (((0-ipv4.p__br_tmp1)+alu_lo)+1)==0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : (1)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (3)-(10);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (0)-(6);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3853991031646729 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f9c1b391be0>, 'write': <dependencyGraph.Statement object at 0x7f9c1a36e550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f9c1b391be0>, 'write': <dependencyGraph.Statement object at 0x7f9c1a36e550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9c1a36e0d0>, <dependencyGraph.Codelet object at 0x7f9c1a36e7c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9c1a36e7c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 0 9 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, 9, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_lo 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_lo, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= p__br_tmp1  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 11 7 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 11, 7, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 26 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 26, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 6 30 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 30, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_hi ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_hi)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_hi) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f9c1a36ef10>, <alus.SALU object at 0x7f9c1a36e8e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f9c1a36ef10>, 0), (<alus.SALU object at 0x7f9c1a36e8e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f9c1a36ef10>
 -* this SALU:  <alus.SALU object at 0x7f9c1a36e8e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f9c1a36ef10>
 -* this SALU:  <alus.SALU object at 0x7f9c1a36e8e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(9)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(0)+(alu_hi)', 'condition_hi': '(0-alu_lo)>0', 'condition_lo': '(0-alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '0', 'update_hi_2_value': '(26)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(alu_lo)', 'update_lo_2_value': '1', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) or ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(9)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(0)+(alu_hi)', 'condition_hi': '(0-alu_lo)>0', 'condition_lo': '(0-alu_lo)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '0', 'update_hi_2_value': '(26)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(alu_lo)', 'update_lo_2_value': '1', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) or ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)==0;
    condition_hi              : (0-alu_lo)>0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (0)+(alu_hi);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (9)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p__br_tmp1)+alu_lo)<0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+1)==0;
    update_lo_1_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)-(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : 1;
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (26);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.287973165512085 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f34496a2be0>, 'write': <dependencyGraph.Statement object at 0x7f344867f550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f34496a2be0>, 'write': <dependencyGraph.Statement object at 0x7f344867f550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f344867f0d0>, <dependencyGraph.Codelet object at 0x7f344867f7c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f344867f7c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 17 21 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 17, 21, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+1)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+2)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 2) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= p_pkt_0  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 20 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 20, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 0 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 0, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 7 19 19 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 19, 19, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f344867ff10>, <alus.SALU object at 0x7f344867f8e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f344867ff10>, 0), (<alus.SALU object at 0x7f344867f8e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f344867ff10>
 -* this SALU:  <alus.SALU object at 0x7f344867f8e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f344867ff10>
 -* this SALU:  <alus.SALU object at 0x7f344867f8e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+1)==0', 'condition_lo': '((0-alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(0)-(20)', 'update_hi_2_value': '(alu_hi)', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '((0-ipv4.p__br_tmp1)+alu_lo)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_hi)', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+1)==0', 'condition_lo': '((0-alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(0)-(20)', 'update_hi_2_value': '(alu_hi)', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '((0-ipv4.p__br_tmp1)+alu_lo)==0', 'condition_lo': '((0-ipv4.p__br_tmp1)+alu_lo)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_hi)', 'output_value': 'alu_hi'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+2)>0;
    condition_hi              : ((0-alu_lo)+1)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (17)+(21);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p__br_tmp1)+alu_lo)==0;
    condition_hi              : ((0-ipv4.p__br_tmp1)+alu_lo)==0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : 1;
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(20);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3618838787078857 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fadb5e1fbe0>, 'write': <dependencyGraph.Statement object at 0x7fadb4dfc550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fadb5e1fbe0>, 'write': <dependencyGraph.Statement object at 0x7fadb4dfc550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fadb4dfc0d0>, <dependencyGraph.Codelet object at 0x7fadb4dfc7c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fadb4dfc7c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 17 21 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 17, 21, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 2 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+2)<0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 2) < 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 2 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+2)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 2) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= p__br_tmp1  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 3 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 26 22 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 26, 22, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_hi + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_hi+register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_hi + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7fadb4dfcf10>, <alus.SALU object at 0x7fadb4dfc8e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7fadb4dfcf10>, 0), (<alus.SALU object at 0x7fadb4dfc8e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fadb4dfcf10>
 -* this SALU:  <alus.SALU object at 0x7fadb4dfc8e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fadb4dfcf10>
 -* this SALU:  <alus.SALU object at 0x7fadb4dfc8e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(1)-(alu_lo)', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)<0', 'condition_lo': '((0-alu_lo)+2) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_lo)', 'condition_hi': '(ipv4.p__br_tmp1+alu_lo)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) or (condition_lo)', 'output_value': '0'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(1)-(alu_lo)', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)<0', 'condition_lo': '((0-alu_lo)+2) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(3)-(10)', 'update_hi_2_value': '(0)-(6)', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_lo)', 'condition_hi': '(ipv4.p__br_tmp1+alu_lo)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) or (condition_lo)', 'output_value': '0'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+2) !=0;
    condition_hi              : ((0-alu_lo)+2)<0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (17)+(21);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (1)-(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+1)==0;
    condition_hi              : (ipv4.p__br_tmp1+alu_lo)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : 1;
    update_lo_2_predicate     : ( not (condition_hi)) or (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)-(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (3)-(10);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(6);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3399593830108643 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff8d4c5abe0>, 'write': <dependencyGraph.Statement object at 0x7ff8d3c37550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff8d4c5abe0>, 'write': <dependencyGraph.Statement object at 0x7ff8d3c37550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff8d3c370d0>, <dependencyGraph.Codelet object at 0x7ff8d3c377c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff8d3c377c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 4 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 4, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= p_pkt_0  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 30 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 30, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 21 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 21, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)+register_lo)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) + register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7ff8d3c37f10>, <alus.SALU object at 0x7ff8d3c378e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7ff8d3c37f10>, 0), (<alus.SALU object at 0x7ff8d3c378e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7ff8d3c37f10>
 -* this SALU:  <alus.SALU object at 0x7ff8d3c378e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7ff8d3c37f10>
 -* this SALU:  <alus.SALU object at 0x7ff8d3c378e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(4)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(5)-(8)', 'update_hi_2_value': '(30)+(31)', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'condition_lo': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(4)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0-alu_lo)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(5)-(8)', 'update_hi_2_value': '(30)+(31)', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'condition_lo': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(4);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p__br_tmp1)+alu_lo)+1)==0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+1)==0;
    update_lo_1_predicate     : (condition_hi) or (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (5)-(8);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (30)+(31);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.2743265628814697 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f67a3eabbe0>, 'write': <dependencyGraph.Statement object at 0x7f67a2e88550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f67a3eabbe0>, 'write': <dependencyGraph.Statement object at 0x7f67a2e88550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f67a2e880d0>, <dependencyGraph.Codelet object at 0x7f67a2e887c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f67a2e887c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 17 21 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 17, 21, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= p_pkt_0  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 15 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 15, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 0 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 0, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f67a2e88f10>, <alus.SALU object at 0x7f67a2e888e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f67a2e88f10>, 0), (<alus.SALU object at 0x7f67a2e888e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f67a2e88f10>
 -* this SALU:  <alus.SALU object at 0x7f67a2e888e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f67a2e88f10>
 -* this SALU:  <alus.SALU object at 0x7f67a2e888e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)==0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '(0)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) or ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)==0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '(0)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) or ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp1 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+1)>0;
    condition_hi              : ((0-alu_lo)+2)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (17)+(21);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p__br_tmp1)+alu_lo)+1)==0;
    condition_hi              : (((0-ipv4.p__br_tmp1)+alu_lo)+1)>0;
    update_lo_1_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p__br_tmp1)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (ipv4.p_pkt_0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.340771198272705 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f0c2bb7ebe0>, 'write': <dependencyGraph.Statement object at 0x7f0c2ab5b550>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0c2bb7ebe0>, 'write': <dependencyGraph.Statement object at 0x7f0c2ab5b550>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0c2ab5b0d0>, <dependencyGraph.Codelet object at 0x7f0c2ab5b7c0>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0c2ab5b7c0>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
flanks:  {'p__br_tmp1'}
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_00'}
{'p_pkt_00'}
u:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp1;

> found out variable:  p__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp1
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 4 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 4, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_hi 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 17 21 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 17, 21, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk.out
processing: output is ternary stateful.
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_2_stateless_p_pkt_00_bnd_1.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = p_pkt_00;

 > FOUND OUT LINE : 	_out[0] = p_pkt_00;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p__br_tmp1  metadata_hi= p_pkt_0  register_lo= 0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 4 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 4, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 1 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 1, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 3 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 3, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo + register_lo ) + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo+register_lo)+1)<0
    ( line =    bit condition_lo_s67 = ((metadata_lo + register_lo_0) + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  true
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateless_p_pkt_00_bnd_1.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp1']
 *** found stateful dependencies between  0  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f0c2ab5bf10>, <alus.SALU object at 0x7f0c2ab5b8e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f0c2ab5bf10>, 0), (<alus.SALU object at 0x7f0c2ab5b8e0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp1
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f0c2ab5bf10>
 -* this SALU:  <alus.SALU object at 0x7f0c2ab5b8e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f0c2ab5bf10>
 -* this SALU:  <alus.SALU object at 0x7f0c2ab5b8e0>
salu_configs:  [[1, 0], [0, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)==0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(8)-(4)', 'update_hi_2_value': '(1)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(4)-(3)', 'condition_hi': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'condition_lo': '((ipv4.p__br_tmp1+alu_lo)+1)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'true', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}], [{'output_dst': 'ipv4.p__br_tmp1', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(17)+(21)', 'condition_hi': '((0-alu_lo)+2)==0', 'condition_lo': '((0-alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(8)-(4)', 'update_hi_2_value': '(1)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(4)-(3)', 'condition_hi': '(((0-ipv4.p__br_tmp1)+alu_lo)+1)==0', 'condition_lo': '((ipv4.p__br_tmp1+alu_lo)+1)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'true', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}]]
[[], []]
[[1, 0], [0, 1]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp1 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+1)>0;
    condition_hi              : ((0-alu_lo)+2)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (17)+(21);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((ipv4.p__br_tmp1+alu_lo)+1)<0;
    condition_hi              : (((0-ipv4.p__br_tmp1)+alu_lo)+1)==0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (4)-(3);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (8)-(4);
    update_hi_2_predicate     : true;
    update_hi_2_value         : (1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.468630075454712 s
preprocessor time:
