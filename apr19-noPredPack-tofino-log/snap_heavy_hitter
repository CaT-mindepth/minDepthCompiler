running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_1_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f4be2a54be0>, 'write': <dependencyGraph.Statement object at 0x7f4be1a31610>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f4be1a316d0>, 'write': <dependencyGraph.Statement object at 0x7f4be1a31790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f4be2a54be0>, 'write': <dependencyGraph.Statement object at 0x7f4be1a31610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f4be1a316d0>, 'write': <dependencyGraph.Statement object at 0x7f4be1a31790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4be1a310d0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4be1a310d0>}
total number of nodes created:  1
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp2;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_100;

curr line: 	int p_state_001;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = state_1;

 > FOUND OUT LINE : 	_out[1] = state_1;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= state_1  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 0 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 21 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 21, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 3 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_hi ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_hi)+1)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_hi_1) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 3 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+3)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 3) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f4be1a31ee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f4be1a31ee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f4be1a31ee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(0)+(2)', 'update_hi_2_value': '(0)-(21)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(3)-(alu_hi)', 'condition_hi': '((0-alu_hi)+1)>0', 'condition_lo': '((0-alu_lo)+3)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+3)==0;
    condition_hi              : ((0-alu_hi)+1)>0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (3)-(alu_hi);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)+(2);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(21);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.6635725498199463 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_2_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fa5b70bd6d0>, 'write': <dependencyGraph.Statement object at 0x7fa5b70bd790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fa5b80e0be0>, 'write': <dependencyGraph.Statement object at 0x7fa5b70bd610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa5b70bd6d0>, 'write': <dependencyGraph.Statement object at 0x7fa5b70bd790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa5b80e0be0>, 'write': <dependencyGraph.Statement object at 0x7fa5b70bd610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa5b70bd0d0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa5b70bd0d0>}
total number of nodes created:  1
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_100;

curr line: 	int p_state_000;

curr line: 	int p_state_101;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp2;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 6 16 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 16, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 28 11 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 28, 11, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 15 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 15, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+1)<0
    ( line =    bit condition_lo_s67 = (metadata_lo + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fa5b70bdee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fa5b70bdee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fa5b70bdee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(6)-(16)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(28)+(11)', 'update_lo_2_value': '(alu_lo)-(15)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(0+1)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0+1)<0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (28)+(11);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(15);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (6)-(16);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.6672608852386475 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_3_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f3e56a0d6d0>, 'write': <dependencyGraph.Statement object at 0x7f3e56a0d790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f3e57a30be0>, 'write': <dependencyGraph.Statement object at 0x7f3e56a0d610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f3e56a0d6d0>, 'write': <dependencyGraph.Statement object at 0x7f3e56a0d790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3e57a30be0>, 'write': <dependencyGraph.Statement object at 0x7f3e56a0d610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3e56a0d0d0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3e56a0d0d0>}
total number of nodes created:  1
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp2;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 21 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 21, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 0 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 9 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 9, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_hi ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_hi)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_hi_1) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f3e56a0dee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f3e56a0dee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f3e56a0dee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(0)-(21)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(0)+(0)', 'update_lo_2_value': '(9)+(0)', 'condition_hi': '(0-alu_hi)>0', 'condition_lo': '(0-alu_lo)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)==0;
    condition_hi              : (0-alu_hi)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)+(0);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (9)+(0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(21);
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.6465194225311279 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_4_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f632a7636d0>, 'write': <dependencyGraph.Statement object at 0x7f632a763790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f632b786be0>, 'write': <dependencyGraph.Statement object at 0x7f632a763610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f632a7636d0>, 'write': <dependencyGraph.Statement object at 0x7f632a763790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f632b786be0>, 'write': <dependencyGraph.Statement object at 0x7f632a763610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f632a763160>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f632a763160>}
total number of nodes created:  1
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_001;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_000;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 1 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 30 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 30, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 19 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 19, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_hi ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_hi)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_hi_1) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)<0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f632a763ee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f632a763ee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f632a763ee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(1)-(0)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(0)-(30)', 'update_lo_2_value': '(alu_lo)', 'condition_hi': '(0-alu_hi)==0', 'condition_lo': '(0-alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)<0;
    condition_hi              : (0-alu_hi)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)-(30);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (alu_lo);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (1)-(0);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.6443204879760742 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_5_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fb0782376d0>, 'write': <dependencyGraph.Statement object at 0x7fb078237790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fb079259be0>, 'write': <dependencyGraph.Statement object at 0x7fb078237610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb0782376d0>, 'write': <dependencyGraph.Statement object at 0x7fb078237790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb079259be0>, 'write': <dependencyGraph.Statement object at 0x7fb078237610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb078237160>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb078237160>}
total number of nodes created:  1
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp3;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_100;

curr line: 	int p_state_001;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = state_1;

 > FOUND OUT LINE : 	_out[1] = state_1;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= state_1  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 6 14 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 14, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 0 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 0, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo + register_hi ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo+register_hi)>0
    ( line =    bit condition_hi_s55 = (metadata_lo + register_hi_1) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fb078237ee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fb078237ee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fb078237ee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(6)-(14)', 'update_hi_2_value': '(0)+(alu_lo)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(2)', 'condition_hi': '(0+alu_hi)>0', 'condition_lo': '((0-alu_lo)+1) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+1) !=0;
    condition_hi              : (0+alu_hi)>0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (2);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (6)-(14);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)+(alu_lo);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.7253389358520508 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_6_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f01fb49f6d0>, 'write': <dependencyGraph.Statement object at 0x7f01fb49f790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f01fc4c2be0>, 'write': <dependencyGraph.Statement object at 0x7f01fb49f610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f01fb49f6d0>, 'write': <dependencyGraph.Statement object at 0x7f01fb49f790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f01fc4c2be0>, 'write': <dependencyGraph.Statement object at 0x7f01fb49f610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f01fb49f160>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f01fb49f160>}
total number of nodes created:  1
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_001;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp3;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 2 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 2, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 1 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_hi)+1)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_hi_1) + 1) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo + register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f01fb49fee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f01fb49fee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f01fb49fee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '(0)+(2)', 'update_lo_1_value': '(0)-(alu_lo)', 'update_lo_2_value': '(alu_hi)-(1)', 'condition_hi': '((0-alu_hi)+1)==0', 'condition_lo': '(0+alu_lo)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0+alu_lo)>0;
    condition_hi              : ((0-alu_hi)+1)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)-(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_hi)-(1);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (1)+(alu_hi);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (0)+(2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.6339881420135498 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_7_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f307cd20be0>, 'write': <dependencyGraph.Statement object at 0x7f307bcfd610>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f307bcfd6d0>, 'write': <dependencyGraph.Statement object at 0x7f307bcfd790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f307cd20be0>, 'write': <dependencyGraph.Statement object at 0x7f307bcfd610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f307bcfd6d0>, 'write': <dependencyGraph.Statement object at 0x7f307bcfd790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f307bcfd0d0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f307bcfd0d0>}
total number of nodes created:  1
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = state_1;

 > FOUND OUT LINE : 	_out[1] = state_1;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= state_1  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_hi ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_hi)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_hi_1) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)!=0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f307bcfdee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f307bcfdee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f307bcfdee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(26)+(3)', 'update_lo_1_value': '(2)-(0)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '(0-alu_hi)==0', 'condition_lo': '((0-alu_lo)+1) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+1) !=0;
    condition_hi              : (0-alu_hi)==0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (2)-(0);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (26)+(3);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.7109289169311523 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_8_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f7935e2d6d0>, 'write': <dependencyGraph.Statement object at 0x7f7935e2d790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f7936e50be0>, 'write': <dependencyGraph.Statement object at 0x7f7935e2d610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f7935e2d6d0>, 'write': <dependencyGraph.Statement object at 0x7f7935e2d790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7936e50be0>, 'write': <dependencyGraph.Statement object at 0x7f7935e2d610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7935e2d0d0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7935e2d0d0>}
total number of nodes created:  1
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp3;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 21 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 21, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 0 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 9 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 9, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_hi ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_hi)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_hi_1) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f7935e2dee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f7935e2dee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f7935e2dee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(0)-(21)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(0)+(0)', 'update_lo_2_value': '(9)+(alu_lo)', 'condition_hi': '(0-alu_hi)>0', 'condition_lo': '(0-alu_lo)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)==0;
    condition_hi              : (0-alu_hi)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)+(0);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (9)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(21);
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.6977605819702148 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_9_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f7dba362be0>, 'write': <dependencyGraph.Statement object at 0x7f7db933f610>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f7db933f6d0>, 'write': <dependencyGraph.Statement object at 0x7f7db933f790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7dba362be0>, 'write': <dependencyGraph.Statement object at 0x7f7db933f610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f7db933f6d0>, 'write': <dependencyGraph.Statement object at 0x7f7db933f790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7db933f0d0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7db933f0d0>}
total number of nodes created:  1
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 'state_1'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_100;

curr line: 	int p_state_000;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = state_1;

 > FOUND OUT LINE : 	_out[1] = state_1;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_0  register_hi= state_1  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 3 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_hi ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_hi)<0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_hi_1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f7db933fee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f7db933fee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f7db933fee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(0)-(0)', 'update_hi_2_value': '(26)+(3)', 'update_lo_1_value': '(3)-(alu_hi)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+2)==0', 'condition_lo': '(0-alu_hi)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_hi)<0;
    condition_hi              : ((0-alu_lo)+2)==0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (3)-(alu_hi);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)-(0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (26)+(3);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.7187793254852295 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter, program name: snap_heavy_hitter_equivalent_10_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = p_state_100==0;

lhs p__br_tmp2 rhs p_state_100==0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = p_state_100==0;

 is_read_flank: processing rhs_vars =  ['p_state_100']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

lhs p__br_tmp3 rhs (p_state_001==1000)&&(p_state_100==0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

 is_read_flank: processing rhs_vars =  ['p_state_001', 'p_state_100']
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp2 = p_state_100==0;
RAW p_state_100 = state_1; p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p__br_tmp2 = p_state_100==0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0); p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fc1e619d6d0>, 'write': <dependencyGraph.Statement object at 0x7fc1e619d790>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fc1e71c0be0>, 'write': <dependencyGraph.Statement object at 0x7fc1e619d610>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fc1e619d6d0>, 'write': <dependencyGraph.Statement object at 0x7fc1e619d790>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc1e71c0be0>, 'write': <dependencyGraph.Statement object at 0x7fc1e619d610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = p_state_100==0 stmts len 1
p__br_tmp2 = p_state_100==0;
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) stmts len 1
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
v p_state_101 = p__br_tmp3 ? (1) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc1e619d0d0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp2 = p_state_100==0;
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);
state_0 = p_state_001;
p_state_101 = p__br_tmp3 ? (1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc1e619d0d0>}
total number of nodes created:  1
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  1
total number of nodes created:  1
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp2 = p_state_100==0 p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0) state_0 = p_state_001 p_state_101 = p__br_tmp3 ? (1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  1
number of nodes in comp_graph:  1
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/snap_heavy_hitter/snap_heavy_hitter_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_100;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp3;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = p_state_100==0;

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_001==1000)&&(p_state_100==0);

curr line: 	state_0 = p_state_001;

curr line: 	p_state_101 = p__br_tmp3 ? (1) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= 0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 1 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 17 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 17, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi 3 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 3, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 4 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+4)<0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 4) < 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fc1e619dee0>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fc1e619dee0>, 0)]
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fc1e619dee0>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(1)-(1)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(0)-(17)', 'update_lo_2_value': '(0)+(3)', 'condition_hi': '((0-alu_lo)+4)<0', 'condition_lo': '(0-alu_lo)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {

    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0-alu_lo)==0;
    condition_hi              : ((0-alu_lo)+4)<0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)-(17);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (0)+(3);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (1)-(1);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 0.7148270606994629 s
preprocessor time:
